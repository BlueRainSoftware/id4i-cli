// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateDocument creates an empty document for an id4n

The document is created empty, mime-type defaults to text/plain
*/
func (a *Client) CreateDocument(params *CreateDocumentParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDocumentOK, *CreateDocumentAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDocumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDocument",
		Method:             "PUT",
		PathPattern:        "/api/v1/documents/{id4n}/{organizationId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateDocumentOK:
		return value, nil, nil
	case *CreateDocumentAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteDocument deletes a document
*/
func (a *Client) DeleteDocument(params *DeleteDocumentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDocumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDocument",
		Method:             "DELETE",
		PathPattern:        "/api/v1/documents/{id4n}/{organizationId}/{fileName}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDocumentOK), nil

}

/*
GETDocument retrieves a document meta data only no content
*/
func (a *Client) GETDocument(params *GETDocumentParams, authInfo runtime.ClientAuthInfoWriter) (*GETDocumentOK, *GETDocumentAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDocumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDocument",
		Method:             "GET",
		PathPattern:        "/api/v1/documents/{id4n}/{organizationId}/{fileName}/metadata",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GETDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GETDocumentOK:
		return value, nil, nil
	case *GETDocumentAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ListAllDocuments lists documents

Listing all documents of an id4n
*/
func (a *Client) ListAllDocuments(params *ListAllDocumentsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllDocumentsOK, *ListAllDocumentsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllDocumentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllDocuments",
		Method:             "GET",
		PathPattern:        "/api/v1/documents/{id4n}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllDocumentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListAllDocumentsOK:
		return value, nil, nil
	case *ListAllDocumentsAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ListDocuments lists organization specific documents

Listing documents of an id4n seen by a specified organization
*/
func (a *Client) ListDocuments(params *ListDocumentsParams, authInfo runtime.ClientAuthInfoWriter) (*ListDocumentsOK, *ListDocumentsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDocumentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDocuments",
		Method:             "GET",
		PathPattern:        "/api/v1/documents/{id4n}/{organizationId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDocumentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListDocumentsOK:
		return value, nil, nil
	case *ListDocumentsAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ReadDocument reads document contents
*/
func (a *Client) ReadDocument(params *ReadDocumentParams, authInfo runtime.ClientAuthInfoWriter) (*ReadDocumentOK, *ReadDocumentAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDocumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readDocument",
		Method:             "GET",
		PathPattern:        "/api/v1/documents/{id4n}/{organizationId}/{fileName}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReadDocumentOK:
		return value, nil, nil
	case *ReadDocumentAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ReadFromMicrostorage reads data from microstorage
*/
func (a *Client) ReadFromMicrostorage(params *ReadFromMicrostorageParams, authInfo runtime.ClientAuthInfoWriter) (*ReadFromMicrostorageOK, *ReadFromMicrostorageAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadFromMicrostorageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readFromMicrostorage",
		Method:             "GET",
		PathPattern:        "/api/v1/microstorage/{id4n}/{organization}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadFromMicrostorageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReadFromMicrostorageOK:
		return value, nil, nil
	case *ReadFromMicrostorageAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
UpdateDocumentMetadata updates a document
*/
func (a *Client) UpdateDocumentMetadata(params *UpdateDocumentMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDocumentMetadataOK, *UpdateDocumentMetadataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDocumentMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDocumentMetadata",
		Method:             "PATCH",
		PathPattern:        "/api/v1/documents/{id4n}/{organizationId}/{fileName}/metadata",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDocumentMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateDocumentMetadataOK:
		return value, nil, nil
	case *UpdateDocumentMetadataNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
WriteToMicrostorage writes data to microstorage
*/
func (a *Client) WriteToMicrostorage(params *WriteToMicrostorageParams, authInfo runtime.ClientAuthInfoWriter) (*WriteToMicrostorageOK, *WriteToMicrostorageAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWriteToMicrostorageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "writeToMicrostorage",
		Method:             "PUT",
		PathPattern:        "/api/v1/microstorage/{id4n}/{organization}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WriteToMicrostorageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *WriteToMicrostorageOK:
		return value, nil, nil
	case *WriteToMicrostorageAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
