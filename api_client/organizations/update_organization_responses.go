// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api_models"
)

// UpdateOrganizationReader is a Reader for the UpdateOrganization structure.
type UpdateOrganizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateOrganizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateOrganizationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewUpdateOrganizationAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateOrganizationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateOrganizationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateOrganizationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateOrganizationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewUpdateOrganizationMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewUpdateOrganizationNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateOrganizationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewUpdateOrganizationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateOrganizationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateOrganizationOK creates a UpdateOrganizationOK with default headers values
func NewUpdateOrganizationOK() *UpdateOrganizationOK {
	return &UpdateOrganizationOK{}
}

/*UpdateOrganizationOK handles this case with default header values.

OK
*/
type UpdateOrganizationOK struct {
	Payload *api_models.Organization
}

func (o *UpdateOrganizationOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/organizations/{organizationId}][%d] updateOrganizationOK  %+v", 200, o.Payload)
}

func (o *UpdateOrganizationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.Organization)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrganizationAccepted creates a UpdateOrganizationAccepted with default headers values
func NewUpdateOrganizationAccepted() *UpdateOrganizationAccepted {
	return &UpdateOrganizationAccepted{}
}

/*UpdateOrganizationAccepted handles this case with default header values.

Accepted
*/
type UpdateOrganizationAccepted struct {
}

func (o *UpdateOrganizationAccepted) Error() string {
	return fmt.Sprintf("[PUT /api/v1/organizations/{organizationId}][%d] updateOrganizationAccepted ", 202)
}

func (o *UpdateOrganizationAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateOrganizationBadRequest creates a UpdateOrganizationBadRequest with default headers values
func NewUpdateOrganizationBadRequest() *UpdateOrganizationBadRequest {
	return &UpdateOrganizationBadRequest{}
}

/*UpdateOrganizationBadRequest handles this case with default header values.

Bad Request
*/
type UpdateOrganizationBadRequest struct {
	Payload *api_models.APIError
}

func (o *UpdateOrganizationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/organizations/{organizationId}][%d] updateOrganizationBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateOrganizationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrganizationUnauthorized creates a UpdateOrganizationUnauthorized with default headers values
func NewUpdateOrganizationUnauthorized() *UpdateOrganizationUnauthorized {
	return &UpdateOrganizationUnauthorized{}
}

/*UpdateOrganizationUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateOrganizationUnauthorized struct {
	Payload *api_models.APIError
}

func (o *UpdateOrganizationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v1/organizations/{organizationId}][%d] updateOrganizationUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateOrganizationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrganizationForbidden creates a UpdateOrganizationForbidden with default headers values
func NewUpdateOrganizationForbidden() *UpdateOrganizationForbidden {
	return &UpdateOrganizationForbidden{}
}

/*UpdateOrganizationForbidden handles this case with default header values.

Forbidden
*/
type UpdateOrganizationForbidden struct {
	Payload *api_models.APIError
}

func (o *UpdateOrganizationForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/organizations/{organizationId}][%d] updateOrganizationForbidden  %+v", 403, o.Payload)
}

func (o *UpdateOrganizationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrganizationNotFound creates a UpdateOrganizationNotFound with default headers values
func NewUpdateOrganizationNotFound() *UpdateOrganizationNotFound {
	return &UpdateOrganizationNotFound{}
}

/*UpdateOrganizationNotFound handles this case with default header values.

Not Found
*/
type UpdateOrganizationNotFound struct {
	Payload *api_models.APIError
}

func (o *UpdateOrganizationNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/organizations/{organizationId}][%d] updateOrganizationNotFound  %+v", 404, o.Payload)
}

func (o *UpdateOrganizationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrganizationMethodNotAllowed creates a UpdateOrganizationMethodNotAllowed with default headers values
func NewUpdateOrganizationMethodNotAllowed() *UpdateOrganizationMethodNotAllowed {
	return &UpdateOrganizationMethodNotAllowed{}
}

/*UpdateOrganizationMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type UpdateOrganizationMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *UpdateOrganizationMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /api/v1/organizations/{organizationId}][%d] updateOrganizationMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateOrganizationMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrganizationNotAcceptable creates a UpdateOrganizationNotAcceptable with default headers values
func NewUpdateOrganizationNotAcceptable() *UpdateOrganizationNotAcceptable {
	return &UpdateOrganizationNotAcceptable{}
}

/*UpdateOrganizationNotAcceptable handles this case with default header values.

Not Acceptable
*/
type UpdateOrganizationNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *UpdateOrganizationNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /api/v1/organizations/{organizationId}][%d] updateOrganizationNotAcceptable  %+v", 406, o.Payload)
}

func (o *UpdateOrganizationNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrganizationConflict creates a UpdateOrganizationConflict with default headers values
func NewUpdateOrganizationConflict() *UpdateOrganizationConflict {
	return &UpdateOrganizationConflict{}
}

/*UpdateOrganizationConflict handles this case with default header values.

Conflict
*/
type UpdateOrganizationConflict struct {
	Payload *api_models.APIError
}

func (o *UpdateOrganizationConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v1/organizations/{organizationId}][%d] updateOrganizationConflict  %+v", 409, o.Payload)
}

func (o *UpdateOrganizationConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrganizationUnsupportedMediaType creates a UpdateOrganizationUnsupportedMediaType with default headers values
func NewUpdateOrganizationUnsupportedMediaType() *UpdateOrganizationUnsupportedMediaType {
	return &UpdateOrganizationUnsupportedMediaType{}
}

/*UpdateOrganizationUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type UpdateOrganizationUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *UpdateOrganizationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v1/organizations/{organizationId}][%d] updateOrganizationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateOrganizationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrganizationInternalServerError creates a UpdateOrganizationInternalServerError with default headers values
func NewUpdateOrganizationInternalServerError() *UpdateOrganizationInternalServerError {
	return &UpdateOrganizationInternalServerError{}
}

/*UpdateOrganizationInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateOrganizationInternalServerError struct {
	Payload *api_models.APIError
}

func (o *UpdateOrganizationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/organizations/{organizationId}][%d] updateOrganizationInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateOrganizationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
