// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api/models"
)

// RegisterUserReader is a Reader for the RegisterUser structure.
type RegisterUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRegisterUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewRegisterUserCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewRegisterUserAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewRegisterUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewRegisterUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewRegisterUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewRegisterUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewRegisterUserMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewRegisterUserNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewRegisterUserConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewRegisterUserUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewRegisterUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRegisterUserOK creates a RegisterUserOK with default headers values
func NewRegisterUserOK() *RegisterUserOK {
	return &RegisterUserOK{}
}

/*RegisterUserOK handles this case with default header values.

OK
*/
type RegisterUserOK struct {
	Payload *api_models.UserRegistrationResponse
}

func (o *RegisterUserOK) Error() string {
	return fmt.Sprintf("[POST /account/registration][%d] registerUserOK  %+v", 200, o.Payload)
}

func (o *RegisterUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.UserRegistrationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserCreated creates a RegisterUserCreated with default headers values
func NewRegisterUserCreated() *RegisterUserCreated {
	return &RegisterUserCreated{}
}

/*RegisterUserCreated handles this case with default header values.

Created
*/
type RegisterUserCreated struct {
}

func (o *RegisterUserCreated) Error() string {
	return fmt.Sprintf("[POST /account/registration][%d] registerUserCreated ", 201)
}

func (o *RegisterUserCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterUserAccepted creates a RegisterUserAccepted with default headers values
func NewRegisterUserAccepted() *RegisterUserAccepted {
	return &RegisterUserAccepted{}
}

/*RegisterUserAccepted handles this case with default header values.

Accepted
*/
type RegisterUserAccepted struct {
}

func (o *RegisterUserAccepted) Error() string {
	return fmt.Sprintf("[POST /account/registration][%d] registerUserAccepted ", 202)
}

func (o *RegisterUserAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterUserBadRequest creates a RegisterUserBadRequest with default headers values
func NewRegisterUserBadRequest() *RegisterUserBadRequest {
	return &RegisterUserBadRequest{}
}

/*RegisterUserBadRequest handles this case with default header values.

Bad Request
*/
type RegisterUserBadRequest struct {
	Payload *api_models.APIError
}

func (o *RegisterUserBadRequest) Error() string {
	return fmt.Sprintf("[POST /account/registration][%d] registerUserBadRequest  %+v", 400, o.Payload)
}

func (o *RegisterUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserUnauthorized creates a RegisterUserUnauthorized with default headers values
func NewRegisterUserUnauthorized() *RegisterUserUnauthorized {
	return &RegisterUserUnauthorized{}
}

/*RegisterUserUnauthorized handles this case with default header values.

Unauthorized
*/
type RegisterUserUnauthorized struct {
	Payload *api_models.APIError
}

func (o *RegisterUserUnauthorized) Error() string {
	return fmt.Sprintf("[POST /account/registration][%d] registerUserUnauthorized  %+v", 401, o.Payload)
}

func (o *RegisterUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserForbidden creates a RegisterUserForbidden with default headers values
func NewRegisterUserForbidden() *RegisterUserForbidden {
	return &RegisterUserForbidden{}
}

/*RegisterUserForbidden handles this case with default header values.

Forbidden
*/
type RegisterUserForbidden struct {
	Payload *api_models.APIError
}

func (o *RegisterUserForbidden) Error() string {
	return fmt.Sprintf("[POST /account/registration][%d] registerUserForbidden  %+v", 403, o.Payload)
}

func (o *RegisterUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserNotFound creates a RegisterUserNotFound with default headers values
func NewRegisterUserNotFound() *RegisterUserNotFound {
	return &RegisterUserNotFound{}
}

/*RegisterUserNotFound handles this case with default header values.

Not Found
*/
type RegisterUserNotFound struct {
	Payload *api_models.APIError
}

func (o *RegisterUserNotFound) Error() string {
	return fmt.Sprintf("[POST /account/registration][%d] registerUserNotFound  %+v", 404, o.Payload)
}

func (o *RegisterUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserMethodNotAllowed creates a RegisterUserMethodNotAllowed with default headers values
func NewRegisterUserMethodNotAllowed() *RegisterUserMethodNotAllowed {
	return &RegisterUserMethodNotAllowed{}
}

/*RegisterUserMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type RegisterUserMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *RegisterUserMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /account/registration][%d] registerUserMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *RegisterUserMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserNotAcceptable creates a RegisterUserNotAcceptable with default headers values
func NewRegisterUserNotAcceptable() *RegisterUserNotAcceptable {
	return &RegisterUserNotAcceptable{}
}

/*RegisterUserNotAcceptable handles this case with default header values.

Not Acceptable
*/
type RegisterUserNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *RegisterUserNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /account/registration][%d] registerUserNotAcceptable  %+v", 406, o.Payload)
}

func (o *RegisterUserNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserConflict creates a RegisterUserConflict with default headers values
func NewRegisterUserConflict() *RegisterUserConflict {
	return &RegisterUserConflict{}
}

/*RegisterUserConflict handles this case with default header values.

Conflict
*/
type RegisterUserConflict struct {
	Payload *api_models.APIError
}

func (o *RegisterUserConflict) Error() string {
	return fmt.Sprintf("[POST /account/registration][%d] registerUserConflict  %+v", 409, o.Payload)
}

func (o *RegisterUserConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserUnsupportedMediaType creates a RegisterUserUnsupportedMediaType with default headers values
func NewRegisterUserUnsupportedMediaType() *RegisterUserUnsupportedMediaType {
	return &RegisterUserUnsupportedMediaType{}
}

/*RegisterUserUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type RegisterUserUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *RegisterUserUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /account/registration][%d] registerUserUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *RegisterUserUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserInternalServerError creates a RegisterUserInternalServerError with default headers values
func NewRegisterUserInternalServerError() *RegisterUserInternalServerError {
	return &RegisterUserInternalServerError{}
}

/*RegisterUserInternalServerError handles this case with default header values.

Internal Server Error
*/
type RegisterUserInternalServerError struct {
	Payload *api_models.APIError
}

func (o *RegisterUserInternalServerError) Error() string {
	return fmt.Sprintf("[POST /account/registration][%d] registerUserInternalServerError  %+v", 500, o.Payload)
}

func (o *RegisterUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
