// Code generated by go-swagger; DO NOT EDIT.

package api_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HistoryItem HistoryItem
//
// GUID history item
// swagger:model HistoryItem
type HistoryItem struct {

	// History items custom additional properties
	AdditionalProperties map[string]string `json:"additionalProperties,omitempty"`

	// Originator of the history item
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// Forms the primary key of the history item together with the GUID and the organizationId
	// Read Only: true
	SequenceID int32 `json:"sequenceId,omitempty"`

	// History item timestamp
	// Read Only: true
	Timestamp int64 `json:"timestamp,omitempty"`

	// Type of the history item
	// Required: true
	// Enum: [CREATED DESTROYED RECYCLED SHIPMENT_PREPARED STORED RETRIEVED_FROM_STORAGE PACKAGED DISPATCHED RECEIVED REPROCESSING_STARTED REPROCESSING_STEP_STARTED REPROCESSING_STEP_CANCELLED REPROCESSING_STEP_FINISHED REPROCESSING_CANCELLED REPROCESSING_FINISHED DISASSEMBLED MAINTENANCE_STARTED MAINTENANCE_STEP_STARTED MAINTENANCE_STEP_CANCELLED MAINTENANCE_STEP_FINISHED MAINTENANCE_CANCELLED MAINTENANCE_FINISHED PRODUCTION_STARTED PRODUCTION_CANCELLED PRODUCTION_FINISHED PRODUCTION_STEP_STARTED PRODUCTION_STEP_CANCELLED PRODUCTION_STEP_FINISHED QUALITY_CHECK_PERFORMED]
	Type *string `json:"type"`

	// History item visibility restrictions
	Visibility *Visibility `json:"visibility,omitempty"`
}

// Validate validates this history item
func (m *HistoryItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HistoryItem) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

var historyItemTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATED","DESTROYED","RECYCLED","SHIPMENT_PREPARED","STORED","RETRIEVED_FROM_STORAGE","PACKAGED","DISPATCHED","RECEIVED","REPROCESSING_STARTED","REPROCESSING_STEP_STARTED","REPROCESSING_STEP_CANCELLED","REPROCESSING_STEP_FINISHED","REPROCESSING_CANCELLED","REPROCESSING_FINISHED","DISASSEMBLED","MAINTENANCE_STARTED","MAINTENANCE_STEP_STARTED","MAINTENANCE_STEP_CANCELLED","MAINTENANCE_STEP_FINISHED","MAINTENANCE_CANCELLED","MAINTENANCE_FINISHED","PRODUCTION_STARTED","PRODUCTION_CANCELLED","PRODUCTION_FINISHED","PRODUCTION_STEP_STARTED","PRODUCTION_STEP_CANCELLED","PRODUCTION_STEP_FINISHED","QUALITY_CHECK_PERFORMED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyItemTypeTypePropEnum = append(historyItemTypeTypePropEnum, v)
	}
}

const (

	// HistoryItemTypeCREATED captures enum value "CREATED"
	HistoryItemTypeCREATED string = "CREATED"

	// HistoryItemTypeDESTROYED captures enum value "DESTROYED"
	HistoryItemTypeDESTROYED string = "DESTROYED"

	// HistoryItemTypeRECYCLED captures enum value "RECYCLED"
	HistoryItemTypeRECYCLED string = "RECYCLED"

	// HistoryItemTypeSHIPMENTPREPARED captures enum value "SHIPMENT_PREPARED"
	HistoryItemTypeSHIPMENTPREPARED string = "SHIPMENT_PREPARED"

	// HistoryItemTypeSTORED captures enum value "STORED"
	HistoryItemTypeSTORED string = "STORED"

	// HistoryItemTypeRETRIEVEDFROMSTORAGE captures enum value "RETRIEVED_FROM_STORAGE"
	HistoryItemTypeRETRIEVEDFROMSTORAGE string = "RETRIEVED_FROM_STORAGE"

	// HistoryItemTypePACKAGED captures enum value "PACKAGED"
	HistoryItemTypePACKAGED string = "PACKAGED"

	// HistoryItemTypeDISPATCHED captures enum value "DISPATCHED"
	HistoryItemTypeDISPATCHED string = "DISPATCHED"

	// HistoryItemTypeRECEIVED captures enum value "RECEIVED"
	HistoryItemTypeRECEIVED string = "RECEIVED"

	// HistoryItemTypeREPROCESSINGSTARTED captures enum value "REPROCESSING_STARTED"
	HistoryItemTypeREPROCESSINGSTARTED string = "REPROCESSING_STARTED"

	// HistoryItemTypeREPROCESSINGSTEPSTARTED captures enum value "REPROCESSING_STEP_STARTED"
	HistoryItemTypeREPROCESSINGSTEPSTARTED string = "REPROCESSING_STEP_STARTED"

	// HistoryItemTypeREPROCESSINGSTEPCANCELLED captures enum value "REPROCESSING_STEP_CANCELLED"
	HistoryItemTypeREPROCESSINGSTEPCANCELLED string = "REPROCESSING_STEP_CANCELLED"

	// HistoryItemTypeREPROCESSINGSTEPFINISHED captures enum value "REPROCESSING_STEP_FINISHED"
	HistoryItemTypeREPROCESSINGSTEPFINISHED string = "REPROCESSING_STEP_FINISHED"

	// HistoryItemTypeREPROCESSINGCANCELLED captures enum value "REPROCESSING_CANCELLED"
	HistoryItemTypeREPROCESSINGCANCELLED string = "REPROCESSING_CANCELLED"

	// HistoryItemTypeREPROCESSINGFINISHED captures enum value "REPROCESSING_FINISHED"
	HistoryItemTypeREPROCESSINGFINISHED string = "REPROCESSING_FINISHED"

	// HistoryItemTypeDISASSEMBLED captures enum value "DISASSEMBLED"
	HistoryItemTypeDISASSEMBLED string = "DISASSEMBLED"

	// HistoryItemTypeMAINTENANCESTARTED captures enum value "MAINTENANCE_STARTED"
	HistoryItemTypeMAINTENANCESTARTED string = "MAINTENANCE_STARTED"

	// HistoryItemTypeMAINTENANCESTEPSTARTED captures enum value "MAINTENANCE_STEP_STARTED"
	HistoryItemTypeMAINTENANCESTEPSTARTED string = "MAINTENANCE_STEP_STARTED"

	// HistoryItemTypeMAINTENANCESTEPCANCELLED captures enum value "MAINTENANCE_STEP_CANCELLED"
	HistoryItemTypeMAINTENANCESTEPCANCELLED string = "MAINTENANCE_STEP_CANCELLED"

	// HistoryItemTypeMAINTENANCESTEPFINISHED captures enum value "MAINTENANCE_STEP_FINISHED"
	HistoryItemTypeMAINTENANCESTEPFINISHED string = "MAINTENANCE_STEP_FINISHED"

	// HistoryItemTypeMAINTENANCECANCELLED captures enum value "MAINTENANCE_CANCELLED"
	HistoryItemTypeMAINTENANCECANCELLED string = "MAINTENANCE_CANCELLED"

	// HistoryItemTypeMAINTENANCEFINISHED captures enum value "MAINTENANCE_FINISHED"
	HistoryItemTypeMAINTENANCEFINISHED string = "MAINTENANCE_FINISHED"

	// HistoryItemTypePRODUCTIONSTARTED captures enum value "PRODUCTION_STARTED"
	HistoryItemTypePRODUCTIONSTARTED string = "PRODUCTION_STARTED"

	// HistoryItemTypePRODUCTIONCANCELLED captures enum value "PRODUCTION_CANCELLED"
	HistoryItemTypePRODUCTIONCANCELLED string = "PRODUCTION_CANCELLED"

	// HistoryItemTypePRODUCTIONFINISHED captures enum value "PRODUCTION_FINISHED"
	HistoryItemTypePRODUCTIONFINISHED string = "PRODUCTION_FINISHED"

	// HistoryItemTypePRODUCTIONSTEPSTARTED captures enum value "PRODUCTION_STEP_STARTED"
	HistoryItemTypePRODUCTIONSTEPSTARTED string = "PRODUCTION_STEP_STARTED"

	// HistoryItemTypePRODUCTIONSTEPCANCELLED captures enum value "PRODUCTION_STEP_CANCELLED"
	HistoryItemTypePRODUCTIONSTEPCANCELLED string = "PRODUCTION_STEP_CANCELLED"

	// HistoryItemTypePRODUCTIONSTEPFINISHED captures enum value "PRODUCTION_STEP_FINISHED"
	HistoryItemTypePRODUCTIONSTEPFINISHED string = "PRODUCTION_STEP_FINISHED"

	// HistoryItemTypeQUALITYCHECKPERFORMED captures enum value "QUALITY_CHECK_PERFORMED"
	HistoryItemTypeQUALITYCHECKPERFORMED string = "QUALITY_CHECK_PERFORMED"
)

// prop value enum
func (m *HistoryItem) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, historyItemTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HistoryItem) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *HistoryItem) validateVisibility(formats strfmt.Registry) error {

	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	if m.Visibility != nil {
		if err := m.Visibility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("visibility")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HistoryItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoryItem) UnmarshalBinary(b []byte) error {
	var res HistoryItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
