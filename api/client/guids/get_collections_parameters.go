// Code generated by go-swagger; DO NOT EDIT.

package guids

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGETCollectionsParams creates a new GETCollectionsParams object
// with the default values initialized.
func NewGETCollectionsParams() *GETCollectionsParams {
	var ()
	return &GETCollectionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGETCollectionsParamsWithTimeout creates a new GETCollectionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGETCollectionsParamsWithTimeout(timeout time.Duration) *GETCollectionsParams {
	var ()
	return &GETCollectionsParams{

		timeout: timeout,
	}
}

// NewGETCollectionsParamsWithContext creates a new GETCollectionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGETCollectionsParamsWithContext(ctx context.Context) *GETCollectionsParams {
	var ()
	return &GETCollectionsParams{

		Context: ctx,
	}
}

// NewGETCollectionsParamsWithHTTPClient creates a new GETCollectionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGETCollectionsParamsWithHTTPClient(client *http.Client) *GETCollectionsParams {
	var ()
	return &GETCollectionsParams{
		HTTPClient: client,
	}
}

/*GETCollectionsParams contains all the parameters to send to the API endpoint
for the get collections operation typically these are written to a http.Request
*/
type GETCollectionsParams struct {

	/*ID4N
	  The ID which the collections should contain

	*/
	ID4N string
	/*Limit
	  The maximum count of returned elements

	*/
	Limit *int32
	/*Offset
	  Start with the n-th element

	*/
	Offset *int32
	/*OrganizationID
	  The organization holding the collections.

	*/
	OrganizationID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get collections params
func (o *GETCollectionsParams) WithTimeout(timeout time.Duration) *GETCollectionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get collections params
func (o *GETCollectionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get collections params
func (o *GETCollectionsParams) WithContext(ctx context.Context) *GETCollectionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get collections params
func (o *GETCollectionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get collections params
func (o *GETCollectionsParams) WithHTTPClient(client *http.Client) *GETCollectionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get collections params
func (o *GETCollectionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID4N adds the id4n to the get collections params
func (o *GETCollectionsParams) WithID4N(id4n string) *GETCollectionsParams {
	o.SetID4N(id4n)
	return o
}

// SetID4N adds the id4n to the get collections params
func (o *GETCollectionsParams) SetID4N(id4n string) {
	o.ID4N = id4n
}

// WithLimit adds the limit to the get collections params
func (o *GETCollectionsParams) WithLimit(limit *int32) *GETCollectionsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get collections params
func (o *GETCollectionsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the get collections params
func (o *GETCollectionsParams) WithOffset(offset *int32) *GETCollectionsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get collections params
func (o *GETCollectionsParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOrganizationID adds the organizationID to the get collections params
func (o *GETCollectionsParams) WithOrganizationID(organizationID *string) *GETCollectionsParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get collections params
func (o *GETCollectionsParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WriteToRequest writes these params to a swagger request
func (o *GETCollectionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id4n
	if err := r.SetPathParam("id4n", o.ID4N); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID string
		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {
			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
