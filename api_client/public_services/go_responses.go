// Code generated by go-swagger; DO NOT EDIT.

package public_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api_models"
)

// GoReader is a Reader for the Go structure.
type GoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewGoAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGoUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGoForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGoMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewGoNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewGoUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGoOK creates a GoOK with default headers values
func NewGoOK() *GoOK {
	return &GoOK{}
}

/*GoOK handles this case with default header values.

OK
*/
type GoOK struct {
}

func (o *GoOK) Error() string {
	return fmt.Sprintf("[GET /go/{guid}][%d] goOK ", 200)
}

func (o *GoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGoAccepted creates a GoAccepted with default headers values
func NewGoAccepted() *GoAccepted {
	return &GoAccepted{}
}

/*GoAccepted handles this case with default header values.

Accepted
*/
type GoAccepted struct {
}

func (o *GoAccepted) Error() string {
	return fmt.Sprintf("[GET /go/{guid}][%d] goAccepted ", 202)
}

func (o *GoAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGoUnauthorized creates a GoUnauthorized with default headers values
func NewGoUnauthorized() *GoUnauthorized {
	return &GoUnauthorized{}
}

/*GoUnauthorized handles this case with default header values.

Unauthorized
*/
type GoUnauthorized struct {
	Payload *api_models.APIError
}

func (o *GoUnauthorized) Error() string {
	return fmt.Sprintf("[GET /go/{guid}][%d] goUnauthorized  %+v", 401, o.Payload)
}

func (o *GoUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGoForbidden creates a GoForbidden with default headers values
func NewGoForbidden() *GoForbidden {
	return &GoForbidden{}
}

/*GoForbidden handles this case with default header values.

Forbidden
*/
type GoForbidden struct {
	Payload *api_models.APIError
}

func (o *GoForbidden) Error() string {
	return fmt.Sprintf("[GET /go/{guid}][%d] goForbidden  %+v", 403, o.Payload)
}

func (o *GoForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGoNotFound creates a GoNotFound with default headers values
func NewGoNotFound() *GoNotFound {
	return &GoNotFound{}
}

/*GoNotFound handles this case with default header values.

Not Found
*/
type GoNotFound struct {
	Payload *api_models.APIError
}

func (o *GoNotFound) Error() string {
	return fmt.Sprintf("[GET /go/{guid}][%d] goNotFound  %+v", 404, o.Payload)
}

func (o *GoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGoMethodNotAllowed creates a GoMethodNotAllowed with default headers values
func NewGoMethodNotAllowed() *GoMethodNotAllowed {
	return &GoMethodNotAllowed{}
}

/*GoMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type GoMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *GoMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /go/{guid}][%d] goMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GoMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGoNotAcceptable creates a GoNotAcceptable with default headers values
func NewGoNotAcceptable() *GoNotAcceptable {
	return &GoNotAcceptable{}
}

/*GoNotAcceptable handles this case with default header values.

Not Acceptable
*/
type GoNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *GoNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /go/{guid}][%d] goNotAcceptable  %+v", 406, o.Payload)
}

func (o *GoNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGoUnsupportedMediaType creates a GoUnsupportedMediaType with default headers values
func NewGoUnsupportedMediaType() *GoUnsupportedMediaType {
	return &GoUnsupportedMediaType{}
}

/*GoUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type GoUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *GoUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /go/{guid}][%d] goUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GoUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGoInternalServerError creates a GoInternalServerError with default headers values
func NewGoInternalServerError() *GoInternalServerError {
	return &GoInternalServerError{}
}

/*GoInternalServerError handles this case with default header values.

Internal Server Error
*/
type GoInternalServerError struct {
	Payload *api_models.APIError
}

func (o *GoInternalServerError) Error() string {
	return fmt.Sprintf("[GET /go/{guid}][%d] goInternalServerError  %+v", 500, o.Payload)
}

func (o *GoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
