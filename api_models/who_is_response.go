// Code generated by go-swagger; DO NOT EDIT.

package api_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WhoIsResponse WhoIsResponse
// swagger:model WhoIsResponse
type WhoIsResponse struct {

	// aliases
	Aliases map[string]string `json:"aliases,omitempty"`

	// organization
	Organization *Organization `json:"organization,omitempty"`

	// organization address
	OrganizationAddress *OrganizationAddress `json:"organizationAddress,omitempty"`
}

// Validate validates this who is response
func (m *WhoIsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WhoIsResponse) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

func (m *WhoIsResponse) validateOrganizationAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganizationAddress) { // not required
		return nil
	}

	if m.OrganizationAddress != nil {
		if err := m.OrganizationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizationAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WhoIsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WhoIsResponse) UnmarshalBinary(b []byte) error {
	var res WhoIsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
