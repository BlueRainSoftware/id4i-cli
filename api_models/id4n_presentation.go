// Code generated by go-swagger; DO NOT EDIT.

package api_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ID4NPresentation Id4nPresentation
// swagger:model Id4nPresentation
type ID4NPresentation struct {

	// The UTC unix timestamp of when this ID has been created
	// Required: true
	// Read Only: true
	CreatedTimestamp int64 `json:"createdTimestamp"`

	// Organization namespace of the holder of the ID
	// Read Only: true
	HolderOrganizationID string `json:"holderOrganizationId,omitempty"`

	// The ID
	// Required: true
	// Read Only: true
	ID4N string `json:"id4n"`

	// label
	// Read Only: true
	Label string `json:"label,omitempty"`

	// Organization namespace of the ID owner
	// Read Only: true
	OwnerOrganizationID string `json:"ownerOrganizationId,omitempty"`

	// The type of ID
	// Required: true
	// Read Only: true
	// Enum: [GUID ROUTING_COLLECTION LOGISTIC_COLLECTION LABELLED_COLLECTION]
	Type string `json:"type"`
}

// Validate validates this Id4n presentation
func (m *ID4NPresentation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID4N(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ID4NPresentation) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("createdTimestamp", "body", int64(m.CreatedTimestamp)); err != nil {
		return err
	}

	return nil
}

func (m *ID4NPresentation) validateID4N(formats strfmt.Registry) error {

	if err := validate.RequiredString("id4n", "body", string(m.ID4N)); err != nil {
		return err
	}

	return nil
}

var id4nPresentationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GUID","ROUTING_COLLECTION","LOGISTIC_COLLECTION","LABELLED_COLLECTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		id4nPresentationTypeTypePropEnum = append(id4nPresentationTypeTypePropEnum, v)
	}
}

const (

	// ID4NPresentationTypeGUID captures enum value "GUID"
	ID4NPresentationTypeGUID string = "GUID"

	// ID4NPresentationTypeROUTINGCOLLECTION captures enum value "ROUTING_COLLECTION"
	ID4NPresentationTypeROUTINGCOLLECTION string = "ROUTING_COLLECTION"

	// ID4NPresentationTypeLOGISTICCOLLECTION captures enum value "LOGISTIC_COLLECTION"
	ID4NPresentationTypeLOGISTICCOLLECTION string = "LOGISTIC_COLLECTION"

	// ID4NPresentationTypeLABELLEDCOLLECTION captures enum value "LABELLED_COLLECTION"
	ID4NPresentationTypeLABELLEDCOLLECTION string = "LABELLED_COLLECTION"
)

// prop value enum
func (m *ID4NPresentation) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, id4nPresentationTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ID4NPresentation) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ID4NPresentation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ID4NPresentation) UnmarshalBinary(b []byte) error {
	var res ID4NPresentation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
