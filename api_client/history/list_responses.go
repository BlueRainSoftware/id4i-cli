// Code generated by go-swagger; DO NOT EDIT.

package history

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api_models"
)

// ListReader is a Reader for the List structure.
type ListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewListAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewListMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewListNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewListUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListOK creates a ListOK with default headers values
func NewListOK() *ListOK {
	return &ListOK{}
}

/*ListOK handles this case with default header values.

OK
*/
type ListOK struct {
	Payload *api_models.PaginatedHistoryItemResponse
}

func (o *ListOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/history/{id4n}/{organizationId}][%d] listOK  %+v", 200, o.Payload)
}

func (o *ListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.PaginatedHistoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAccepted creates a ListAccepted with default headers values
func NewListAccepted() *ListAccepted {
	return &ListAccepted{}
}

/*ListAccepted handles this case with default header values.

Accepted
*/
type ListAccepted struct {
}

func (o *ListAccepted) Error() string {
	return fmt.Sprintf("[GET /api/v1/history/{id4n}/{organizationId}][%d] listAccepted ", 202)
}

func (o *ListAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUnauthorized creates a ListUnauthorized with default headers values
func NewListUnauthorized() *ListUnauthorized {
	return &ListUnauthorized{}
}

/*ListUnauthorized handles this case with default header values.

Unauthorized
*/
type ListUnauthorized struct {
	Payload *api_models.APIError
}

func (o *ListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/history/{id4n}/{organizationId}][%d] listUnauthorized  %+v", 401, o.Payload)
}

func (o *ListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListForbidden creates a ListForbidden with default headers values
func NewListForbidden() *ListForbidden {
	return &ListForbidden{}
}

/*ListForbidden handles this case with default header values.

Forbidden
*/
type ListForbidden struct {
	Payload *api_models.APIError
}

func (o *ListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/history/{id4n}/{organizationId}][%d] listForbidden  %+v", 403, o.Payload)
}

func (o *ListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNotFound creates a ListNotFound with default headers values
func NewListNotFound() *ListNotFound {
	return &ListNotFound{}
}

/*ListNotFound handles this case with default header values.

Not Found
*/
type ListNotFound struct {
	Payload *api_models.APIError
}

func (o *ListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/history/{id4n}/{organizationId}][%d] listNotFound  %+v", 404, o.Payload)
}

func (o *ListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListMethodNotAllowed creates a ListMethodNotAllowed with default headers values
func NewListMethodNotAllowed() *ListMethodNotAllowed {
	return &ListMethodNotAllowed{}
}

/*ListMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type ListMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *ListMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/v1/history/{id4n}/{organizationId}][%d] listMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ListMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNotAcceptable creates a ListNotAcceptable with default headers values
func NewListNotAcceptable() *ListNotAcceptable {
	return &ListNotAcceptable{}
}

/*ListNotAcceptable handles this case with default header values.

Not Acceptable
*/
type ListNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *ListNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/v1/history/{id4n}/{organizationId}][%d] listNotAcceptable  %+v", 406, o.Payload)
}

func (o *ListNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUnsupportedMediaType creates a ListUnsupportedMediaType with default headers values
func NewListUnsupportedMediaType() *ListUnsupportedMediaType {
	return &ListUnsupportedMediaType{}
}

/*ListUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type ListUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *ListUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v1/history/{id4n}/{organizationId}][%d] listUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInternalServerError creates a ListInternalServerError with default headers values
func NewListInternalServerError() *ListInternalServerError {
	return &ListInternalServerError{}
}

/*ListInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListInternalServerError struct {
	Payload *api_models.APIError
}

func (o *ListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/history/{id4n}/{organizationId}][%d] listInternalServerError  %+v", 500, o.Payload)
}

func (o *ListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
