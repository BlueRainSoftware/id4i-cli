// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api/models"
)

// ReadFromMicrostorageReader is a Reader for the ReadFromMicrostorage structure.
type ReadFromMicrostorageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadFromMicrostorageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReadFromMicrostorageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewReadFromMicrostorageAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewReadFromMicrostorageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReadFromMicrostorageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReadFromMicrostorageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewReadFromMicrostorageMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewReadFromMicrostorageNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewReadFromMicrostorageUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReadFromMicrostorageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadFromMicrostorageOK creates a ReadFromMicrostorageOK with default headers values
func NewReadFromMicrostorageOK() *ReadFromMicrostorageOK {
	return &ReadFromMicrostorageOK{}
}

/*ReadFromMicrostorageOK handles this case with default header values.

OK
*/
type ReadFromMicrostorageOK struct {
	Payload strfmt.Base64
}

func (o *ReadFromMicrostorageOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/microstorage/{id4n}/{organization}][%d] readFromMicrostorageOK  %+v", 200, o.Payload)
}

func (o *ReadFromMicrostorageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadFromMicrostorageAccepted creates a ReadFromMicrostorageAccepted with default headers values
func NewReadFromMicrostorageAccepted() *ReadFromMicrostorageAccepted {
	return &ReadFromMicrostorageAccepted{}
}

/*ReadFromMicrostorageAccepted handles this case with default header values.

Accepted
*/
type ReadFromMicrostorageAccepted struct {
}

func (o *ReadFromMicrostorageAccepted) Error() string {
	return fmt.Sprintf("[GET /api/v1/microstorage/{id4n}/{organization}][%d] readFromMicrostorageAccepted ", 202)
}

func (o *ReadFromMicrostorageAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadFromMicrostorageUnauthorized creates a ReadFromMicrostorageUnauthorized with default headers values
func NewReadFromMicrostorageUnauthorized() *ReadFromMicrostorageUnauthorized {
	return &ReadFromMicrostorageUnauthorized{}
}

/*ReadFromMicrostorageUnauthorized handles this case with default header values.

Unauthorized
*/
type ReadFromMicrostorageUnauthorized struct {
	Payload *api_models.APIError
}

func (o *ReadFromMicrostorageUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/microstorage/{id4n}/{organization}][%d] readFromMicrostorageUnauthorized  %+v", 401, o.Payload)
}

func (o *ReadFromMicrostorageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadFromMicrostorageForbidden creates a ReadFromMicrostorageForbidden with default headers values
func NewReadFromMicrostorageForbidden() *ReadFromMicrostorageForbidden {
	return &ReadFromMicrostorageForbidden{}
}

/*ReadFromMicrostorageForbidden handles this case with default header values.

Forbidden
*/
type ReadFromMicrostorageForbidden struct {
	Payload *api_models.APIError
}

func (o *ReadFromMicrostorageForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/microstorage/{id4n}/{organization}][%d] readFromMicrostorageForbidden  %+v", 403, o.Payload)
}

func (o *ReadFromMicrostorageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadFromMicrostorageNotFound creates a ReadFromMicrostorageNotFound with default headers values
func NewReadFromMicrostorageNotFound() *ReadFromMicrostorageNotFound {
	return &ReadFromMicrostorageNotFound{}
}

/*ReadFromMicrostorageNotFound handles this case with default header values.

Not Found
*/
type ReadFromMicrostorageNotFound struct {
	Payload *api_models.APIError
}

func (o *ReadFromMicrostorageNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/microstorage/{id4n}/{organization}][%d] readFromMicrostorageNotFound  %+v", 404, o.Payload)
}

func (o *ReadFromMicrostorageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadFromMicrostorageMethodNotAllowed creates a ReadFromMicrostorageMethodNotAllowed with default headers values
func NewReadFromMicrostorageMethodNotAllowed() *ReadFromMicrostorageMethodNotAllowed {
	return &ReadFromMicrostorageMethodNotAllowed{}
}

/*ReadFromMicrostorageMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type ReadFromMicrostorageMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *ReadFromMicrostorageMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/v1/microstorage/{id4n}/{organization}][%d] readFromMicrostorageMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ReadFromMicrostorageMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadFromMicrostorageNotAcceptable creates a ReadFromMicrostorageNotAcceptable with default headers values
func NewReadFromMicrostorageNotAcceptable() *ReadFromMicrostorageNotAcceptable {
	return &ReadFromMicrostorageNotAcceptable{}
}

/*ReadFromMicrostorageNotAcceptable handles this case with default header values.

Not Acceptable
*/
type ReadFromMicrostorageNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *ReadFromMicrostorageNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/v1/microstorage/{id4n}/{organization}][%d] readFromMicrostorageNotAcceptable  %+v", 406, o.Payload)
}

func (o *ReadFromMicrostorageNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadFromMicrostorageUnsupportedMediaType creates a ReadFromMicrostorageUnsupportedMediaType with default headers values
func NewReadFromMicrostorageUnsupportedMediaType() *ReadFromMicrostorageUnsupportedMediaType {
	return &ReadFromMicrostorageUnsupportedMediaType{}
}

/*ReadFromMicrostorageUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type ReadFromMicrostorageUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *ReadFromMicrostorageUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v1/microstorage/{id4n}/{organization}][%d] readFromMicrostorageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ReadFromMicrostorageUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadFromMicrostorageInternalServerError creates a ReadFromMicrostorageInternalServerError with default headers values
func NewReadFromMicrostorageInternalServerError() *ReadFromMicrostorageInternalServerError {
	return &ReadFromMicrostorageInternalServerError{}
}

/*ReadFromMicrostorageInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReadFromMicrostorageInternalServerError struct {
	Payload *api_models.APIError
}

func (o *ReadFromMicrostorageInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/microstorage/{id4n}/{organization}][%d] readFromMicrostorageInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadFromMicrostorageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
