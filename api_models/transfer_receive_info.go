// Code generated by go-swagger; DO NOT EDIT.

package api_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransferReceiveInfo TransferReceiveInfo
// swagger:model TransferReceiveInfo
type TransferReceiveInfo struct {

	// The current holder of the object
	// Required: true
	HolderOrganizationID *string `json:"holderOrganizationId"`

	// Keep the public ownership while transferring the object
	// Read Only: true
	KeepOwnership *bool `json:"keepOwnership,omitempty"`

	// Anyone who knows (or can scan) the ID4N can claim ownership of this object
	// Read Only: true
	OpenForClaims *bool `json:"openForClaims,omitempty"`

	// The current publicly visible owner of the object
	// Read Only: true
	OwnerOrganizationID string `json:"ownerOrganizationId,omitempty"`

	// Allow only these organizations to obtain this object
	// Read Only: true
	RecipientOrganizationIds []string `json:"recipientOrganizationIds"`
}

// Validate validates this transfer receive info
func (m *TransferReceiveInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHolderOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferReceiveInfo) validateHolderOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("holderOrganizationId", "body", m.HolderOrganizationID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransferReceiveInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransferReceiveInfo) UnmarshalBinary(b []byte) error {
	var res TransferReceiveInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
