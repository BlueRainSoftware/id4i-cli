// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api_models"
)

// ReadDocumentReader is a Reader for the ReadDocument structure.
type ReadDocumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadDocumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReadDocumentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewReadDocumentAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewReadDocumentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReadDocumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReadDocumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewReadDocumentMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewReadDocumentNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewReadDocumentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReadDocumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadDocumentOK creates a ReadDocumentOK with default headers values
func NewReadDocumentOK() *ReadDocumentOK {
	return &ReadDocumentOK{}
}

/*ReadDocumentOK handles this case with default header values.

OK
*/
type ReadDocumentOK struct {
	Payload strfmt.Base64
}

func (o *ReadDocumentOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/documents/{id4n}/{organizationId}/{fileName}][%d] readDocumentOK  %+v", 200, o.Payload)
}

func (o *ReadDocumentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDocumentAccepted creates a ReadDocumentAccepted with default headers values
func NewReadDocumentAccepted() *ReadDocumentAccepted {
	return &ReadDocumentAccepted{}
}

/*ReadDocumentAccepted handles this case with default header values.

Accepted
*/
type ReadDocumentAccepted struct {
}

func (o *ReadDocumentAccepted) Error() string {
	return fmt.Sprintf("[GET /api/v1/documents/{id4n}/{organizationId}/{fileName}][%d] readDocumentAccepted ", 202)
}

func (o *ReadDocumentAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadDocumentUnauthorized creates a ReadDocumentUnauthorized with default headers values
func NewReadDocumentUnauthorized() *ReadDocumentUnauthorized {
	return &ReadDocumentUnauthorized{}
}

/*ReadDocumentUnauthorized handles this case with default header values.

Unauthorized
*/
type ReadDocumentUnauthorized struct {
	Payload *api_models.APIError
}

func (o *ReadDocumentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/documents/{id4n}/{organizationId}/{fileName}][%d] readDocumentUnauthorized  %+v", 401, o.Payload)
}

func (o *ReadDocumentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDocumentForbidden creates a ReadDocumentForbidden with default headers values
func NewReadDocumentForbidden() *ReadDocumentForbidden {
	return &ReadDocumentForbidden{}
}

/*ReadDocumentForbidden handles this case with default header values.

Forbidden
*/
type ReadDocumentForbidden struct {
	Payload *api_models.APIError
}

func (o *ReadDocumentForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/documents/{id4n}/{organizationId}/{fileName}][%d] readDocumentForbidden  %+v", 403, o.Payload)
}

func (o *ReadDocumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDocumentNotFound creates a ReadDocumentNotFound with default headers values
func NewReadDocumentNotFound() *ReadDocumentNotFound {
	return &ReadDocumentNotFound{}
}

/*ReadDocumentNotFound handles this case with default header values.

Not Found
*/
type ReadDocumentNotFound struct {
	Payload *api_models.APIError
}

func (o *ReadDocumentNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/documents/{id4n}/{organizationId}/{fileName}][%d] readDocumentNotFound  %+v", 404, o.Payload)
}

func (o *ReadDocumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDocumentMethodNotAllowed creates a ReadDocumentMethodNotAllowed with default headers values
func NewReadDocumentMethodNotAllowed() *ReadDocumentMethodNotAllowed {
	return &ReadDocumentMethodNotAllowed{}
}

/*ReadDocumentMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type ReadDocumentMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *ReadDocumentMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/v1/documents/{id4n}/{organizationId}/{fileName}][%d] readDocumentMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ReadDocumentMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDocumentNotAcceptable creates a ReadDocumentNotAcceptable with default headers values
func NewReadDocumentNotAcceptable() *ReadDocumentNotAcceptable {
	return &ReadDocumentNotAcceptable{}
}

/*ReadDocumentNotAcceptable handles this case with default header values.

Not Acceptable
*/
type ReadDocumentNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *ReadDocumentNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/v1/documents/{id4n}/{organizationId}/{fileName}][%d] readDocumentNotAcceptable  %+v", 406, o.Payload)
}

func (o *ReadDocumentNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDocumentUnsupportedMediaType creates a ReadDocumentUnsupportedMediaType with default headers values
func NewReadDocumentUnsupportedMediaType() *ReadDocumentUnsupportedMediaType {
	return &ReadDocumentUnsupportedMediaType{}
}

/*ReadDocumentUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type ReadDocumentUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *ReadDocumentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v1/documents/{id4n}/{organizationId}/{fileName}][%d] readDocumentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ReadDocumentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDocumentInternalServerError creates a ReadDocumentInternalServerError with default headers values
func NewReadDocumentInternalServerError() *ReadDocumentInternalServerError {
	return &ReadDocumentInternalServerError{}
}

/*ReadDocumentInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReadDocumentInternalServerError struct {
	Payload *api_models.APIError
}

func (o *ReadDocumentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/documents/{id4n}/{organizationId}/{fileName}][%d] readDocumentInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadDocumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
