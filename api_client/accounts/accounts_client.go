// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new accounts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for accounts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CompleteRegistration completes registration

Completing a registration e.g. for invited users. Finish registration with a username and a password.
*/
func (a *Client) CompleteRegistration(params *CompleteRegistrationParams) (*CompleteRegistrationOK, *CompleteRegistrationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompleteRegistrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "completeRegistration",
		Method:             "PUT",
		PathPattern:        "/account/registration",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompleteRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CompleteRegistrationOK:
		return value, nil, nil
	case *CompleteRegistrationAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
FindUserByUsername finds by username
*/
func (a *Client) FindUserByUsername(params *FindUserByUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*FindUserByUsernameOK, *FindUserByUsernameAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindUserByUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findUserByUsername",
		Method:             "GET",
		PathPattern:        "/api/v1/users/{username}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindUserByUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *FindUserByUsernameOK:
		return value, nil, nil
	case *FindUserByUsernameAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
FindUsers finds users
*/
func (a *Client) FindUsers(params *FindUsersParams, authInfo runtime.ClientAuthInfoWriter) (*FindUsersOK, *FindUsersAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findUsers",
		Method:             "GET",
		PathPattern:        "/api/v1/users",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *FindUsersOK:
		return value, nil, nil
	case *FindUsersAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ListAllRoles lists roles

Listing of roles.
*/
func (a *Client) ListAllRoles(params *ListAllRolesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllRolesOK, *ListAllRolesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllRoles",
		Method:             "GET",
		PathPattern:        "/api/v1/roles",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListAllRolesOK:
		return value, nil, nil
	case *ListAllRolesAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
Login ID4i API Login
*/
func (a *Client) Login(params *LoginParams) (*LoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "login",
		Method:             "POST",
		PathPattern:        "/login",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoginOK), nil

}

/*
RegisterUser registers user

Registering a new user.
*/
func (a *Client) RegisterUser(params *RegisterUserParams) (*RegisterUserOK, *RegisterUserCreated, *RegisterUserAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "registerUser",
		Method:             "POST",
		PathPattern:        "/account/registration",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *RegisterUserOK:
		return value, nil, nil, nil
	case *RegisterUserCreated:
		return nil, value, nil, nil
	case *RegisterUserAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
RequestPasswordReset requests password reset

Requesting a reset for a new password.
*/
func (a *Client) RequestPasswordReset(params *RequestPasswordResetParams) (*RequestPasswordResetOK, *RequestPasswordResetCreated, *RequestPasswordResetAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestPasswordResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "requestPasswordReset",
		Method:             "POST",
		PathPattern:        "/account/password",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RequestPasswordResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *RequestPasswordResetOK:
		return value, nil, nil, nil
	case *RequestPasswordResetCreated:
		return nil, value, nil, nil
	case *RequestPasswordResetAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
VerifyPasswordReset verifies password reset

Setting a new password and verifying the request to set the password.
*/
func (a *Client) VerifyPasswordReset(params *VerifyPasswordResetParams) (*VerifyPasswordResetOK, *VerifyPasswordResetAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyPasswordResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verifyPasswordReset",
		Method:             "PUT",
		PathPattern:        "/account/password",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VerifyPasswordResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VerifyPasswordResetOK:
		return value, nil, nil
	case *VerifyPasswordResetAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
VerifyUserRegistration verifies registration

Verifies a new user registration.
*/
func (a *Client) VerifyUserRegistration(params *VerifyUserRegistrationParams) (*VerifyUserRegistrationOK, *VerifyUserRegistrationCreated, *VerifyUserRegistrationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyUserRegistrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verifyUserRegistration",
		Method:             "POST",
		PathPattern:        "/account/verification",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VerifyUserRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *VerifyUserRegistrationOK:
		return value, nil, nil, nil
	case *VerifyUserRegistrationCreated:
		return nil, value, nil, nil
	case *VerifyUserRegistrationAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
