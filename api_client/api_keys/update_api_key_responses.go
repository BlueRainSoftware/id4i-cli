// Code generated by go-swagger; DO NOT EDIT.

package api_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api_models"
)

// UpdateAPIKeyReader is a Reader for the UpdateAPIKey structure.
type UpdateAPIKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAPIKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateAPIKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewUpdateAPIKeyAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateAPIKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateAPIKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateAPIKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateAPIKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewUpdateAPIKeyMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewUpdateAPIKeyNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateAPIKeyConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewUpdateAPIKeyUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateAPIKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateAPIKeyOK creates a UpdateAPIKeyOK with default headers values
func NewUpdateAPIKeyOK() *UpdateAPIKeyOK {
	return &UpdateAPIKeyOK{}
}

/*UpdateAPIKeyOK handles this case with default header values.

OK
*/
type UpdateAPIKeyOK struct {
}

func (o *UpdateAPIKeyOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/apikeys/{key}][%d] updateApiKeyOK ", 200)
}

func (o *UpdateAPIKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAPIKeyAccepted creates a UpdateAPIKeyAccepted with default headers values
func NewUpdateAPIKeyAccepted() *UpdateAPIKeyAccepted {
	return &UpdateAPIKeyAccepted{}
}

/*UpdateAPIKeyAccepted handles this case with default header values.

Accepted
*/
type UpdateAPIKeyAccepted struct {
}

func (o *UpdateAPIKeyAccepted) Error() string {
	return fmt.Sprintf("[PUT /api/v1/apikeys/{key}][%d] updateApiKeyAccepted ", 202)
}

func (o *UpdateAPIKeyAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAPIKeyBadRequest creates a UpdateAPIKeyBadRequest with default headers values
func NewUpdateAPIKeyBadRequest() *UpdateAPIKeyBadRequest {
	return &UpdateAPIKeyBadRequest{}
}

/*UpdateAPIKeyBadRequest handles this case with default header values.

Bad Request
*/
type UpdateAPIKeyBadRequest struct {
	Payload *api_models.APIError
}

func (o *UpdateAPIKeyBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/apikeys/{key}][%d] updateApiKeyBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAPIKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIKeyUnauthorized creates a UpdateAPIKeyUnauthorized with default headers values
func NewUpdateAPIKeyUnauthorized() *UpdateAPIKeyUnauthorized {
	return &UpdateAPIKeyUnauthorized{}
}

/*UpdateAPIKeyUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateAPIKeyUnauthorized struct {
	Payload *api_models.APIError
}

func (o *UpdateAPIKeyUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v1/apikeys/{key}][%d] updateApiKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateAPIKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIKeyForbidden creates a UpdateAPIKeyForbidden with default headers values
func NewUpdateAPIKeyForbidden() *UpdateAPIKeyForbidden {
	return &UpdateAPIKeyForbidden{}
}

/*UpdateAPIKeyForbidden handles this case with default header values.

Forbidden
*/
type UpdateAPIKeyForbidden struct {
	Payload *api_models.APIError
}

func (o *UpdateAPIKeyForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/apikeys/{key}][%d] updateApiKeyForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAPIKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIKeyNotFound creates a UpdateAPIKeyNotFound with default headers values
func NewUpdateAPIKeyNotFound() *UpdateAPIKeyNotFound {
	return &UpdateAPIKeyNotFound{}
}

/*UpdateAPIKeyNotFound handles this case with default header values.

Not Found
*/
type UpdateAPIKeyNotFound struct {
	Payload *api_models.APIError
}

func (o *UpdateAPIKeyNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/apikeys/{key}][%d] updateApiKeyNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAPIKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIKeyMethodNotAllowed creates a UpdateAPIKeyMethodNotAllowed with default headers values
func NewUpdateAPIKeyMethodNotAllowed() *UpdateAPIKeyMethodNotAllowed {
	return &UpdateAPIKeyMethodNotAllowed{}
}

/*UpdateAPIKeyMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type UpdateAPIKeyMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *UpdateAPIKeyMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /api/v1/apikeys/{key}][%d] updateApiKeyMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateAPIKeyMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIKeyNotAcceptable creates a UpdateAPIKeyNotAcceptable with default headers values
func NewUpdateAPIKeyNotAcceptable() *UpdateAPIKeyNotAcceptable {
	return &UpdateAPIKeyNotAcceptable{}
}

/*UpdateAPIKeyNotAcceptable handles this case with default header values.

Not Acceptable
*/
type UpdateAPIKeyNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *UpdateAPIKeyNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /api/v1/apikeys/{key}][%d] updateApiKeyNotAcceptable  %+v", 406, o.Payload)
}

func (o *UpdateAPIKeyNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIKeyConflict creates a UpdateAPIKeyConflict with default headers values
func NewUpdateAPIKeyConflict() *UpdateAPIKeyConflict {
	return &UpdateAPIKeyConflict{}
}

/*UpdateAPIKeyConflict handles this case with default header values.

Conflict
*/
type UpdateAPIKeyConflict struct {
	Payload *api_models.APIError
}

func (o *UpdateAPIKeyConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v1/apikeys/{key}][%d] updateApiKeyConflict  %+v", 409, o.Payload)
}

func (o *UpdateAPIKeyConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIKeyUnsupportedMediaType creates a UpdateAPIKeyUnsupportedMediaType with default headers values
func NewUpdateAPIKeyUnsupportedMediaType() *UpdateAPIKeyUnsupportedMediaType {
	return &UpdateAPIKeyUnsupportedMediaType{}
}

/*UpdateAPIKeyUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type UpdateAPIKeyUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *UpdateAPIKeyUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v1/apikeys/{key}][%d] updateApiKeyUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateAPIKeyUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIKeyInternalServerError creates a UpdateAPIKeyInternalServerError with default headers values
func NewUpdateAPIKeyInternalServerError() *UpdateAPIKeyInternalServerError {
	return &UpdateAPIKeyInternalServerError{}
}

/*UpdateAPIKeyInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateAPIKeyInternalServerError struct {
	Payload *api_models.APIError
}

func (o *UpdateAPIKeyInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/apikeys/{key}][%d] updateApiKeyInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAPIKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
