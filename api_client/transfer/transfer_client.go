// Code generated by go-swagger; DO NOT EDIT.

package transfer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new transfer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transfer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GETReceiveInfo shows transfer information
*/
func (a *Client) GETReceiveInfo(params *GETReceiveInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GETReceiveInfoOK, *GETReceiveInfoAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETReceiveInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReceiveInfo",
		Method:             "GET",
		PathPattern:        "/api/v1/transfers/{id4n}/receiveInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GETReceiveInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GETReceiveInfoOK:
		return value, nil, nil
	case *GETReceiveInfoAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GETSendInfo shows transfer preparation information
*/
func (a *Client) GETSendInfo(params *GETSendInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GETSendInfoOK, *GETSendInfoAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETSendInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSendInfo",
		Method:             "GET",
		PathPattern:        "/api/v1/transfers/{id4n}/sendInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GETSendInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GETSendInfoOK:
		return value, nil, nil
	case *GETSendInfoAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
Prepare prepares an object for transfer
*/
func (a *Client) Prepare(params *PrepareParams, authInfo runtime.ClientAuthInfoWriter) (*PrepareOK, *PrepareAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrepareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "prepare",
		Method:             "PUT",
		PathPattern:        "/api/v1/transfers/{id4n}/sendInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PrepareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PrepareOK:
		return value, nil, nil
	case *PrepareAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
Receive transfers a GUID or collection obtaining it i e becoming the holder and if allowed also taking ownership

Taking ownership can be forbidden by a previous owner. See methods prepare and getInfo
*/
func (a *Client) Receive(params *ReceiveParams, authInfo runtime.ClientAuthInfoWriter) (*ReceiveOK, *ReceiveAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReceiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "receive",
		Method:             "PUT",
		PathPattern:        "/api/v1/transfers/{id4n}/receiveInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReceiveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReceiveOK:
		return value, nil, nil
	case *ReceiveAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
