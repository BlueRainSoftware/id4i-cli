// Code generated by go-swagger; DO NOT EDIT.

package api_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api/models"
)

// AddAPIKeyPrivilegeForId4nsReader is a Reader for the AddAPIKeyPrivilegeForId4ns structure.
type AddAPIKeyPrivilegeForId4nsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddAPIKeyPrivilegeForId4nsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddAPIKeyPrivilegeForId4nsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewAddAPIKeyPrivilegeForId4nsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewAddAPIKeyPrivilegeForId4nsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddAPIKeyPrivilegeForId4nsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAddAPIKeyPrivilegeForId4nsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddAPIKeyPrivilegeForId4nsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAddAPIKeyPrivilegeForId4nsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewAddAPIKeyPrivilegeForId4nsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewAddAPIKeyPrivilegeForId4nsNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewAddAPIKeyPrivilegeForId4nsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewAddAPIKeyPrivilegeForId4nsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAddAPIKeyPrivilegeForId4nsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddAPIKeyPrivilegeForId4nsOK creates a AddAPIKeyPrivilegeForId4nsOK with default headers values
func NewAddAPIKeyPrivilegeForId4nsOK() *AddAPIKeyPrivilegeForId4nsOK {
	return &AddAPIKeyPrivilegeForId4nsOK{}
}

/*AddAPIKeyPrivilegeForId4nsOK handles this case with default header values.

OK
*/
type AddAPIKeyPrivilegeForId4nsOK struct {
}

func (o *AddAPIKeyPrivilegeForId4nsOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/apikeys/{key}/privileges/{privilege}/id4ns][%d] addApiKeyPrivilegeForId4nsOK ", 200)
}

func (o *AddAPIKeyPrivilegeForId4nsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddAPIKeyPrivilegeForId4nsCreated creates a AddAPIKeyPrivilegeForId4nsCreated with default headers values
func NewAddAPIKeyPrivilegeForId4nsCreated() *AddAPIKeyPrivilegeForId4nsCreated {
	return &AddAPIKeyPrivilegeForId4nsCreated{}
}

/*AddAPIKeyPrivilegeForId4nsCreated handles this case with default header values.

Created
*/
type AddAPIKeyPrivilegeForId4nsCreated struct {
}

func (o *AddAPIKeyPrivilegeForId4nsCreated) Error() string {
	return fmt.Sprintf("[POST /api/v1/apikeys/{key}/privileges/{privilege}/id4ns][%d] addApiKeyPrivilegeForId4nsCreated ", 201)
}

func (o *AddAPIKeyPrivilegeForId4nsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddAPIKeyPrivilegeForId4nsAccepted creates a AddAPIKeyPrivilegeForId4nsAccepted with default headers values
func NewAddAPIKeyPrivilegeForId4nsAccepted() *AddAPIKeyPrivilegeForId4nsAccepted {
	return &AddAPIKeyPrivilegeForId4nsAccepted{}
}

/*AddAPIKeyPrivilegeForId4nsAccepted handles this case with default header values.

Accepted
*/
type AddAPIKeyPrivilegeForId4nsAccepted struct {
}

func (o *AddAPIKeyPrivilegeForId4nsAccepted) Error() string {
	return fmt.Sprintf("[POST /api/v1/apikeys/{key}/privileges/{privilege}/id4ns][%d] addApiKeyPrivilegeForId4nsAccepted ", 202)
}

func (o *AddAPIKeyPrivilegeForId4nsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddAPIKeyPrivilegeForId4nsBadRequest creates a AddAPIKeyPrivilegeForId4nsBadRequest with default headers values
func NewAddAPIKeyPrivilegeForId4nsBadRequest() *AddAPIKeyPrivilegeForId4nsBadRequest {
	return &AddAPIKeyPrivilegeForId4nsBadRequest{}
}

/*AddAPIKeyPrivilegeForId4nsBadRequest handles this case with default header values.

Bad Request
*/
type AddAPIKeyPrivilegeForId4nsBadRequest struct {
	Payload *api_models.APIError
}

func (o *AddAPIKeyPrivilegeForId4nsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/apikeys/{key}/privileges/{privilege}/id4ns][%d] addApiKeyPrivilegeForId4nsBadRequest  %+v", 400, o.Payload)
}

func (o *AddAPIKeyPrivilegeForId4nsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAPIKeyPrivilegeForId4nsUnauthorized creates a AddAPIKeyPrivilegeForId4nsUnauthorized with default headers values
func NewAddAPIKeyPrivilegeForId4nsUnauthorized() *AddAPIKeyPrivilegeForId4nsUnauthorized {
	return &AddAPIKeyPrivilegeForId4nsUnauthorized{}
}

/*AddAPIKeyPrivilegeForId4nsUnauthorized handles this case with default header values.

Unauthorized
*/
type AddAPIKeyPrivilegeForId4nsUnauthorized struct {
	Payload *api_models.APIError
}

func (o *AddAPIKeyPrivilegeForId4nsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/apikeys/{key}/privileges/{privilege}/id4ns][%d] addApiKeyPrivilegeForId4nsUnauthorized  %+v", 401, o.Payload)
}

func (o *AddAPIKeyPrivilegeForId4nsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAPIKeyPrivilegeForId4nsForbidden creates a AddAPIKeyPrivilegeForId4nsForbidden with default headers values
func NewAddAPIKeyPrivilegeForId4nsForbidden() *AddAPIKeyPrivilegeForId4nsForbidden {
	return &AddAPIKeyPrivilegeForId4nsForbidden{}
}

/*AddAPIKeyPrivilegeForId4nsForbidden handles this case with default header values.

Forbidden
*/
type AddAPIKeyPrivilegeForId4nsForbidden struct {
	Payload *api_models.APIError
}

func (o *AddAPIKeyPrivilegeForId4nsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/apikeys/{key}/privileges/{privilege}/id4ns][%d] addApiKeyPrivilegeForId4nsForbidden  %+v", 403, o.Payload)
}

func (o *AddAPIKeyPrivilegeForId4nsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAPIKeyPrivilegeForId4nsNotFound creates a AddAPIKeyPrivilegeForId4nsNotFound with default headers values
func NewAddAPIKeyPrivilegeForId4nsNotFound() *AddAPIKeyPrivilegeForId4nsNotFound {
	return &AddAPIKeyPrivilegeForId4nsNotFound{}
}

/*AddAPIKeyPrivilegeForId4nsNotFound handles this case with default header values.

Not Found
*/
type AddAPIKeyPrivilegeForId4nsNotFound struct {
	Payload *api_models.APIError
}

func (o *AddAPIKeyPrivilegeForId4nsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/apikeys/{key}/privileges/{privilege}/id4ns][%d] addApiKeyPrivilegeForId4nsNotFound  %+v", 404, o.Payload)
}

func (o *AddAPIKeyPrivilegeForId4nsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAPIKeyPrivilegeForId4nsMethodNotAllowed creates a AddAPIKeyPrivilegeForId4nsMethodNotAllowed with default headers values
func NewAddAPIKeyPrivilegeForId4nsMethodNotAllowed() *AddAPIKeyPrivilegeForId4nsMethodNotAllowed {
	return &AddAPIKeyPrivilegeForId4nsMethodNotAllowed{}
}

/*AddAPIKeyPrivilegeForId4nsMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type AddAPIKeyPrivilegeForId4nsMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *AddAPIKeyPrivilegeForId4nsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /api/v1/apikeys/{key}/privileges/{privilege}/id4ns][%d] addApiKeyPrivilegeForId4nsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *AddAPIKeyPrivilegeForId4nsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAPIKeyPrivilegeForId4nsNotAcceptable creates a AddAPIKeyPrivilegeForId4nsNotAcceptable with default headers values
func NewAddAPIKeyPrivilegeForId4nsNotAcceptable() *AddAPIKeyPrivilegeForId4nsNotAcceptable {
	return &AddAPIKeyPrivilegeForId4nsNotAcceptable{}
}

/*AddAPIKeyPrivilegeForId4nsNotAcceptable handles this case with default header values.

Not Acceptable
*/
type AddAPIKeyPrivilegeForId4nsNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *AddAPIKeyPrivilegeForId4nsNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /api/v1/apikeys/{key}/privileges/{privilege}/id4ns][%d] addApiKeyPrivilegeForId4nsNotAcceptable  %+v", 406, o.Payload)
}

func (o *AddAPIKeyPrivilegeForId4nsNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAPIKeyPrivilegeForId4nsConflict creates a AddAPIKeyPrivilegeForId4nsConflict with default headers values
func NewAddAPIKeyPrivilegeForId4nsConflict() *AddAPIKeyPrivilegeForId4nsConflict {
	return &AddAPIKeyPrivilegeForId4nsConflict{}
}

/*AddAPIKeyPrivilegeForId4nsConflict handles this case with default header values.

Conflict
*/
type AddAPIKeyPrivilegeForId4nsConflict struct {
	Payload *api_models.APIError
}

func (o *AddAPIKeyPrivilegeForId4nsConflict) Error() string {
	return fmt.Sprintf("[POST /api/v1/apikeys/{key}/privileges/{privilege}/id4ns][%d] addApiKeyPrivilegeForId4nsConflict  %+v", 409, o.Payload)
}

func (o *AddAPIKeyPrivilegeForId4nsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAPIKeyPrivilegeForId4nsUnsupportedMediaType creates a AddAPIKeyPrivilegeForId4nsUnsupportedMediaType with default headers values
func NewAddAPIKeyPrivilegeForId4nsUnsupportedMediaType() *AddAPIKeyPrivilegeForId4nsUnsupportedMediaType {
	return &AddAPIKeyPrivilegeForId4nsUnsupportedMediaType{}
}

/*AddAPIKeyPrivilegeForId4nsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type AddAPIKeyPrivilegeForId4nsUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *AddAPIKeyPrivilegeForId4nsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v1/apikeys/{key}/privileges/{privilege}/id4ns][%d] addApiKeyPrivilegeForId4nsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *AddAPIKeyPrivilegeForId4nsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAPIKeyPrivilegeForId4nsInternalServerError creates a AddAPIKeyPrivilegeForId4nsInternalServerError with default headers values
func NewAddAPIKeyPrivilegeForId4nsInternalServerError() *AddAPIKeyPrivilegeForId4nsInternalServerError {
	return &AddAPIKeyPrivilegeForId4nsInternalServerError{}
}

/*AddAPIKeyPrivilegeForId4nsInternalServerError handles this case with default header values.

Internal Server Error
*/
type AddAPIKeyPrivilegeForId4nsInternalServerError struct {
	Payload *api_models.APIError
}

func (o *AddAPIKeyPrivilegeForId4nsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/apikeys/{key}/privileges/{privilege}/id4ns][%d] addApiKeyPrivilegeForId4nsInternalServerError  %+v", 500, o.Payload)
}

func (o *AddAPIKeyPrivilegeForId4nsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
