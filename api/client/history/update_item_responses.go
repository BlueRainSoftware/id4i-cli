// Code generated by go-swagger; DO NOT EDIT.

package history

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api/models"
)

// UpdateItemReader is a Reader for the UpdateItem structure.
type UpdateItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateItemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewUpdateItemNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewUpdateItemUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateItemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateItemOK creates a UpdateItemOK with default headers values
func NewUpdateItemOK() *UpdateItemOK {
	return &UpdateItemOK{}
}

/*UpdateItemOK handles this case with default header values.

OK
*/
type UpdateItemOK struct {
	Payload *api_models.HistoryItem
}

func (o *UpdateItemOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/history/{id4n}/{organizationId}/{sequenceId}][%d] updateItemOK  %+v", 200, o.Payload)
}

func (o *UpdateItemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.HistoryItem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemNoContent creates a UpdateItemNoContent with default headers values
func NewUpdateItemNoContent() *UpdateItemNoContent {
	return &UpdateItemNoContent{}
}

/*UpdateItemNoContent handles this case with default header values.

No Content
*/
type UpdateItemNoContent struct {
}

func (o *UpdateItemNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/history/{id4n}/{organizationId}/{sequenceId}][%d] updateItemNoContent ", 204)
}

func (o *UpdateItemNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateItemUnauthorized creates a UpdateItemUnauthorized with default headers values
func NewUpdateItemUnauthorized() *UpdateItemUnauthorized {
	return &UpdateItemUnauthorized{}
}

/*UpdateItemUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateItemUnauthorized struct {
}

func (o *UpdateItemUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/history/{id4n}/{organizationId}/{sequenceId}][%d] updateItemUnauthorized ", 401)
}

func (o *UpdateItemUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateItemForbidden creates a UpdateItemForbidden with default headers values
func NewUpdateItemForbidden() *UpdateItemForbidden {
	return &UpdateItemForbidden{}
}

/*UpdateItemForbidden handles this case with default header values.

Forbidden
*/
type UpdateItemForbidden struct {
}

func (o *UpdateItemForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/history/{id4n}/{organizationId}/{sequenceId}][%d] updateItemForbidden ", 403)
}

func (o *UpdateItemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
