// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api/models"
)

// RequestPasswordResetReader is a Reader for the RequestPasswordReset structure.
type RequestPasswordResetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RequestPasswordResetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRequestPasswordResetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewRequestPasswordResetCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewRequestPasswordResetAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewRequestPasswordResetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewRequestPasswordResetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewRequestPasswordResetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewRequestPasswordResetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewRequestPasswordResetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewRequestPasswordResetNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewRequestPasswordResetConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewRequestPasswordResetUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewRequestPasswordResetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRequestPasswordResetOK creates a RequestPasswordResetOK with default headers values
func NewRequestPasswordResetOK() *RequestPasswordResetOK {
	return &RequestPasswordResetOK{}
}

/*RequestPasswordResetOK handles this case with default header values.

OK
*/
type RequestPasswordResetOK struct {
	Payload *api_models.SimpleMessageResponse
}

func (o *RequestPasswordResetOK) Error() string {
	return fmt.Sprintf("[POST /account/password][%d] requestPasswordResetOK  %+v", 200, o.Payload)
}

func (o *RequestPasswordResetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.SimpleMessageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestPasswordResetCreated creates a RequestPasswordResetCreated with default headers values
func NewRequestPasswordResetCreated() *RequestPasswordResetCreated {
	return &RequestPasswordResetCreated{}
}

/*RequestPasswordResetCreated handles this case with default header values.

Created
*/
type RequestPasswordResetCreated struct {
}

func (o *RequestPasswordResetCreated) Error() string {
	return fmt.Sprintf("[POST /account/password][%d] requestPasswordResetCreated ", 201)
}

func (o *RequestPasswordResetCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRequestPasswordResetAccepted creates a RequestPasswordResetAccepted with default headers values
func NewRequestPasswordResetAccepted() *RequestPasswordResetAccepted {
	return &RequestPasswordResetAccepted{}
}

/*RequestPasswordResetAccepted handles this case with default header values.

Accepted
*/
type RequestPasswordResetAccepted struct {
}

func (o *RequestPasswordResetAccepted) Error() string {
	return fmt.Sprintf("[POST /account/password][%d] requestPasswordResetAccepted ", 202)
}

func (o *RequestPasswordResetAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRequestPasswordResetBadRequest creates a RequestPasswordResetBadRequest with default headers values
func NewRequestPasswordResetBadRequest() *RequestPasswordResetBadRequest {
	return &RequestPasswordResetBadRequest{}
}

/*RequestPasswordResetBadRequest handles this case with default header values.

Bad Request
*/
type RequestPasswordResetBadRequest struct {
	Payload *api_models.APIError
}

func (o *RequestPasswordResetBadRequest) Error() string {
	return fmt.Sprintf("[POST /account/password][%d] requestPasswordResetBadRequest  %+v", 400, o.Payload)
}

func (o *RequestPasswordResetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestPasswordResetUnauthorized creates a RequestPasswordResetUnauthorized with default headers values
func NewRequestPasswordResetUnauthorized() *RequestPasswordResetUnauthorized {
	return &RequestPasswordResetUnauthorized{}
}

/*RequestPasswordResetUnauthorized handles this case with default header values.

Unauthorized
*/
type RequestPasswordResetUnauthorized struct {
	Payload *api_models.APIError
}

func (o *RequestPasswordResetUnauthorized) Error() string {
	return fmt.Sprintf("[POST /account/password][%d] requestPasswordResetUnauthorized  %+v", 401, o.Payload)
}

func (o *RequestPasswordResetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestPasswordResetForbidden creates a RequestPasswordResetForbidden with default headers values
func NewRequestPasswordResetForbidden() *RequestPasswordResetForbidden {
	return &RequestPasswordResetForbidden{}
}

/*RequestPasswordResetForbidden handles this case with default header values.

Forbidden
*/
type RequestPasswordResetForbidden struct {
	Payload *api_models.APIError
}

func (o *RequestPasswordResetForbidden) Error() string {
	return fmt.Sprintf("[POST /account/password][%d] requestPasswordResetForbidden  %+v", 403, o.Payload)
}

func (o *RequestPasswordResetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestPasswordResetNotFound creates a RequestPasswordResetNotFound with default headers values
func NewRequestPasswordResetNotFound() *RequestPasswordResetNotFound {
	return &RequestPasswordResetNotFound{}
}

/*RequestPasswordResetNotFound handles this case with default header values.

Not Found
*/
type RequestPasswordResetNotFound struct {
	Payload *api_models.APIError
}

func (o *RequestPasswordResetNotFound) Error() string {
	return fmt.Sprintf("[POST /account/password][%d] requestPasswordResetNotFound  %+v", 404, o.Payload)
}

func (o *RequestPasswordResetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestPasswordResetMethodNotAllowed creates a RequestPasswordResetMethodNotAllowed with default headers values
func NewRequestPasswordResetMethodNotAllowed() *RequestPasswordResetMethodNotAllowed {
	return &RequestPasswordResetMethodNotAllowed{}
}

/*RequestPasswordResetMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type RequestPasswordResetMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *RequestPasswordResetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /account/password][%d] requestPasswordResetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *RequestPasswordResetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestPasswordResetNotAcceptable creates a RequestPasswordResetNotAcceptable with default headers values
func NewRequestPasswordResetNotAcceptable() *RequestPasswordResetNotAcceptable {
	return &RequestPasswordResetNotAcceptable{}
}

/*RequestPasswordResetNotAcceptable handles this case with default header values.

Not Acceptable
*/
type RequestPasswordResetNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *RequestPasswordResetNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /account/password][%d] requestPasswordResetNotAcceptable  %+v", 406, o.Payload)
}

func (o *RequestPasswordResetNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestPasswordResetConflict creates a RequestPasswordResetConflict with default headers values
func NewRequestPasswordResetConflict() *RequestPasswordResetConflict {
	return &RequestPasswordResetConflict{}
}

/*RequestPasswordResetConflict handles this case with default header values.

Conflict
*/
type RequestPasswordResetConflict struct {
	Payload *api_models.APIError
}

func (o *RequestPasswordResetConflict) Error() string {
	return fmt.Sprintf("[POST /account/password][%d] requestPasswordResetConflict  %+v", 409, o.Payload)
}

func (o *RequestPasswordResetConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestPasswordResetUnsupportedMediaType creates a RequestPasswordResetUnsupportedMediaType with default headers values
func NewRequestPasswordResetUnsupportedMediaType() *RequestPasswordResetUnsupportedMediaType {
	return &RequestPasswordResetUnsupportedMediaType{}
}

/*RequestPasswordResetUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type RequestPasswordResetUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *RequestPasswordResetUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /account/password][%d] requestPasswordResetUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *RequestPasswordResetUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestPasswordResetInternalServerError creates a RequestPasswordResetInternalServerError with default headers values
func NewRequestPasswordResetInternalServerError() *RequestPasswordResetInternalServerError {
	return &RequestPasswordResetInternalServerError{}
}

/*RequestPasswordResetInternalServerError handles this case with default header values.

Internal Server Error
*/
type RequestPasswordResetInternalServerError struct {
	Payload *api_models.APIError
}

func (o *RequestPasswordResetInternalServerError) Error() string {
	return fmt.Sprintf("[POST /account/password][%d] requestPasswordResetInternalServerError  %+v", 500, o.Payload)
}

func (o *RequestPasswordResetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
