// Code generated by go-swagger; DO NOT EDIT.

package api_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new api keys API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api keys API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddAPIKeyPrivilege adds privilege
*/
func (a *Client) AddAPIKeyPrivilege(params *AddAPIKeyPrivilegeParams, authInfo runtime.ClientAuthInfoWriter) (*AddAPIKeyPrivilegeOK, *AddAPIKeyPrivilegeCreated, *AddAPIKeyPrivilegeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAPIKeyPrivilegeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addApiKeyPrivilege",
		Method:             "POST",
		PathPattern:        "/api/v1/apikeys/{key}/privileges",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddAPIKeyPrivilegeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *AddAPIKeyPrivilegeOK:
		return value, nil, nil, nil
	case *AddAPIKeyPrivilegeCreated:
		return nil, value, nil, nil
	case *AddAPIKeyPrivilegeAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
AddAPIKeyPrivilegeForId4ns adds id4ns of a privilege
*/
func (a *Client) AddAPIKeyPrivilegeForId4ns(params *AddAPIKeyPrivilegeForId4nsParams, authInfo runtime.ClientAuthInfoWriter) (*AddAPIKeyPrivilegeForId4nsOK, *AddAPIKeyPrivilegeForId4nsCreated, *AddAPIKeyPrivilegeForId4nsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAPIKeyPrivilegeForId4nsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addApiKeyPrivilegeForId4ns",
		Method:             "POST",
		PathPattern:        "/api/v1/apikeys/{key}/privileges/{privilege}/id4ns",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddAPIKeyPrivilegeForId4nsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *AddAPIKeyPrivilegeForId4nsOK:
		return value, nil, nil, nil
	case *AddAPIKeyPrivilegeForId4nsCreated:
		return nil, value, nil, nil
	case *AddAPIKeyPrivilegeForId4nsAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
CreateNewAPIKey creates API key

Creation of a new API key.
*/
func (a *Client) CreateNewAPIKey(params *CreateNewAPIKeyParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNewAPIKeyOK, *CreateNewAPIKeyCreated, *CreateNewAPIKeyAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNewAPIKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNewApiKey",
		Method:             "POST",
		PathPattern:        "/api/v1/apikeys",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNewAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateNewAPIKeyOK:
		return value, nil, nil, nil
	case *CreateNewAPIKeyCreated:
		return nil, value, nil, nil
	case *CreateNewAPIKeyAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
DeleteAPIKey deletes API key

Deletion of an API key.
*/
func (a *Client) DeleteAPIKey(params *DeleteAPIKeyParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiKey",
		Method:             "DELETE",
		PathPattern:        "/api/v1/apikeys/{key}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIKeyOK), nil

}

/*
GETAPIKey shows API key

Showing the details of an API key.
*/
func (a *Client) GETAPIKey(params *GETAPIKeyParams, authInfo runtime.ClientAuthInfoWriter) (*GETAPIKeyOK, *GETAPIKeyAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETAPIKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiKey",
		Method:             "GET",
		PathPattern:        "/api/v1/apikeys/{key}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GETAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GETAPIKeyOK:
		return value, nil, nil
	case *GETAPIKeyAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ListAllAPIKeyPrivileges lists all privileges

Listing all possible API key privileges.
*/
func (a *Client) ListAllAPIKeyPrivileges(params *ListAllAPIKeyPrivilegesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllAPIKeyPrivilegesOK, *ListAllAPIKeyPrivilegesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllAPIKeyPrivilegesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllApiKeyPrivileges",
		Method:             "GET",
		PathPattern:        "/api/v1/apikeys/privileges",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllAPIKeyPrivilegesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListAllAPIKeyPrivilegesOK:
		return value, nil, nil
	case *ListAllAPIKeyPrivilegesAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ListAllAPIKeysOfOrganization finds API key by organization

Finding all API key assigned to the specified organization in a paginated manner.
*/
func (a *Client) ListAllAPIKeysOfOrganization(params *ListAllAPIKeysOfOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllAPIKeysOfOrganizationOK, *ListAllAPIKeysOfOrganizationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllAPIKeysOfOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllApiKeysOfOrganization",
		Method:             "GET",
		PathPattern:        "/api/v1/apikeys",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllAPIKeysOfOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListAllAPIKeysOfOrganizationOK:
		return value, nil, nil
	case *ListAllAPIKeysOfOrganizationAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ListAPIKeyPrivileges lists privileges
*/
func (a *Client) ListAPIKeyPrivileges(params *ListAPIKeyPrivilegesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAPIKeyPrivilegesOK, *ListAPIKeyPrivilegesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAPIKeyPrivilegesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listApiKeyPrivileges",
		Method:             "GET",
		PathPattern:        "/api/v1/apikeys/{key}/privileges",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAPIKeyPrivilegesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListAPIKeyPrivilegesOK:
		return value, nil, nil
	case *ListAPIKeyPrivilegesAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ListId4ns id4ns of a privilege

Listing ID4ns of a id4n concerning privilege
*/
func (a *Client) ListId4ns(params *ListId4nsParams, authInfo runtime.ClientAuthInfoWriter) (*ListId4nsOK, *ListId4nsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListId4nsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listId4ns",
		Method:             "GET",
		PathPattern:        "/api/v1/apikeys/{key}/privileges/{privilege}/id4ns",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListId4nsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListId4nsOK:
		return value, nil, nil
	case *ListId4nsAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
RemoveAPIKeyPrivilege removes privilege
*/
func (a *Client) RemoveAPIKeyPrivilege(params *RemoveAPIKeyPrivilegeParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveAPIKeyPrivilegeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAPIKeyPrivilegeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeApiKeyPrivilege",
		Method:             "DELETE",
		PathPattern:        "/api/v1/apikeys/{key}/privileges",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveAPIKeyPrivilegeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveAPIKeyPrivilegeOK), nil

}

/*
RemoveAPIKeyPrivilegeForId4ns removes id4ns of a privilege
*/
func (a *Client) RemoveAPIKeyPrivilegeForId4ns(params *RemoveAPIKeyPrivilegeForId4nsParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveAPIKeyPrivilegeForId4nsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAPIKeyPrivilegeForId4nsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeApiKeyPrivilegeForId4ns",
		Method:             "DELETE",
		PathPattern:        "/api/v1/apikeys/{key}/privileges/{privilege}/id4ns",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveAPIKeyPrivilegeForId4nsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveAPIKeyPrivilegeForId4nsOK), nil

}

/*
UpdateAPIKey updates API keys

API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.
*/
func (a *Client) UpdateAPIKey(params *UpdateAPIKeyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAPIKeyOK, *UpdateAPIKeyAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAPIKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateApiKey",
		Method:             "PUT",
		PathPattern:        "/api/v1/apikeys/{key}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAPIKeyOK:
		return value, nil, nil
	case *UpdateAPIKeyAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
