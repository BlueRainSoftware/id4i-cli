// Code generated by go-swagger; DO NOT EDIT.

package auditing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListOrganizationChangeLogParams creates a new ListOrganizationChangeLogParams object
// with the default values initialized.
func NewListOrganizationChangeLogParams() *ListOrganizationChangeLogParams {
	var (
		messageMimeTypeDefault = string("text/mustache")
	)
	return &ListOrganizationChangeLogParams{
		MessageMimeType: &messageMimeTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListOrganizationChangeLogParamsWithTimeout creates a new ListOrganizationChangeLogParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListOrganizationChangeLogParamsWithTimeout(timeout time.Duration) *ListOrganizationChangeLogParams {
	var (
		messageMimeTypeDefault = string("text/mustache")
	)
	return &ListOrganizationChangeLogParams{
		MessageMimeType: &messageMimeTypeDefault,

		timeout: timeout,
	}
}

// NewListOrganizationChangeLogParamsWithContext creates a new ListOrganizationChangeLogParams object
// with the default values initialized, and the ability to set a context for a request
func NewListOrganizationChangeLogParamsWithContext(ctx context.Context) *ListOrganizationChangeLogParams {
	var (
		messageMimeTypeDefault = string("text/mustache")
	)
	return &ListOrganizationChangeLogParams{
		MessageMimeType: &messageMimeTypeDefault,

		Context: ctx,
	}
}

// NewListOrganizationChangeLogParamsWithHTTPClient creates a new ListOrganizationChangeLogParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListOrganizationChangeLogParamsWithHTTPClient(client *http.Client) *ListOrganizationChangeLogParams {
	var (
		messageMimeTypeDefault = string("text/mustache")
	)
	return &ListOrganizationChangeLogParams{
		MessageMimeType: &messageMimeTypeDefault,
		HTTPClient:      client,
	}
}

/*ListOrganizationChangeLogParams contains all the parameters to send to the API endpoint
for the list organization change log operation typically these are written to a http.Request
*/
type ListOrganizationChangeLogParams struct {

	/*FromDate
	  From date time as UTC Date-Time format

	*/
	FromDate *strfmt.DateTime
	/*Limit
	  The maximum count of returned elements

	*/
	Limit *int32
	/*MessageMimeType
	  The Mime-type for the message format that should be returned. e.g. 'text/plain' or 'text/mustache'

	*/
	MessageMimeType *string
	/*Offset
	  Start with the n-th element

	*/
	Offset *int32
	/*OrganizationID
	  The namespace identifying the organization whose change log entries are to be listed

	*/
	OrganizationID string
	/*ToDate
	  To date time as UTC Date-Time format

	*/
	ToDate *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list organization change log params
func (o *ListOrganizationChangeLogParams) WithTimeout(timeout time.Duration) *ListOrganizationChangeLogParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list organization change log params
func (o *ListOrganizationChangeLogParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list organization change log params
func (o *ListOrganizationChangeLogParams) WithContext(ctx context.Context) *ListOrganizationChangeLogParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list organization change log params
func (o *ListOrganizationChangeLogParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list organization change log params
func (o *ListOrganizationChangeLogParams) WithHTTPClient(client *http.Client) *ListOrganizationChangeLogParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list organization change log params
func (o *ListOrganizationChangeLogParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFromDate adds the fromDate to the list organization change log params
func (o *ListOrganizationChangeLogParams) WithFromDate(fromDate *strfmt.DateTime) *ListOrganizationChangeLogParams {
	o.SetFromDate(fromDate)
	return o
}

// SetFromDate adds the fromDate to the list organization change log params
func (o *ListOrganizationChangeLogParams) SetFromDate(fromDate *strfmt.DateTime) {
	o.FromDate = fromDate
}

// WithLimit adds the limit to the list organization change log params
func (o *ListOrganizationChangeLogParams) WithLimit(limit *int32) *ListOrganizationChangeLogParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list organization change log params
func (o *ListOrganizationChangeLogParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithMessageMimeType adds the messageMimeType to the list organization change log params
func (o *ListOrganizationChangeLogParams) WithMessageMimeType(messageMimeType *string) *ListOrganizationChangeLogParams {
	o.SetMessageMimeType(messageMimeType)
	return o
}

// SetMessageMimeType adds the messageMimeType to the list organization change log params
func (o *ListOrganizationChangeLogParams) SetMessageMimeType(messageMimeType *string) {
	o.MessageMimeType = messageMimeType
}

// WithOffset adds the offset to the list organization change log params
func (o *ListOrganizationChangeLogParams) WithOffset(offset *int32) *ListOrganizationChangeLogParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list organization change log params
func (o *ListOrganizationChangeLogParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOrganizationID adds the organizationID to the list organization change log params
func (o *ListOrganizationChangeLogParams) WithOrganizationID(organizationID string) *ListOrganizationChangeLogParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the list organization change log params
func (o *ListOrganizationChangeLogParams) SetOrganizationID(organizationID string) {
	o.OrganizationID = organizationID
}

// WithToDate adds the toDate to the list organization change log params
func (o *ListOrganizationChangeLogParams) WithToDate(toDate *strfmt.DateTime) *ListOrganizationChangeLogParams {
	o.SetToDate(toDate)
	return o
}

// SetToDate adds the toDate to the list organization change log params
func (o *ListOrganizationChangeLogParams) SetToDate(toDate *strfmt.DateTime) {
	o.ToDate = toDate
}

// WriteToRequest writes these params to a swagger request
func (o *ListOrganizationChangeLogParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FromDate != nil {

		// query param fromDate
		var qrFromDate strfmt.DateTime
		if o.FromDate != nil {
			qrFromDate = *o.FromDate
		}
		qFromDate := qrFromDate.String()
		if qFromDate != "" {
			if err := r.SetQueryParam("fromDate", qFromDate); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.MessageMimeType != nil {

		// query param messageMimeType
		var qrMessageMimeType string
		if o.MessageMimeType != nil {
			qrMessageMimeType = *o.MessageMimeType
		}
		qMessageMimeType := qrMessageMimeType
		if qMessageMimeType != "" {
			if err := r.SetQueryParam("messageMimeType", qMessageMimeType); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	// path param organizationId
	if err := r.SetPathParam("organizationId", o.OrganizationID); err != nil {
		return err
	}

	if o.ToDate != nil {

		// query param toDate
		var qrToDate strfmt.DateTime
		if o.ToDate != nil {
			qrToDate = *o.ToDate
		}
		qToDate := qrToDate.String()
		if qToDate != "" {
			if err := r.SetQueryParam("toDate", qToDate); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
