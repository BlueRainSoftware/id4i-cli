// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api_models"
)

// ReadPublicDocumentReader is a Reader for the ReadPublicDocument structure.
type ReadPublicDocumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadPublicDocumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReadPublicDocumentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewReadPublicDocumentAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewReadPublicDocumentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReadPublicDocumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReadPublicDocumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewReadPublicDocumentMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewReadPublicDocumentNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewReadPublicDocumentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReadPublicDocumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadPublicDocumentOK creates a ReadPublicDocumentOK with default headers values
func NewReadPublicDocumentOK() *ReadPublicDocumentOK {
	return &ReadPublicDocumentOK{}
}

/*ReadPublicDocumentOK handles this case with default header values.

OK
*/
type ReadPublicDocumentOK struct {
	Payload strfmt.Base64
}

func (o *ReadPublicDocumentOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}][%d] readPublicDocumentOK  %+v", 200, o.Payload)
}

func (o *ReadPublicDocumentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadPublicDocumentAccepted creates a ReadPublicDocumentAccepted with default headers values
func NewReadPublicDocumentAccepted() *ReadPublicDocumentAccepted {
	return &ReadPublicDocumentAccepted{}
}

/*ReadPublicDocumentAccepted handles this case with default header values.

Accepted
*/
type ReadPublicDocumentAccepted struct {
}

func (o *ReadPublicDocumentAccepted) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}][%d] readPublicDocumentAccepted ", 202)
}

func (o *ReadPublicDocumentAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadPublicDocumentUnauthorized creates a ReadPublicDocumentUnauthorized with default headers values
func NewReadPublicDocumentUnauthorized() *ReadPublicDocumentUnauthorized {
	return &ReadPublicDocumentUnauthorized{}
}

/*ReadPublicDocumentUnauthorized handles this case with default header values.

Unauthorized
*/
type ReadPublicDocumentUnauthorized struct {
	Payload *api_models.APIError
}

func (o *ReadPublicDocumentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}][%d] readPublicDocumentUnauthorized  %+v", 401, o.Payload)
}

func (o *ReadPublicDocumentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadPublicDocumentForbidden creates a ReadPublicDocumentForbidden with default headers values
func NewReadPublicDocumentForbidden() *ReadPublicDocumentForbidden {
	return &ReadPublicDocumentForbidden{}
}

/*ReadPublicDocumentForbidden handles this case with default header values.

Forbidden
*/
type ReadPublicDocumentForbidden struct {
	Payload *api_models.APIError
}

func (o *ReadPublicDocumentForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}][%d] readPublicDocumentForbidden  %+v", 403, o.Payload)
}

func (o *ReadPublicDocumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadPublicDocumentNotFound creates a ReadPublicDocumentNotFound with default headers values
func NewReadPublicDocumentNotFound() *ReadPublicDocumentNotFound {
	return &ReadPublicDocumentNotFound{}
}

/*ReadPublicDocumentNotFound handles this case with default header values.

Not Found
*/
type ReadPublicDocumentNotFound struct {
	Payload *api_models.APIError
}

func (o *ReadPublicDocumentNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}][%d] readPublicDocumentNotFound  %+v", 404, o.Payload)
}

func (o *ReadPublicDocumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadPublicDocumentMethodNotAllowed creates a ReadPublicDocumentMethodNotAllowed with default headers values
func NewReadPublicDocumentMethodNotAllowed() *ReadPublicDocumentMethodNotAllowed {
	return &ReadPublicDocumentMethodNotAllowed{}
}

/*ReadPublicDocumentMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type ReadPublicDocumentMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *ReadPublicDocumentMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}][%d] readPublicDocumentMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ReadPublicDocumentMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadPublicDocumentNotAcceptable creates a ReadPublicDocumentNotAcceptable with default headers values
func NewReadPublicDocumentNotAcceptable() *ReadPublicDocumentNotAcceptable {
	return &ReadPublicDocumentNotAcceptable{}
}

/*ReadPublicDocumentNotAcceptable handles this case with default header values.

Not Acceptable
*/
type ReadPublicDocumentNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *ReadPublicDocumentNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}][%d] readPublicDocumentNotAcceptable  %+v", 406, o.Payload)
}

func (o *ReadPublicDocumentNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadPublicDocumentUnsupportedMediaType creates a ReadPublicDocumentUnsupportedMediaType with default headers values
func NewReadPublicDocumentUnsupportedMediaType() *ReadPublicDocumentUnsupportedMediaType {
	return &ReadPublicDocumentUnsupportedMediaType{}
}

/*ReadPublicDocumentUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type ReadPublicDocumentUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *ReadPublicDocumentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}][%d] readPublicDocumentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ReadPublicDocumentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadPublicDocumentInternalServerError creates a ReadPublicDocumentInternalServerError with default headers values
func NewReadPublicDocumentInternalServerError() *ReadPublicDocumentInternalServerError {
	return &ReadPublicDocumentInternalServerError{}
}

/*ReadPublicDocumentInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReadPublicDocumentInternalServerError struct {
	Payload *api_models.APIError
}

func (o *ReadPublicDocumentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}][%d] readPublicDocumentInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadPublicDocumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
