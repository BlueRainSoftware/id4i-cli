// Code generated by go-swagger; DO NOT EDIT.

package alias

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api_models"
)

// SearchByAliasReader is a Reader for the SearchByAlias structure.
type SearchByAliasReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchByAliasReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSearchByAliasOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewSearchByAliasAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewSearchByAliasUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSearchByAliasForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSearchByAliasNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSearchByAliasMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewSearchByAliasNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewSearchByAliasUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewSearchByAliasInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSearchByAliasOK creates a SearchByAliasOK with default headers values
func NewSearchByAliasOK() *SearchByAliasOK {
	return &SearchByAliasOK{}
}

/*SearchByAliasOK handles this case with default header values.

OK
*/
type SearchByAliasOK struct {
	Payload *api_models.PaginatedGUIDResponse
}

func (o *SearchByAliasOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/search/guids][%d] searchByAliasOK  %+v", 200, o.Payload)
}

func (o *SearchByAliasOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.PaginatedGUIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchByAliasAccepted creates a SearchByAliasAccepted with default headers values
func NewSearchByAliasAccepted() *SearchByAliasAccepted {
	return &SearchByAliasAccepted{}
}

/*SearchByAliasAccepted handles this case with default header values.

Accepted
*/
type SearchByAliasAccepted struct {
}

func (o *SearchByAliasAccepted) Error() string {
	return fmt.Sprintf("[GET /api/v1/search/guids][%d] searchByAliasAccepted ", 202)
}

func (o *SearchByAliasAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchByAliasUnauthorized creates a SearchByAliasUnauthorized with default headers values
func NewSearchByAliasUnauthorized() *SearchByAliasUnauthorized {
	return &SearchByAliasUnauthorized{}
}

/*SearchByAliasUnauthorized handles this case with default header values.

Unauthorized
*/
type SearchByAliasUnauthorized struct {
	Payload *api_models.APIError
}

func (o *SearchByAliasUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/search/guids][%d] searchByAliasUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchByAliasUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchByAliasForbidden creates a SearchByAliasForbidden with default headers values
func NewSearchByAliasForbidden() *SearchByAliasForbidden {
	return &SearchByAliasForbidden{}
}

/*SearchByAliasForbidden handles this case with default header values.

Forbidden
*/
type SearchByAliasForbidden struct {
	Payload *api_models.APIError
}

func (o *SearchByAliasForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/search/guids][%d] searchByAliasForbidden  %+v", 403, o.Payload)
}

func (o *SearchByAliasForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchByAliasNotFound creates a SearchByAliasNotFound with default headers values
func NewSearchByAliasNotFound() *SearchByAliasNotFound {
	return &SearchByAliasNotFound{}
}

/*SearchByAliasNotFound handles this case with default header values.

Not Found
*/
type SearchByAliasNotFound struct {
	Payload *api_models.APIError
}

func (o *SearchByAliasNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/search/guids][%d] searchByAliasNotFound  %+v", 404, o.Payload)
}

func (o *SearchByAliasNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchByAliasMethodNotAllowed creates a SearchByAliasMethodNotAllowed with default headers values
func NewSearchByAliasMethodNotAllowed() *SearchByAliasMethodNotAllowed {
	return &SearchByAliasMethodNotAllowed{}
}

/*SearchByAliasMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type SearchByAliasMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *SearchByAliasMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/v1/search/guids][%d] searchByAliasMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SearchByAliasMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchByAliasNotAcceptable creates a SearchByAliasNotAcceptable with default headers values
func NewSearchByAliasNotAcceptable() *SearchByAliasNotAcceptable {
	return &SearchByAliasNotAcceptable{}
}

/*SearchByAliasNotAcceptable handles this case with default header values.

Not Acceptable
*/
type SearchByAliasNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *SearchByAliasNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/v1/search/guids][%d] searchByAliasNotAcceptable  %+v", 406, o.Payload)
}

func (o *SearchByAliasNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchByAliasUnsupportedMediaType creates a SearchByAliasUnsupportedMediaType with default headers values
func NewSearchByAliasUnsupportedMediaType() *SearchByAliasUnsupportedMediaType {
	return &SearchByAliasUnsupportedMediaType{}
}

/*SearchByAliasUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type SearchByAliasUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *SearchByAliasUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v1/search/guids][%d] searchByAliasUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *SearchByAliasUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchByAliasInternalServerError creates a SearchByAliasInternalServerError with default headers values
func NewSearchByAliasInternalServerError() *SearchByAliasInternalServerError {
	return &SearchByAliasInternalServerError{}
}

/*SearchByAliasInternalServerError handles this case with default header values.

Internal Server Error
*/
type SearchByAliasInternalServerError struct {
	Payload *api_models.APIError
}

func (o *SearchByAliasInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/search/guids][%d] searchByAliasInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchByAliasInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
