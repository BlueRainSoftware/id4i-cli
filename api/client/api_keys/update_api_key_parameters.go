// Code generated by go-swagger; DO NOT EDIT.

package api_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api/models"
)

// NewUpdateAPIKeyParams creates a new UpdateAPIKeyParams object
// with the default values initialized.
func NewUpdateAPIKeyParams() *UpdateAPIKeyParams {
	var ()
	return &UpdateAPIKeyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAPIKeyParamsWithTimeout creates a new UpdateAPIKeyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateAPIKeyParamsWithTimeout(timeout time.Duration) *UpdateAPIKeyParams {
	var ()
	return &UpdateAPIKeyParams{

		timeout: timeout,
	}
}

// NewUpdateAPIKeyParamsWithContext creates a new UpdateAPIKeyParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateAPIKeyParamsWithContext(ctx context.Context) *UpdateAPIKeyParams {
	var ()
	return &UpdateAPIKeyParams{

		Context: ctx,
	}
}

// NewUpdateAPIKeyParamsWithHTTPClient creates a new UpdateAPIKeyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateAPIKeyParamsWithHTTPClient(client *http.Client) *UpdateAPIKeyParams {
	var ()
	return &UpdateAPIKeyParams{
		HTTPClient: client,
	}
}

/*UpdateAPIKeyParams contains all the parameters to send to the API endpoint
for the update Api key operation typically these are written to a http.Request
*/
type UpdateAPIKeyParams struct {

	/*APIKeyChange
	  The new values to apply.

	*/
	APIKeyChange *api_models.APIKeyChangeRequest
	/*Key
	  The API key to be updated.

	*/
	Key string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update Api key params
func (o *UpdateAPIKeyParams) WithTimeout(timeout time.Duration) *UpdateAPIKeyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update Api key params
func (o *UpdateAPIKeyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update Api key params
func (o *UpdateAPIKeyParams) WithContext(ctx context.Context) *UpdateAPIKeyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update Api key params
func (o *UpdateAPIKeyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update Api key params
func (o *UpdateAPIKeyParams) WithHTTPClient(client *http.Client) *UpdateAPIKeyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update Api key params
func (o *UpdateAPIKeyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIKeyChange adds the aPIKeyChange to the update Api key params
func (o *UpdateAPIKeyParams) WithAPIKeyChange(aPIKeyChange *api_models.APIKeyChangeRequest) *UpdateAPIKeyParams {
	o.SetAPIKeyChange(aPIKeyChange)
	return o
}

// SetAPIKeyChange adds the apiKeyChange to the update Api key params
func (o *UpdateAPIKeyParams) SetAPIKeyChange(aPIKeyChange *api_models.APIKeyChangeRequest) {
	o.APIKeyChange = aPIKeyChange
}

// WithKey adds the key to the update Api key params
func (o *UpdateAPIKeyParams) WithKey(key string) *UpdateAPIKeyParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the update Api key params
func (o *UpdateAPIKeyParams) SetKey(key string) {
	o.Key = key
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAPIKeyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIKeyChange != nil {
		if err := r.SetBodyParam(o.APIKeyChange); err != nil {
			return err
		}
	}

	// path param key
	if err := r.SetPathParam("key", o.Key); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
