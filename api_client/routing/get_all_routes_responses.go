// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api_models"
)

// GETAllRoutesReader is a Reader for the GETAllRoutes structure.
type GETAllRoutesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GETAllRoutesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGETAllRoutesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewGETAllRoutesAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGETAllRoutesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGETAllRoutesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGETAllRoutesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGETAllRoutesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewGETAllRoutesNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewGETAllRoutesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGETAllRoutesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGETAllRoutesOK creates a GETAllRoutesOK with default headers values
func NewGETAllRoutesOK() *GETAllRoutesOK {
	return &GETAllRoutesOK{}
}

/*GETAllRoutesOK handles this case with default header values.

OK
*/
type GETAllRoutesOK struct {
	Payload []*api_models.Route
}

func (o *GETAllRoutesOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/routes/{type}][%d] getAllRoutesOK  %+v", 200, o.Payload)
}

func (o *GETAllRoutesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETAllRoutesAccepted creates a GETAllRoutesAccepted with default headers values
func NewGETAllRoutesAccepted() *GETAllRoutesAccepted {
	return &GETAllRoutesAccepted{}
}

/*GETAllRoutesAccepted handles this case with default header values.

Accepted
*/
type GETAllRoutesAccepted struct {
}

func (o *GETAllRoutesAccepted) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/routes/{type}][%d] getAllRoutesAccepted ", 202)
}

func (o *GETAllRoutesAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGETAllRoutesUnauthorized creates a GETAllRoutesUnauthorized with default headers values
func NewGETAllRoutesUnauthorized() *GETAllRoutesUnauthorized {
	return &GETAllRoutesUnauthorized{}
}

/*GETAllRoutesUnauthorized handles this case with default header values.

Unauthorized
*/
type GETAllRoutesUnauthorized struct {
	Payload *api_models.APIError
}

func (o *GETAllRoutesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/routes/{type}][%d] getAllRoutesUnauthorized  %+v", 401, o.Payload)
}

func (o *GETAllRoutesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETAllRoutesForbidden creates a GETAllRoutesForbidden with default headers values
func NewGETAllRoutesForbidden() *GETAllRoutesForbidden {
	return &GETAllRoutesForbidden{}
}

/*GETAllRoutesForbidden handles this case with default header values.

Forbidden
*/
type GETAllRoutesForbidden struct {
	Payload *api_models.APIError
}

func (o *GETAllRoutesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/routes/{type}][%d] getAllRoutesForbidden  %+v", 403, o.Payload)
}

func (o *GETAllRoutesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETAllRoutesNotFound creates a GETAllRoutesNotFound with default headers values
func NewGETAllRoutesNotFound() *GETAllRoutesNotFound {
	return &GETAllRoutesNotFound{}
}

/*GETAllRoutesNotFound handles this case with default header values.

Not Found
*/
type GETAllRoutesNotFound struct {
	Payload *api_models.APIError
}

func (o *GETAllRoutesNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/routes/{type}][%d] getAllRoutesNotFound  %+v", 404, o.Payload)
}

func (o *GETAllRoutesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETAllRoutesMethodNotAllowed creates a GETAllRoutesMethodNotAllowed with default headers values
func NewGETAllRoutesMethodNotAllowed() *GETAllRoutesMethodNotAllowed {
	return &GETAllRoutesMethodNotAllowed{}
}

/*GETAllRoutesMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type GETAllRoutesMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *GETAllRoutesMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/routes/{type}][%d] getAllRoutesMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GETAllRoutesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETAllRoutesNotAcceptable creates a GETAllRoutesNotAcceptable with default headers values
func NewGETAllRoutesNotAcceptable() *GETAllRoutesNotAcceptable {
	return &GETAllRoutesNotAcceptable{}
}

/*GETAllRoutesNotAcceptable handles this case with default header values.

Not Acceptable
*/
type GETAllRoutesNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *GETAllRoutesNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/routes/{type}][%d] getAllRoutesNotAcceptable  %+v", 406, o.Payload)
}

func (o *GETAllRoutesNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETAllRoutesUnsupportedMediaType creates a GETAllRoutesUnsupportedMediaType with default headers values
func NewGETAllRoutesUnsupportedMediaType() *GETAllRoutesUnsupportedMediaType {
	return &GETAllRoutesUnsupportedMediaType{}
}

/*GETAllRoutesUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type GETAllRoutesUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *GETAllRoutesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/routes/{type}][%d] getAllRoutesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GETAllRoutesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETAllRoutesInternalServerError creates a GETAllRoutesInternalServerError with default headers values
func NewGETAllRoutesInternalServerError() *GETAllRoutesInternalServerError {
	return &GETAllRoutesInternalServerError{}
}

/*GETAllRoutesInternalServerError handles this case with default header values.

Internal Server Error
*/
type GETAllRoutesInternalServerError struct {
	Payload *api_models.APIError
}

func (o *GETAllRoutesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/routes/{type}][%d] getAllRoutesInternalServerError  %+v", 500, o.Payload)
}

func (o *GETAllRoutesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
