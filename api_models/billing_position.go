// Code generated by go-swagger; DO NOT EDIT.

package api_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BillingPosition BillingPosition
// swagger:model BillingPosition
type BillingPosition struct {

	// amount
	// Required: true
	Amount *int64 `json:"amount"`

	// count
	// Required: true
	Count *float64 `json:"count"`

	// description
	// Required: true
	Description *string `json:"description"`

	// service
	// Required: true
	Service *string `json:"service"`

	// single price
	// Required: true
	SinglePrice *float64 `json:"singlePrice"`

	// sum
	// Required: true
	Sum *float64 `json:"sum"`

	// unit
	// Required: true
	Unit *string `json:"unit"`
}

// Validate validates this billing position
func (m *BillingPosition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSinglePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillingPosition) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *BillingPosition) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	return nil
}

func (m *BillingPosition) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *BillingPosition) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

func (m *BillingPosition) validateSinglePrice(formats strfmt.Registry) error {

	if err := validate.Required("singlePrice", "body", m.SinglePrice); err != nil {
		return err
	}

	return nil
}

func (m *BillingPosition) validateSum(formats strfmt.Registry) error {

	if err := validate.Required("sum", "body", m.Sum); err != nil {
		return err
	}

	return nil
}

func (m *BillingPosition) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BillingPosition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillingPosition) UnmarshalBinary(b []byte) error {
	var res BillingPosition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
