// Code generated by go-swagger; DO NOT EDIT.

package public_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new public services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for public services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GETRoutes retrieves all public routes for a GUID
*/
func (a *Client) GETRoutes(params *GETRoutesParams, authInfo runtime.ClientAuthInfoWriter) (*GETRoutesOK, *GETRoutesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETRoutesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutes",
		Method:             "GET",
		PathPattern:        "/api/v1/public/routes/{id4n}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GETRoutesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GETRoutesOK:
		return value, nil, nil
	case *GETRoutesAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
Go forwards

Forwarding to the designated route defined in the routing,
*/
func (a *Client) Go(params *GoParams) (*GoOK, *GoAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "go",
		Method:             "GET",
		PathPattern:        "/go/{guid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GoOK:
		return value, nil, nil
	case *GoAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ListPublicHistory shows the public history of the given GUID

Only contains public history items
*/
func (a *Client) ListPublicHistory(params *ListPublicHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*ListPublicHistoryOK, *ListPublicHistoryAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPublicHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listPublicHistory",
		Method:             "GET",
		PathPattern:        "/api/v1/public/history/{id4n}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPublicHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListPublicHistoryOK:
		return value, nil, nil
	case *ListPublicHistoryAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ReadOrganizationInfo reads public organization information
*/
func (a *Client) ReadOrganizationInfo(params *ReadOrganizationInfoParams, authInfo runtime.ClientAuthInfoWriter) (*ReadOrganizationInfoOK, *ReadOrganizationInfoAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadOrganizationInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readOrganizationInfo",
		Method:             "GET",
		PathPattern:        "/api/v1/public/organizations/{organizationId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadOrganizationInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReadOrganizationInfoOK:
		return value, nil, nil
	case *ReadOrganizationInfoAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
