// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGETAllRoutesParams creates a new GETAllRoutesParams object
// with the default values initialized.
func NewGETAllRoutesParams() *GETAllRoutesParams {
	var (
		interpolateDefault = bool(true)
	)
	return &GETAllRoutesParams{
		Interpolate: &interpolateDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGETAllRoutesParamsWithTimeout creates a new GETAllRoutesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGETAllRoutesParamsWithTimeout(timeout time.Duration) *GETAllRoutesParams {
	var (
		interpolateDefault = bool(true)
	)
	return &GETAllRoutesParams{
		Interpolate: &interpolateDefault,

		timeout: timeout,
	}
}

// NewGETAllRoutesParamsWithContext creates a new GETAllRoutesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGETAllRoutesParamsWithContext(ctx context.Context) *GETAllRoutesParams {
	var (
		interpolateDefault = bool(true)
	)
	return &GETAllRoutesParams{
		Interpolate: &interpolateDefault,

		Context: ctx,
	}
}

// NewGETAllRoutesParamsWithHTTPClient creates a new GETAllRoutesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGETAllRoutesParamsWithHTTPClient(client *http.Client) *GETAllRoutesParams {
	var (
		interpolateDefault = bool(true)
	)
	return &GETAllRoutesParams{
		Interpolate: &interpolateDefault,
		HTTPClient:  client,
	}
}

/*GETAllRoutesParams contains all the parameters to send to the API endpoint
for the get all routes operation typically these are written to a http.Request
*/
type GETAllRoutesParams struct {

	/*ID4N
	  id4n

	*/
	ID4N string
	/*Interpolate
	  interpolate

	*/
	Interpolate *bool
	/*OrganizationID
	  organizationId

	*/
	OrganizationID *string
	/*Type
	  The type of route you want to have

	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get all routes params
func (o *GETAllRoutesParams) WithTimeout(timeout time.Duration) *GETAllRoutesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all routes params
func (o *GETAllRoutesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all routes params
func (o *GETAllRoutesParams) WithContext(ctx context.Context) *GETAllRoutesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all routes params
func (o *GETAllRoutesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all routes params
func (o *GETAllRoutesParams) WithHTTPClient(client *http.Client) *GETAllRoutesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all routes params
func (o *GETAllRoutesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID4N adds the id4n to the get all routes params
func (o *GETAllRoutesParams) WithID4N(id4n string) *GETAllRoutesParams {
	o.SetID4N(id4n)
	return o
}

// SetID4N adds the id4n to the get all routes params
func (o *GETAllRoutesParams) SetID4N(id4n string) {
	o.ID4N = id4n
}

// WithInterpolate adds the interpolate to the get all routes params
func (o *GETAllRoutesParams) WithInterpolate(interpolate *bool) *GETAllRoutesParams {
	o.SetInterpolate(interpolate)
	return o
}

// SetInterpolate adds the interpolate to the get all routes params
func (o *GETAllRoutesParams) SetInterpolate(interpolate *bool) {
	o.Interpolate = interpolate
}

// WithOrganizationID adds the organizationID to the get all routes params
func (o *GETAllRoutesParams) WithOrganizationID(organizationID *string) *GETAllRoutesParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get all routes params
func (o *GETAllRoutesParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WithType adds the typeVar to the get all routes params
func (o *GETAllRoutesParams) WithType(typeVar string) *GETAllRoutesParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get all routes params
func (o *GETAllRoutesParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GETAllRoutesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id4n
	if err := r.SetPathParam("id4n", o.ID4N); err != nil {
		return err
	}

	if o.Interpolate != nil {

		// query param interpolate
		var qrInterpolate bool
		if o.Interpolate != nil {
			qrInterpolate = *o.Interpolate
		}
		qInterpolate := swag.FormatBool(qrInterpolate)
		if qInterpolate != "" {
			if err := r.SetQueryParam("interpolate", qInterpolate); err != nil {
				return err
			}
		}

	}

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID string
		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {
			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}

	}

	// path param type
	if err := r.SetPathParam("type", o.Type); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
