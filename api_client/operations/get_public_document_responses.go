// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api_models"
)

// GETPublicDocumentReader is a Reader for the GETPublicDocument structure.
type GETPublicDocumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GETPublicDocumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGETPublicDocumentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewGETPublicDocumentAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGETPublicDocumentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGETPublicDocumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGETPublicDocumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGETPublicDocumentMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewGETPublicDocumentNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewGETPublicDocumentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGETPublicDocumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGETPublicDocumentOK creates a GETPublicDocumentOK with default headers values
func NewGETPublicDocumentOK() *GETPublicDocumentOK {
	return &GETPublicDocumentOK{}
}

/*GETPublicDocumentOK handles this case with default header values.

OK
*/
type GETPublicDocumentOK struct {
	Payload *api_models.Document
}

func (o *GETPublicDocumentOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata][%d] getPublicDocumentOK  %+v", 200, o.Payload)
}

func (o *GETPublicDocumentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.Document)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETPublicDocumentAccepted creates a GETPublicDocumentAccepted with default headers values
func NewGETPublicDocumentAccepted() *GETPublicDocumentAccepted {
	return &GETPublicDocumentAccepted{}
}

/*GETPublicDocumentAccepted handles this case with default header values.

Accepted
*/
type GETPublicDocumentAccepted struct {
}

func (o *GETPublicDocumentAccepted) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata][%d] getPublicDocumentAccepted ", 202)
}

func (o *GETPublicDocumentAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGETPublicDocumentUnauthorized creates a GETPublicDocumentUnauthorized with default headers values
func NewGETPublicDocumentUnauthorized() *GETPublicDocumentUnauthorized {
	return &GETPublicDocumentUnauthorized{}
}

/*GETPublicDocumentUnauthorized handles this case with default header values.

Unauthorized
*/
type GETPublicDocumentUnauthorized struct {
	Payload *api_models.APIError
}

func (o *GETPublicDocumentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata][%d] getPublicDocumentUnauthorized  %+v", 401, o.Payload)
}

func (o *GETPublicDocumentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETPublicDocumentForbidden creates a GETPublicDocumentForbidden with default headers values
func NewGETPublicDocumentForbidden() *GETPublicDocumentForbidden {
	return &GETPublicDocumentForbidden{}
}

/*GETPublicDocumentForbidden handles this case with default header values.

Forbidden
*/
type GETPublicDocumentForbidden struct {
	Payload *api_models.APIError
}

func (o *GETPublicDocumentForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata][%d] getPublicDocumentForbidden  %+v", 403, o.Payload)
}

func (o *GETPublicDocumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETPublicDocumentNotFound creates a GETPublicDocumentNotFound with default headers values
func NewGETPublicDocumentNotFound() *GETPublicDocumentNotFound {
	return &GETPublicDocumentNotFound{}
}

/*GETPublicDocumentNotFound handles this case with default header values.

Not Found
*/
type GETPublicDocumentNotFound struct {
	Payload *api_models.APIError
}

func (o *GETPublicDocumentNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata][%d] getPublicDocumentNotFound  %+v", 404, o.Payload)
}

func (o *GETPublicDocumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETPublicDocumentMethodNotAllowed creates a GETPublicDocumentMethodNotAllowed with default headers values
func NewGETPublicDocumentMethodNotAllowed() *GETPublicDocumentMethodNotAllowed {
	return &GETPublicDocumentMethodNotAllowed{}
}

/*GETPublicDocumentMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type GETPublicDocumentMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *GETPublicDocumentMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata][%d] getPublicDocumentMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GETPublicDocumentMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETPublicDocumentNotAcceptable creates a GETPublicDocumentNotAcceptable with default headers values
func NewGETPublicDocumentNotAcceptable() *GETPublicDocumentNotAcceptable {
	return &GETPublicDocumentNotAcceptable{}
}

/*GETPublicDocumentNotAcceptable handles this case with default header values.

Not Acceptable
*/
type GETPublicDocumentNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *GETPublicDocumentNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata][%d] getPublicDocumentNotAcceptable  %+v", 406, o.Payload)
}

func (o *GETPublicDocumentNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETPublicDocumentUnsupportedMediaType creates a GETPublicDocumentUnsupportedMediaType with default headers values
func NewGETPublicDocumentUnsupportedMediaType() *GETPublicDocumentUnsupportedMediaType {
	return &GETPublicDocumentUnsupportedMediaType{}
}

/*GETPublicDocumentUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type GETPublicDocumentUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *GETPublicDocumentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata][%d] getPublicDocumentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GETPublicDocumentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETPublicDocumentInternalServerError creates a GETPublicDocumentInternalServerError with default headers values
func NewGETPublicDocumentInternalServerError() *GETPublicDocumentInternalServerError {
	return &GETPublicDocumentInternalServerError{}
}

/*GETPublicDocumentInternalServerError handles this case with default header values.

Internal Server Error
*/
type GETPublicDocumentInternalServerError struct {
	Payload *api_models.APIError
}

func (o *GETPublicDocumentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata][%d] getPublicDocumentInternalServerError  %+v", 500, o.Payload)
}

func (o *GETPublicDocumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
