// Code generated by go-swagger; DO NOT EDIT.

package history

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api/models"
)

// UpdateItemVisibilityReader is a Reader for the UpdateItemVisibility structure.
type UpdateItemVisibilityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateItemVisibilityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateItemVisibilityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewUpdateItemVisibilityAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateItemVisibilityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateItemVisibilityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateItemVisibilityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateItemVisibilityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewUpdateItemVisibilityMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewUpdateItemVisibilityNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateItemVisibilityConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewUpdateItemVisibilityUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateItemVisibilityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateItemVisibilityOK creates a UpdateItemVisibilityOK with default headers values
func NewUpdateItemVisibilityOK() *UpdateItemVisibilityOK {
	return &UpdateItemVisibilityOK{}
}

/*UpdateItemVisibilityOK handles this case with default header values.

OK
*/
type UpdateItemVisibilityOK struct {
	Payload *api_models.HistoryItem
}

func (o *UpdateItemVisibilityOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility][%d] updateItemVisibilityOK  %+v", 200, o.Payload)
}

func (o *UpdateItemVisibilityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.HistoryItem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemVisibilityAccepted creates a UpdateItemVisibilityAccepted with default headers values
func NewUpdateItemVisibilityAccepted() *UpdateItemVisibilityAccepted {
	return &UpdateItemVisibilityAccepted{}
}

/*UpdateItemVisibilityAccepted handles this case with default header values.

Accepted
*/
type UpdateItemVisibilityAccepted struct {
}

func (o *UpdateItemVisibilityAccepted) Error() string {
	return fmt.Sprintf("[PUT /api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility][%d] updateItemVisibilityAccepted ", 202)
}

func (o *UpdateItemVisibilityAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateItemVisibilityBadRequest creates a UpdateItemVisibilityBadRequest with default headers values
func NewUpdateItemVisibilityBadRequest() *UpdateItemVisibilityBadRequest {
	return &UpdateItemVisibilityBadRequest{}
}

/*UpdateItemVisibilityBadRequest handles this case with default header values.

Bad Request
*/
type UpdateItemVisibilityBadRequest struct {
	Payload *api_models.APIError
}

func (o *UpdateItemVisibilityBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility][%d] updateItemVisibilityBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateItemVisibilityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemVisibilityUnauthorized creates a UpdateItemVisibilityUnauthorized with default headers values
func NewUpdateItemVisibilityUnauthorized() *UpdateItemVisibilityUnauthorized {
	return &UpdateItemVisibilityUnauthorized{}
}

/*UpdateItemVisibilityUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateItemVisibilityUnauthorized struct {
	Payload *api_models.APIError
}

func (o *UpdateItemVisibilityUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility][%d] updateItemVisibilityUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateItemVisibilityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemVisibilityForbidden creates a UpdateItemVisibilityForbidden with default headers values
func NewUpdateItemVisibilityForbidden() *UpdateItemVisibilityForbidden {
	return &UpdateItemVisibilityForbidden{}
}

/*UpdateItemVisibilityForbidden handles this case with default header values.

Forbidden
*/
type UpdateItemVisibilityForbidden struct {
	Payload *api_models.APIError
}

func (o *UpdateItemVisibilityForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility][%d] updateItemVisibilityForbidden  %+v", 403, o.Payload)
}

func (o *UpdateItemVisibilityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemVisibilityNotFound creates a UpdateItemVisibilityNotFound with default headers values
func NewUpdateItemVisibilityNotFound() *UpdateItemVisibilityNotFound {
	return &UpdateItemVisibilityNotFound{}
}

/*UpdateItemVisibilityNotFound handles this case with default header values.

Not Found
*/
type UpdateItemVisibilityNotFound struct {
	Payload *api_models.APIError
}

func (o *UpdateItemVisibilityNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility][%d] updateItemVisibilityNotFound  %+v", 404, o.Payload)
}

func (o *UpdateItemVisibilityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemVisibilityMethodNotAllowed creates a UpdateItemVisibilityMethodNotAllowed with default headers values
func NewUpdateItemVisibilityMethodNotAllowed() *UpdateItemVisibilityMethodNotAllowed {
	return &UpdateItemVisibilityMethodNotAllowed{}
}

/*UpdateItemVisibilityMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type UpdateItemVisibilityMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *UpdateItemVisibilityMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility][%d] updateItemVisibilityMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateItemVisibilityMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemVisibilityNotAcceptable creates a UpdateItemVisibilityNotAcceptable with default headers values
func NewUpdateItemVisibilityNotAcceptable() *UpdateItemVisibilityNotAcceptable {
	return &UpdateItemVisibilityNotAcceptable{}
}

/*UpdateItemVisibilityNotAcceptable handles this case with default header values.

Not Acceptable
*/
type UpdateItemVisibilityNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *UpdateItemVisibilityNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility][%d] updateItemVisibilityNotAcceptable  %+v", 406, o.Payload)
}

func (o *UpdateItemVisibilityNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemVisibilityConflict creates a UpdateItemVisibilityConflict with default headers values
func NewUpdateItemVisibilityConflict() *UpdateItemVisibilityConflict {
	return &UpdateItemVisibilityConflict{}
}

/*UpdateItemVisibilityConflict handles this case with default header values.

Conflict
*/
type UpdateItemVisibilityConflict struct {
	Payload *api_models.APIError
}

func (o *UpdateItemVisibilityConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility][%d] updateItemVisibilityConflict  %+v", 409, o.Payload)
}

func (o *UpdateItemVisibilityConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemVisibilityUnsupportedMediaType creates a UpdateItemVisibilityUnsupportedMediaType with default headers values
func NewUpdateItemVisibilityUnsupportedMediaType() *UpdateItemVisibilityUnsupportedMediaType {
	return &UpdateItemVisibilityUnsupportedMediaType{}
}

/*UpdateItemVisibilityUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type UpdateItemVisibilityUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *UpdateItemVisibilityUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility][%d] updateItemVisibilityUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateItemVisibilityUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemVisibilityInternalServerError creates a UpdateItemVisibilityInternalServerError with default headers values
func NewUpdateItemVisibilityInternalServerError() *UpdateItemVisibilityInternalServerError {
	return &UpdateItemVisibilityInternalServerError{}
}

/*UpdateItemVisibilityInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateItemVisibilityInternalServerError struct {
	Payload *api_models.APIError
}

func (o *UpdateItemVisibilityInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility][%d] updateItemVisibilityInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateItemVisibilityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
