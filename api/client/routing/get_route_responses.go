// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api/models"
)

// GETRouteReader is a Reader for the GETRoute structure.
type GETRouteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GETRouteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGETRouteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewGETRouteAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGETRouteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGETRouteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGETRouteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGETRouteMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewGETRouteNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewGETRouteUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGETRouteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGETRouteOK creates a GETRouteOK with default headers values
func NewGETRouteOK() *GETRouteOK {
	return &GETRouteOK{}
}

/*GETRouteOK handles this case with default header values.

OK
*/
type GETRouteOK struct {
	Payload *api_models.Route
}

func (o *GETRouteOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/route/{type}][%d] getRouteOK  %+v", 200, o.Payload)
}

func (o *GETRouteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.Route)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETRouteAccepted creates a GETRouteAccepted with default headers values
func NewGETRouteAccepted() *GETRouteAccepted {
	return &GETRouteAccepted{}
}

/*GETRouteAccepted handles this case with default header values.

Accepted
*/
type GETRouteAccepted struct {
}

func (o *GETRouteAccepted) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/route/{type}][%d] getRouteAccepted ", 202)
}

func (o *GETRouteAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGETRouteUnauthorized creates a GETRouteUnauthorized with default headers values
func NewGETRouteUnauthorized() *GETRouteUnauthorized {
	return &GETRouteUnauthorized{}
}

/*GETRouteUnauthorized handles this case with default header values.

Unauthorized
*/
type GETRouteUnauthorized struct {
	Payload *api_models.APIError
}

func (o *GETRouteUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/route/{type}][%d] getRouteUnauthorized  %+v", 401, o.Payload)
}

func (o *GETRouteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETRouteForbidden creates a GETRouteForbidden with default headers values
func NewGETRouteForbidden() *GETRouteForbidden {
	return &GETRouteForbidden{}
}

/*GETRouteForbidden handles this case with default header values.

Forbidden
*/
type GETRouteForbidden struct {
	Payload *api_models.APIError
}

func (o *GETRouteForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/route/{type}][%d] getRouteForbidden  %+v", 403, o.Payload)
}

func (o *GETRouteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETRouteNotFound creates a GETRouteNotFound with default headers values
func NewGETRouteNotFound() *GETRouteNotFound {
	return &GETRouteNotFound{}
}

/*GETRouteNotFound handles this case with default header values.

Not Found
*/
type GETRouteNotFound struct {
	Payload *api_models.APIError
}

func (o *GETRouteNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/route/{type}][%d] getRouteNotFound  %+v", 404, o.Payload)
}

func (o *GETRouteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETRouteMethodNotAllowed creates a GETRouteMethodNotAllowed with default headers values
func NewGETRouteMethodNotAllowed() *GETRouteMethodNotAllowed {
	return &GETRouteMethodNotAllowed{}
}

/*GETRouteMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type GETRouteMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *GETRouteMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/route/{type}][%d] getRouteMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GETRouteMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETRouteNotAcceptable creates a GETRouteNotAcceptable with default headers values
func NewGETRouteNotAcceptable() *GETRouteNotAcceptable {
	return &GETRouteNotAcceptable{}
}

/*GETRouteNotAcceptable handles this case with default header values.

Not Acceptable
*/
type GETRouteNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *GETRouteNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/route/{type}][%d] getRouteNotAcceptable  %+v", 406, o.Payload)
}

func (o *GETRouteNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETRouteUnsupportedMediaType creates a GETRouteUnsupportedMediaType with default headers values
func NewGETRouteUnsupportedMediaType() *GETRouteUnsupportedMediaType {
	return &GETRouteUnsupportedMediaType{}
}

/*GETRouteUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type GETRouteUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *GETRouteUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/route/{type}][%d] getRouteUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GETRouteUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETRouteInternalServerError creates a GETRouteInternalServerError with default headers values
func NewGETRouteInternalServerError() *GETRouteInternalServerError {
	return &GETRouteInternalServerError{}
}

/*GETRouteInternalServerError handles this case with default header values.

Internal Server Error
*/
type GETRouteInternalServerError struct {
	Payload *api_models.APIError
}

func (o *GETRouteInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/routingfiles/{id4n}/route/{type}][%d] getRouteInternalServerError  %+v", 500, o.Payload)
}

func (o *GETRouteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
