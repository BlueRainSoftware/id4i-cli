// Code generated by go-swagger; DO NOT EDIT.

package history

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new history API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for history API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddItem adds history item

Add a new history item
*/
func (a *Client) AddItem(params *AddItemParams, authInfo runtime.ClientAuthInfoWriter) (*AddItemOK, *AddItemCreated, *AddItemAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addItem",
		Method:             "POST",
		PathPattern:        "/api/v1/history/{id4n}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *AddItemOK:
		return value, nil, nil, nil
	case *AddItemCreated:
		return nil, value, nil, nil
	case *AddItemAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
FilteredList lists history

Lists the history of a GUID
*/
func (a *Client) FilteredList(params *FilteredListParams, authInfo runtime.ClientAuthInfoWriter) (*FilteredListOK, *FilteredListAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilteredListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "filteredList",
		Method:             "GET",
		PathPattern:        "/api/v1/history/{id4n}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FilteredListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *FilteredListOK:
		return value, nil, nil
	case *FilteredListAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
List ds e p r e c a t e d list history

DEPRECATED - please use filteredList with organization parameter to achieve the same functionality
*/
func (a *Client) List(params *ListParams, authInfo runtime.ClientAuthInfoWriter) (*ListOK, *ListAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list",
		Method:             "GET",
		PathPattern:        "/api/v1/history/{id4n}/{organizationId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListOK:
		return value, nil, nil
	case *ListAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
RetrieveItem Gets history item
*/
func (a *Client) RetrieveItem(params *RetrieveItemParams, authInfo runtime.ClientAuthInfoWriter) (*RetrieveItemOK, *RetrieveItemAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retrieveItem",
		Method:             "GET",
		PathPattern:        "/api/v1/history/{id4n}/{organizationId}/{sequenceId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RetrieveItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RetrieveItemOK:
		return value, nil, nil
	case *RetrieveItemAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
UpdateItem updates history item
*/
func (a *Client) UpdateItem(params *UpdateItemParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateItemOK, *UpdateItemNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateItem",
		Method:             "PATCH",
		PathPattern:        "/api/v1/history/{id4n}/{organizationId}/{sequenceId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateItemOK:
		return value, nil, nil
	case *UpdateItemNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
UpdateItemVisibility sets history item visibility
*/
func (a *Client) UpdateItemVisibility(params *UpdateItemVisibilityParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateItemVisibilityOK, *UpdateItemVisibilityAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateItemVisibilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateItemVisibility",
		Method:             "PUT",
		PathPattern:        "/api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateItemVisibilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateItemVisibilityOK:
		return value, nil, nil
	case *UpdateItemVisibilityAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
