{
  "swagger" : "2.0",
  "info" : {
    "description" : "ID4i HTTP API",
    "version" : "0.9.5-SNAPSHOT",
    "title" : "ID4i API",
    "termsOfService" : "http://id4i.de",
    "contact" : {
      "name" : "BlueRain Software GmbH & Co. KG",
      "url" : "http://bluerain.de",
      "email" : "info@bluerain.de"
    },
    "license" : {
      "name" : "MIT",
      "url" : "https://opensource.org/licenses/MIT"
    },
    "x-logo" : {
      "backgroundColor" : "#FAFAFA",
      "url" : "/static/logo.png"
    }
  },
  "host" : "backend.id4i.de",
  "basePath" : "/",
  "tags" : [ {
    "name" : "Accounts",
    "description" : "User accounts allows people to register for ID4i and login. All permissions and roles for interactive ID4i usage (as opposed to machine-to-machine interactions) are attached to Organizations and User Accounts. The API allows users to register, verify their registration, login and reset their passwords."
  }, {
    "name" : "Alias",
    "description" : "Guid Alias Controller"
  }, {
    "name" : "Api Keys",
    "description" : "Api Key Controller"
  }, {
    "name" : "Auditing",
    "description" : "Auditing services allow to review changes made by users or api keys. Changelog messages can be resolved as plain text or formatted message with parameters."
  }, {
    "name" : "Billing",
    "description" : "Billing Controller"
  }, {
    "name" : "Collections",
    "description" : "Collection Controller"
  }, {
    "name" : "Guids",
    "description" : "Guid Alias Controller"
  }, {
    "name" : "History",
    "description" : "Allows to retrieve a GUID's history and to publish new history items."
  }, {
    "name" : "Images",
    "description" : "Services can use images stored with public visibility. This API allows you to retrieve the stored image by ID."
  }, {
    "name" : "Meta Information",
    "description" : "App Info Controller"
  }, {
    "name" : "Organizations",
    "description" : "Country Controller"
  }, {
    "name" : "Public Services",
    "description" : "Go Controller"
  }, {
    "name" : "Routing",
    "description" : "Routing Controller"
  }, {
    "name" : "Storage",
    "description" : "Document Storage Controller"
  }, {
    "name" : "Transfer",
    "description" : "Id 4n Transfer Controller"
  }, {
    "name" : "WhoIs",
    "description" : "Who Is Controller"
  } ],
  "consumes" : [ "application/xml", "application/json" ],
  "produces" : [ "application/xml", "application/json" ],
  "paths" : {
    "/account/password" : {
      "post" : {
        "tags" : [ "Accounts" ],
        "summary" : "Request password reset",
        "description" : "Requesting a reset for a new password. ",
        "operationId" : "requestPasswordReset",
        "parameters" : [ {
          "in" : "body",
          "name" : "resetRequest",
          "description" : "Contains the required information to request a new password.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PasswordResetRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SimpleMessageResponse"
            }
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Accounts" ],
        "summary" : "Verify password reset",
        "description" : "Setting a new password and verifying the request to set the password.",
        "operationId" : "verifyPasswordReset",
        "parameters" : [ {
          "in" : "body",
          "name" : "verificationRequest",
          "description" : "Contains the new password and the verification token to set the new password.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PasswordResetVerificationRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SimpleMessageResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "deprecated" : false
      }
    },
    "/account/registration" : {
      "post" : {
        "tags" : [ "Accounts" ],
        "summary" : "Register user",
        "description" : "Registering a new user.",
        "operationId" : "registerUser",
        "parameters" : [ {
          "in" : "body",
          "name" : "userRegistration",
          "description" : "The user information about the new created user.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserRegistrationRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/UserRegistrationResponse"
            }
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Accounts" ],
        "summary" : "Complete registration",
        "description" : "Completing a registration e.g. for invited users. Finish registration with a username and a password.",
        "operationId" : "completeRegistration",
        "parameters" : [ {
          "in" : "body",
          "name" : "completeRegistration",
          "description" : "Contains the verification token, the username and the initial password.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CompleteUserRegistrationRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "deprecated" : false
      }
    },
    "/account/verification" : {
      "post" : {
        "tags" : [ "Accounts" ],
        "summary" : "Verify registration",
        "description" : "Verifies a new user registration.",
        "operationId" : "verifyUserRegistration",
        "parameters" : [ {
          "in" : "body",
          "name" : "token",
          "description" : "The token for user verification.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RegistrationVerificationTokenPresentation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "deprecated" : false
      }
    },
    "/api/v1/apikeys" : {
      "get" : {
        "tags" : [ "Api Keys" ],
        "summary" : "Find API key by organization",
        "description" : "Finding all API key assigned to the specified organization in a paginated manner.",
        "operationId" : "listAllApiKeysOfOrganization",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "organizationId",
          "in" : "query",
          "description" : "The namespace of the organization to search in.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedApiKeyResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "Api Keys" ],
        "summary" : "Create API key",
        "description" : "Creation of a new API key.",
        "operationId" : "createNewApiKey",
        "parameters" : [ {
          "in" : "body",
          "name" : "creationRequest",
          "description" : "API key to be created.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApiKeyCreationRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ApiKeyPresentation"
            }
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/apikeys/privileges" : {
      "get" : {
        "tags" : [ "Api Keys" ],
        "summary" : "List all privileges",
        "description" : "Listing all possible API key privileges.",
        "operationId" : "listAllApiKeyPrivileges",
        "parameters" : [ {
          "name" : "id4nConcerning",
          "in" : "query",
          "description" : "id4nConcerning",
          "required" : false,
          "type" : "boolean",
          "allowEmptyValue" : false
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ApiKeyPrivilegeInfoResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/apikeys/{key}" : {
      "get" : {
        "tags" : [ "Api Keys" ],
        "summary" : "Show API key",
        "description" : "Showing the details of an API key.",
        "operationId" : "getApiKey",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The API key to show.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ApiKeyPresentation"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Api Keys" ],
        "summary" : "Update API keys",
        "description" : "API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.",
        "operationId" : "updateApiKey",
        "parameters" : [ {
          "in" : "body",
          "name" : "apiKeyChange",
          "description" : "The new values to apply.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApiKeyChangeRequest"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "The API key to be updated.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Api Keys" ],
        "summary" : "Delete API key",
        "description" : "Deletion of an API key.",
        "operationId" : "deleteApiKey",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The API key to delete.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/apikeys/{key}/privileges" : {
      "get" : {
        "tags" : [ "Api Keys" ],
        "summary" : "List privileges",
        "operationId" : "listApiKeyPrivileges",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "key",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ApiKeyPrivilegePaginatedResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "Api Keys" ],
        "summary" : "Add privilege",
        "operationId" : "addApiKeyPrivilege",
        "parameters" : [ {
          "in" : "body",
          "name" : "addApiKeyPrivilegeRequest",
          "description" : "addApiKeyPrivilegeRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AddApiKeyPrivilegeRequest"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "key",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Api Keys" ],
        "summary" : "Remove privilege",
        "operationId" : "removeApiKeyPrivilege",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "key",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "removeApiKeyPrivilegeRequest",
          "description" : "removeApiKeyPrivilegeRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RemoveApiKeyPrivilegeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/apikeys/{key}/privileges/{privilege}/id4ns" : {
      "get" : {
        "tags" : [ "Api Keys" ],
        "summary" : "ID4ns of a privilege",
        "description" : "Listing ID4ns of a id4n concerning privilege",
        "operationId" : "listId4ns",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "key",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "privilege",
          "in" : "path",
          "description" : "privilege",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Id4nPresentationPaginatedResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "Api Keys" ],
        "summary" : "Add ID4ns of a privilege",
        "operationId" : "addApiKeyPrivilegeForId4ns",
        "parameters" : [ {
          "in" : "body",
          "name" : "id4ns",
          "description" : "id4ns",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ListOfId4ns"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "key",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "privilege",
          "in" : "path",
          "description" : "privilege",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Api Keys" ],
        "summary" : "Remove id4ns of a privilege",
        "operationId" : "removeApiKeyPrivilegeForId4ns",
        "parameters" : [ {
          "in" : "body",
          "name" : "id4ns",
          "description" : "id4ns",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ListOfId4ns"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "key",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "privilege",
          "in" : "path",
          "description" : "privilege",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/billing/{organizationId}" : {
      "get" : {
        "tags" : [ "Billing" ],
        "summary" : "Get billing amount of services for a given organization",
        "operationId" : "getSumForOrganization",
        "parameters" : [ {
          "name" : "fromDate",
          "in" : "query",
          "description" : "Billing start date",
          "required" : false,
          "type" : "string",
          "format" : "date-time",
          "allowEmptyValue" : false,
          "x-example" : "2018-06-05"
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The organization to compute the billing information for",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "Billing end date",
          "required" : false,
          "type" : "string",
          "format" : "date-time",
          "allowEmptyValue" : false,
          "x-example" : "2018-06-06"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ServiceCosts"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/billing/{organizationId}/positions" : {
      "get" : {
        "tags" : [ "Billing" ],
        "summary" : "Get billing positions for a given organization",
        "operationId" : "getPositionsForOrganization",
        "parameters" : [ {
          "name" : "fromDate",
          "in" : "query",
          "description" : "Billing start date",
          "required" : false,
          "type" : "string",
          "format" : "date-time",
          "allowEmptyValue" : false,
          "x-example" : "2018-06-05"
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The organization to compute the billing information for",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "Billing end date",
          "required" : false,
          "type" : "string",
          "format" : "date-time",
          "allowEmptyValue" : false,
          "x-example" : "2018-06-06"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/BillingPosition"
              }
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/changelog/organization/{organizationId}/" : {
      "get" : {
        "tags" : [ "Auditing" ],
        "summary" : "List change log entries of an organization",
        "description" : "Listing change log entries of the specified organization id.",
        "operationId" : "listOrganizationChangeLog",
        "parameters" : [ {
          "name" : "fromDate",
          "in" : "query",
          "description" : "From date time as UTC Date-Time format",
          "required" : false,
          "type" : "string",
          "format" : "date-time",
          "x-example" : "2018-05-10T10:05:10.690Z"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "messageMimeType",
          "in" : "query",
          "description" : "The Mime-type for the message format that should be returned. e.g. 'text/plain' or 'text/mustache' ",
          "required" : false,
          "type" : "string",
          "default" : "text/mustache",
          "allowEmptyValue" : false,
          "x-example" : "text/plain"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The namespace identifying the organization whose change log entries are to be listed",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "To date time as UTC Date-Time format",
          "required" : false,
          "type" : "string",
          "format" : "date-time",
          "x-example" : "2018-05-11T01:01:01.690Z"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedChangeLogEntryResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/collections" : {
      "post" : {
        "tags" : [ "Collections" ],
        "summary" : "Create collection",
        "operationId" : "createCollection",
        "parameters" : [ {
          "in" : "body",
          "name" : "createInfo",
          "description" : "createInfo",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateCollectionRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Id4n"
            }
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/collections/{id4n}" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "Find collection",
        "operationId" : "findCollection",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/GuidCollection"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Collections" ],
        "summary" : "Delete collection",
        "operationId" : "deleteCollection",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "patch" : {
        "tags" : [ "Collections" ],
        "summary" : "Update collection",
        "description" : "Update collection changing only the given values",
        "operationId" : "updateCollection",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "request",
          "description" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GuidCollection"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/collections/{id4n}/elements" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "List contents of the collection",
        "operationId" : "listElementsOfCollection",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedGuidResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "Collections" ],
        "summary" : "Add elements to collection",
        "operationId" : "addElementsToCollection",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "listOfGuids",
          "description" : "listOfGuids",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ListOfId4ns"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Collections" ],
        "summary" : "Remove elements from collection",
        "operationId" : "removeElementsFromCollection",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "listOfGuids",
          "description" : "listOfGuids",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ListOfId4ns"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/countries" : {
      "get" : {
        "tags" : [ "Organizations" ],
        "summary" : "List countries",
        "operationId" : "listCountries",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedCountryResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/documents/{id4n}" : {
      "get" : {
        "tags" : [ "Storage" ],
        "summary" : "List documents",
        "description" : "Listing all documents of an id4n",
        "operationId" : "listAllDocuments",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Filter by owner organization",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedDocumentResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/documents/{id4n}/{organizationId}" : {
      "get" : {
        "tags" : [ "Storage" ],
        "summary" : "List organization specific documents",
        "description" : "Listing documents of an id4n seen by a specified organization",
        "operationId" : "listDocuments",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Filter by owner organization",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedDocumentResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Storage" ],
        "summary" : "Create an empty document for an id4n",
        "description" : "The document is created empty, mime-type defaults to text/plain",
        "operationId" : "createDocument",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "content",
          "in" : "formData",
          "description" : "content",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Document"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/documents/{id4n}/{organizationId}/{fileName}" : {
      "get" : {
        "tags" : [ "Storage" ],
        "summary" : "Read document contents",
        "operationId" : "readDocument",
        "parameters" : [ {
          "name" : "fileName",
          "in" : "path",
          "description" : "fileName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Storage" ],
        "summary" : "Delete a document",
        "operationId" : "deleteDocument",
        "parameters" : [ {
          "name" : "fileName",
          "in" : "path",
          "description" : "fileName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/documents/{id4n}/{organizationId}/{fileName}/metadata" : {
      "get" : {
        "tags" : [ "Storage" ],
        "summary" : "Retrieve a document (meta-data only, no content)",
        "operationId" : "getDocument",
        "parameters" : [ {
          "name" : "fileName",
          "in" : "path",
          "description" : "fileName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Document"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "patch" : {
        "tags" : [ "Storage" ],
        "summary" : "Update a document",
        "operationId" : "updateDocumentMetadata",
        "parameters" : [ {
          "in" : "body",
          "name" : "document",
          "description" : "document",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DocumentUpdate"
          }
        }, {
          "name" : "fileName",
          "in" : "path",
          "description" : "fileName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Document"
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/guids" : {
      "post" : {
        "tags" : [ "Guids" ],
        "summary" : "Create GUID(s)",
        "description" : "Creating one or more GUIDs with a specified length.",
        "operationId" : "createGuid",
        "parameters" : [ {
          "in" : "body",
          "name" : "createGUIDInfo",
          "description" : "GUID creation model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateGuidRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ListOfId4ns"
            }
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/guids/withoutCollection" : {
      "get" : {
        "tags" : [ "Guids" ],
        "summary" : "Retrieve GUIDs not in any collection",
        "operationId" : "getGuidsWithoutCollection",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "organizationId",
          "in" : "query",
          "description" : "The namespace of the organization to search GUIDs for",
          "required" : true,
          "type" : "string",
          "allowEmptyValue" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedResponseOfGuid"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/guids/{id4n}" : {
      "get" : {
        "tags" : [ "Guids" ],
        "summary" : "Retrieve GUID information",
        "operationId" : "getGuid",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "The GUID number",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Guid"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "patch" : {
        "tags" : [ "Guids" ],
        "summary" : "Change GUID information.",
        "description" : "Allows ownership transfer.",
        "operationId" : "updateGuid",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "The GUID number",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "request",
          "description" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Guid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/history/{id4n}" : {
      "get" : {
        "tags" : [ "History" ],
        "summary" : "List history",
        "description" : "Lists the history of a GUID",
        "operationId" : "filteredList",
        "parameters" : [ {
          "name" : "fromDate",
          "in" : "query",
          "description" : "From date time as UTC Date-Time format",
          "required" : false,
          "type" : "string",
          "format" : "date-time",
          "x-example" : "2018-05-10T10:05:10.690Z"
        }, {
          "name" : "id4n",
          "in" : "path",
          "description" : "GUID to retrieve the history for",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "includePrivate",
          "in" : "query",
          "description" : "Also return private history entries",
          "required" : false,
          "type" : "boolean",
          "default" : true,
          "allowEmptyValue" : false
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "organization",
          "in" : "query",
          "description" : "Show only entries created by one of the given organizations. This parameter can be used multiple times.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : false
        }, {
          "name" : "qualifier",
          "in" : "query",
          "description" : "Show only entries matching one of the given history item qualifiers (additional property de.id4i.history.item.qualifier). This parameter can be used multiple times.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "allowEmptyValue" : false
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "To date time as UTC Date-Time format",
          "required" : false,
          "type" : "string",
          "format" : "date-time",
          "x-example" : "2018-05-11T01:01:01.690Z"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Show only entries matching one of the given history item types. This parameter can be used multiple times.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "CREATED", "DESTROYED", "RECYCLED", "SHIPMENT_PREPARED", "STORED", "RETRIEVED_FROM_STORAGE", "PACKAGED", "DISPATCHED", "RECEIVED", "REPROCESSING_STARTED", "REPROCESSING_STEP_STARTED", "REPROCESSING_STEP_CANCELLED", "REPROCESSING_STEP_FINISHED", "REPROCESSING_CANCELLED", "REPROCESSING_FINISHED", "DISASSEMBLED", "MAINTENANCE_STARTED", "MAINTENANCE_STEP_STARTED", "MAINTENANCE_STEP_CANCELLED", "MAINTENANCE_STEP_FINISHED", "MAINTENANCE_CANCELLED", "MAINTENANCE_FINISHED", "PRODUCTION_STARTED", "PRODUCTION_CANCELLED", "PRODUCTION_FINISHED", "PRODUCTION_STEP_STARTED", "PRODUCTION_STEP_CANCELLED", "PRODUCTION_STEP_FINISHED", "QUALITY_CHECK_PERFORMED" ]
          },
          "collectionFormat" : "multi",
          "allowEmptyValue" : false,
          "enum" : [ "CREATED", "DESTROYED", "RECYCLED", "SHIPMENT_PREPARED", "STORED", "RETRIEVED_FROM_STORAGE", "PACKAGED", "DISPATCHED", "RECEIVED", "REPROCESSING_STARTED", "REPROCESSING_STEP_STARTED", "REPROCESSING_STEP_CANCELLED", "REPROCESSING_STEP_FINISHED", "REPROCESSING_CANCELLED", "REPROCESSING_FINISHED", "DISASSEMBLED", "MAINTENANCE_STARTED", "MAINTENANCE_STEP_STARTED", "MAINTENANCE_STEP_CANCELLED", "MAINTENANCE_STEP_FINISHED", "MAINTENANCE_CANCELLED", "MAINTENANCE_FINISHED", "PRODUCTION_STARTED", "PRODUCTION_CANCELLED", "PRODUCTION_FINISHED", "PRODUCTION_STEP_STARTED", "PRODUCTION_STEP_CANCELLED", "PRODUCTION_STEP_FINISHED", "QUALITY_CHECK_PERFORMED" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedHistoryItemResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "History" ],
        "summary" : "Add history item",
        "description" : "Add a new history item",
        "operationId" : "addItem",
        "parameters" : [ {
          "in" : "body",
          "name" : "historyItem",
          "description" : "The history item to publish",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/HistoryItem"
          }
        }, {
          "name" : "id4n",
          "in" : "path",
          "description" : "GUID to retrieve the history for",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/history/{id4n}/{organizationId}" : {
      "get" : {
        "tags" : [ "History" ],
        "summary" : "DEPRECATED - List history",
        "description" : "DEPRECATED - please use filteredList with organization parameter to achieve the same functionality",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "GUID to retrieve the history for",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "includePrivate",
          "in" : "query",
          "description" : "Also return private history entries",
          "required" : false,
          "type" : "boolean",
          "default" : true,
          "allowEmptyValue" : false
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedHistoryItemResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : true
      }
    },
    "/api/v1/history/{id4n}/{organizationId}/{sequenceId}" : {
      "get" : {
        "tags" : [ "History" ],
        "summary" : "Get history item",
        "operationId" : "retrieveItem",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "GUID to retrieve the history for",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sequenceId",
          "in" : "path",
          "description" : "sequenceId",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedHistoryItemResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "patch" : {
        "tags" : [ "History" ],
        "summary" : "Update history item",
        "operationId" : "updateItem",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "GUID to retrieve the history for",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sequenceId",
          "in" : "path",
          "description" : "sequenceId",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "update",
          "description" : "update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/HistoryItemUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/HistoryItem"
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility" : {
      "put" : {
        "tags" : [ "History" ],
        "summary" : "Set history item visibility",
        "operationId" : "updateItemVisibility",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "GUID to retrieve the history for",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sequenceId",
          "in" : "path",
          "description" : "sequenceId",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "visibility",
          "description" : "History item visibility restrictions",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Visibility"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/HistoryItem"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/id4ns/{id4n}" : {
      "get" : {
        "tags" : [ "Guids" ],
        "summary" : "Retrieve ID4n information",
        "description" : "Retrieving basic information about an ID like the type and the creation time.",
        "operationId" : "getId4n",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "The ID to resolve to",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Id4nPresentation"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/id4ns/{id4n}/alias" : {
      "get" : {
        "tags" : [ "Alias", "Guids" ],
        "summary" : "Get all aliases for the given GUID or Collection.",
        "description" : "Looks up the alias for each alias type (group and single) and returns a map of all aliases found.",
        "operationId" : "getGuidAliases",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "The GUID or Collection to operate on",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/id4ns/{id4n}/alias/{aliasType}" : {
      "post" : {
        "tags" : [ "Alias", "Guids" ],
        "summary" : "Add alias for GUID or Collection",
        "description" : "Adds or replaces aliases for single ID4ns (alias type item and mapp) or groups of ID4ns (alias types gtin, ean and article)",
        "operationId" : "addGuidAlias",
        "parameters" : [ {
          "in" : "body",
          "name" : "alias",
          "description" : "The alias to add or update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GuidAlias"
          }
        }, {
          "name" : "aliasType",
          "in" : "path",
          "description" : "Alias type, see the corresponding API model",
          "required" : true,
          "type" : "string",
          "enum" : [ "gtin", "article", "mapp", "item", "rfid", "tracking", "eclass", "unspsc", "product", "material", "reference" ]
        }, {
          "name" : "id4n",
          "in" : "path",
          "description" : "The GUID or Collection to operate on",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Alias", "Guids" ],
        "summary" : "Remove aliases from GUID or Collection",
        "description" : "Remove the alias of the given type",
        "operationId" : "removeGuidAlias",
        "parameters" : [ {
          "name" : "aliasType",
          "in" : "path",
          "description" : "Alias type, see the corresponding API model",
          "required" : true,
          "type" : "string",
          "enum" : [ "gtin", "article", "mapp", "item", "rfid", "tracking", "eclass", "unspsc", "product", "material", "reference" ]
        }, {
          "name" : "id4n",
          "in" : "path",
          "description" : "The GUID or Collection to operate on",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/id4ns/{id4n}/collections" : {
      "get" : {
        "tags" : [ "Guids" ],
        "summary" : "Retrieve collections of an ID",
        "description" : "Retrieving all owned or holding collections the specified id4n is assigned to.",
        "operationId" : "getCollections",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "The ID which the collections should contain",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "organizationId",
          "in" : "query",
          "description" : "The organization holding the collections.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedGuidCollectionResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/info" : {
      "get" : {
        "tags" : [ "Meta Information" ],
        "summary" : "Retrieve version information about ID4i",
        "description" : "Retrieving version information about ID4i.",
        "operationId" : "applicationInfo",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AppInfoPresentation"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/microstorage/{id4n}/{organization}" : {
      "get" : {
        "tags" : [ "Storage" ],
        "summary" : "Read data from microstorage",
        "operationId" : "readFromMicrostorage",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "organization",
          "in" : "path",
          "description" : "organization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Storage" ],
        "summary" : "Write data to microstorage",
        "operationId" : "writeToMicrostorage",
        "consumes" : [ "*/*" ],
        "parameters" : [ {
          "name" : "Content-Length",
          "in" : "header",
          "description" : "Content-Length",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "Content-Type",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "body",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "byte"
          }
        }, {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "organization",
          "in" : "path",
          "description" : "organization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/organizations" : {
      "post" : {
        "tags" : [ "Organizations" ],
        "summary" : "Create organization",
        "description" : "Creating a new organization.",
        "operationId" : "createOrganization",
        "parameters" : [ {
          "in" : "body",
          "name" : "organization",
          "description" : "Organization to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Organization"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Organization"
            }
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/organizations/{organizationId}" : {
      "get" : {
        "tags" : [ "Organizations" ],
        "summary" : "Find organization by id/namespace",
        "description" : "Returns a single organization.",
        "operationId" : "findOrganization",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The namespace of the organization to be retrieved.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Organization"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Organizations" ],
        "summary" : "Update organization",
        "operationId" : "updateOrganization",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The namespace of the organization to be updated.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "organizationUpdate",
          "description" : "Updated organization object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OrganizationUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Organization"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Organizations" ],
        "summary" : "Delete organization",
        "operationId" : "deleteOrganization",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The namespace of the organization to be deleted.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/organizations/{organizationId}/addresses/billing" : {
      "get" : {
        "tags" : [ "Organizations" ],
        "summary" : "Retrieve billing address",
        "operationId" : "findOrganizationBillingAddress",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/OrganizationAddress"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Organizations" ],
        "summary" : "Store billing address",
        "operationId" : "updateOrganizationBillingAddress",
        "parameters" : [ {
          "in" : "body",
          "name" : "addressResource",
          "description" : "addressResource",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OrganizationAddress"
          }
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/OrganizationAddress"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Organizations" ],
        "summary" : "Remove billing address",
        "operationId" : "deleteOrganizationBillingAddress",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/organizations/{organizationId}/addresses/default" : {
      "get" : {
        "tags" : [ "Organizations" ],
        "summary" : "Retrieve address",
        "operationId" : "findOrganizationAddress",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/OrganizationAddress"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Organizations" ],
        "summary" : "Store address",
        "operationId" : "updateOrganizationAddress",
        "parameters" : [ {
          "in" : "body",
          "name" : "addressResource",
          "description" : "addressResource",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OrganizationAddress"
          }
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/OrganizationAddress"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/organizations/{organizationId}/collections" : {
      "get" : {
        "tags" : [ "Collections", "Organizations" ],
        "summary" : "Get collections of organization",
        "description" : "Retrieving all collections of an organization in a paginated manner.",
        "operationId" : "getAllCollectionsOfOrganization",
        "parameters" : [ {
          "name" : "label",
          "in" : "query",
          "description" : "Filter by this label",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : false
        }, {
          "name" : "labelPrefix",
          "in" : "query",
          "description" : "Filter by this label prefix",
          "required" : false,
          "type" : "string",
          "maxLength" : 2147483647,
          "minLength" : 1,
          "allowEmptyValue" : false
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The namespace of the organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by this type",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : false,
          "enum" : [ "ROUTING_COLLECTION", "LOGISTIC_COLLECTION", "LABELLED_COLLECTION" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedGuidCollection"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/organizations/{organizationId}/logo" : {
      "post" : {
        "tags" : [ "Organizations" ],
        "summary" : "Update organization logo",
        "description" : "Updating an organization logo using a multipart file upload.",
        "operationId" : "setOrganizationLogo",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "file",
          "in" : "formData",
          "description" : "An image containing the new logo.",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The namespace of the organization where the logo should be updated.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PublicImagePresentation"
            }
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Organizations" ],
        "summary" : "Delete organization logo",
        "operationId" : "deleteOrganizationLogo",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The namespace of the organization where the logo should be deleted.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/organizations/{organizationId}/partner" : {
      "get" : {
        "tags" : [ "Organizations" ],
        "summary" : "Get partners of an organization",
        "description" : "Listing partners in a paginated manner.",
        "operationId" : "getPartnerOrganizations",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The namespace of the organization to query partner organizations",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedResponseOfPartnerOrganization"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Organizations" ],
        "summary" : "Add partner",
        "description" : "Adding a partner organization. If the given organization is already a partner the result will be state 200 too.",
        "operationId" : "addPartnerOrganization",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The namespace of the organization",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "request",
          "description" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AddPartnerRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Organizations" ],
        "summary" : "Remove partner",
        "description" : "Removing a partner organization",
        "operationId" : "removePartnerOrganization",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The namespace of the organization",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "request",
          "description" : "request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RemovePartnerRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/organizations/{organizationId}/privileges" : {
      "get" : {
        "tags" : [ "Organizations" ],
        "summary" : "List my privileges",
        "description" : "Listing all privileges of the current user/APIKey of the specified organization.",
        "operationId" : "getOrganizationPrivileges",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The namespace of the organization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/organizations/{organizationId}/roles" : {
      "get" : {
        "tags" : [ "Accounts", "Organizations" ],
        "summary" : "List users and their roles",
        "description" : "Listing users and their roles in a paginated manner.",
        "operationId" : "getAllOrganizationRoles",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedUserRolesResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/organizations/{organizationId}/users" : {
      "get" : {
        "tags" : [ "Accounts", "Organizations" ],
        "summary" : "Find users in organization",
        "description" : "Finding users in the specified organization in a paginated manner.",
        "operationId" : "getUsersOfOrganization",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedUserPresentationResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/organizations/{organizationId}/users/invite" : {
      "post" : {
        "tags" : [ "Accounts", "Organizations" ],
        "summary" : "Invite Users",
        "operationId" : "inviteUsers",
        "parameters" : [ {
          "in" : "body",
          "name" : "invitationList",
          "description" : "invitationList",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OrganizationUserInvitationListRequest"
          }
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The namespace of the organization where users should be invited",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/organizations/{organizationId}/users/{username}/roles" : {
      "get" : {
        "tags" : [ "Accounts", "Organizations" ],
        "summary" : "Get user roles by username",
        "operationId" : "getUserRoles",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The namespace of the organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedStringResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "Accounts", "Organizations" ],
        "summary" : "Add role(s) to user",
        "operationId" : "addUserRoles",
        "parameters" : [ {
          "in" : "body",
          "name" : "changeRoleRequest",
          "description" : "changeRoleRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ChangeRoleRequest"
          }
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The namespace of the organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Accounts", "Organizations" ],
        "summary" : "Remove role(s) from user",
        "operationId" : "removeUserRoles",
        "parameters" : [ {
          "in" : "body",
          "name" : "changeRoleRequest",
          "description" : "changeRoleRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ChangeRoleRequest"
          }
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "The namespace of the organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/public/documents/{id4n}" : {
      "get" : {
        "tags" : [ "Public Services", "Storage" ],
        "summary" : "List public documents",
        "description" : "Listing all public documents of an id4n",
        "operationId" : "listAllPublicDocuments",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "organizationId",
          "in" : "query",
          "description" : "organizationId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Filter by owner organization",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedDocumentResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/public/documents/{id4n}/{organizationId}/{fileName}" : {
      "get" : {
        "tags" : [ "Public Services", "Storage" ],
        "summary" : "Read public document contents",
        "operationId" : "readPublicDocument",
        "parameters" : [ {
          "name" : "fileName",
          "in" : "path",
          "description" : "fileName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata" : {
      "get" : {
        "tags" : [ "Public Services", "Storage" ],
        "summary" : "Retrieve a public document (meta-data only, no content)",
        "operationId" : "getPublicDocument",
        "parameters" : [ {
          "name" : "fileName",
          "in" : "path",
          "description" : "fileName",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "organizationId",
          "in" : "path",
          "description" : "organizationId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Document"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/public/history/{id4n}" : {
      "get" : {
        "tags" : [ "Public Services" ],
        "summary" : "Shows the public history of the given GUID",
        "description" : "Only contains public history items",
        "operationId" : "listPublicHistory",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "GUID to retrieve the history for",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedHistoryItemResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/public/image/{imageID}" : {
      "get" : {
        "tags" : [ "Images", "Public Services" ],
        "summary" : "Resolve image",
        "operationId" : "resolveImageUsingGET",
        "parameters" : [ {
          "name" : "imageID",
          "in" : "path",
          "description" : "The id of the image to be resolved.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/public/organizations/{organizationId}" : {
      "get" : {
        "tags" : [ "Public Services" ],
        "summary" : "Read public organization information",
        "operationId" : "readOrganizationInfo",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "Organization ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Organization"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/public/routes/{id4n}" : {
      "get" : {
        "tags" : [ "Public Services" ],
        "summary" : "Retrieve all public routes for a GUID",
        "operationId" : "getRoutes",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "interpolate",
          "in" : "query",
          "description" : "interpolate",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "type",
          "required" : true,
          "type" : "string",
          "default" : "web"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Route"
              }
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/roles" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "List roles",
        "description" : "Listing of roles.",
        "operationId" : "listAllRoles",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "privilege",
          "in" : "query",
          "description" : "If specified the roles will be filtered containing that privilege.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RoleResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/routingfiles/{id4n}" : {
      "get" : {
        "tags" : [ "Routing" ],
        "summary" : "Retrieve routing file",
        "operationId" : "getRoutingFile",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "organizationId",
          "in" : "query",
          "description" : "organizationId",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RoutingFile"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Routing" ],
        "summary" : "Store routing file",
        "operationId" : "updateRoutingFile",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "rfr",
          "description" : "rfr",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoutingFileRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/routingfiles/{id4n}/route/{type}" : {
      "get" : {
        "tags" : [ "Routing" ],
        "summary" : "Retrieve current route of a GUID (or ID4N)",
        "operationId" : "getRoute",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "interpolate",
          "in" : "query",
          "description" : "interpolate",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "privateRoutes",
          "in" : "query",
          "description" : "privateRoutes",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "publicRoutes",
          "in" : "query",
          "description" : "publicRoutes",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "The type of route you want to have",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Route"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/routingfiles/{id4n}/routes/{type}" : {
      "get" : {
        "tags" : [ "Routing" ],
        "summary" : "Retrieve all routes of a GUID (or ID4N)",
        "operationId" : "getAllRoutes",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "interpolate",
          "in" : "query",
          "description" : "interpolate",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "organizationId",
          "in" : "query",
          "description" : "organizationId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "The type of route you want to have",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Route"
              }
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/search/guids" : {
      "get" : {
        "tags" : [ "Alias" ],
        "summary" : "Search for GUIDs by alias",
        "operationId" : "searchByAlias",
        "parameters" : [ {
          "name" : "alias",
          "in" : "query",
          "description" : "The alias to search for",
          "required" : true,
          "type" : "string",
          "allowEmptyValue" : false
        }, {
          "name" : "aliasType",
          "in" : "query",
          "description" : "Alias type type to search for",
          "required" : true,
          "type" : "string",
          "allowEmptyValue" : false,
          "enum" : [ "gtin", "article", "mapp", "item", "rfid", "tracking", "eclass", "unspsc", "product", "material", "reference" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedGuidResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/search/guids/aliases/types" : {
      "get" : {
        "tags" : [ "Alias" ],
        "summary" : "List all supported alias types",
        "description" : "Retrieve this list to find out all alias types to use with alias search and change operations",
        "operationId" : "getGuidAliasTypes",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "gtin", "article", "mapp", "item", "rfid", "tracking", "eclass", "unspsc", "product", "material", "reference" ]
              }
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/transfers/{id4n}/receiveInfo" : {
      "put" : {
        "tags" : [ "Transfer" ],
        "summary" : "Transfer a GUID or collection, obtaining it (i.e. becoming the holder) and if allowed also taking ownership",
        "description" : "Taking ownership can be forbidden by a previous owner. See methods prepare and getInfo",
        "operationId" : "receive",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "This ID4N identifies the object to take hold of",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "request",
          "description" : "Required information to receive an id4n object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TransferReceiveInfo"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/transfers/{id4n}/sendInfo" : {
      "get" : {
        "tags" : [ "Transfer" ],
        "summary" : "Show transfer preparation information",
        "operationId" : "getSendInfo",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "The ID4N to retrieve information about",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/TransferSendInfo"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Transfer" ],
        "summary" : "Prepare an object for transfer",
        "operationId" : "prepare",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "The ID4N to prepare for transfer",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "request",
          "description" : "Transfer preparation status",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TransferSendInfo"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/user/organizations" : {
      "get" : {
        "tags" : [ "Accounts", "Organizations" ],
        "summary" : "Retrieve organizations of user",
        "operationId" : "getOrganizationsOfUser",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "role",
          "in" : "query",
          "description" : "role",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedOrganizationResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/users" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Find users",
        "operationId" : "findUsers",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum count of returned elements",
          "required" : false,
          "type" : "integer",
          "maximum" : 1000.0,
          "exclusiveMaximum" : false,
          "minimum" : 0.0,
          "exclusiveMinimum" : false,
          "format" : "int32",
          "x-example" : 100
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Start with the n-th element",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "usernamePrefix",
          "in" : "query",
          "description" : "Find users starting with this prefix.",
          "required" : true,
          "type" : "string",
          "pattern" : "[a-zA-Z0-9_.-]{2,50}",
          "x-example" : "a.v"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PaginatedUserPresentationResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/api/v1/users/{username}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Find by username",
        "operationId" : "findUserByUsername",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/UserPresentation"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "deprecated" : false
      }
    },
    "/go/{guid}" : {
      "get" : {
        "tags" : [ "Public Services" ],
        "summary" : "Forward",
        "description" : "Forwarding to the designated route defined in the routing,",
        "operationId" : "go",
        "parameters" : [ {
          "name" : "guid",
          "in" : "path",
          "description" : "guid",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "deprecated" : false
      }
    },
    "/login" : {
      "post" : {
        "tags" : [ "Accounts" ],
        "description" : "ID4i API Login",
        "operationId" : "login",
        "parameters" : [ {
          "in" : "body",
          "name" : "account-credentials",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AccountCredentials"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/whois/{id4n}" : {
      "get" : {
        "tags" : [ "Public Services", "WhoIs" ],
        "summary" : "Resolve owner of id4n",
        "operationId" : "resolveWhoIsEntry",
        "parameters" : [ {
          "name" : "id4n",
          "in" : "path",
          "description" : "id4n",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/WhoIsResponse"
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiError"
            }
          }
        },
        "deprecated" : false
      }
    }
  },
  "securityDefinitions" : {
    "Authorization" : {
      "type" : "apiKey",
      "name" : "Authorization",
      "in" : "header"
    }
  },
  "definitions" : {
    "AccountCredentials" : {
      "type" : "object",
      "properties" : {
        "login" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        }
      },
      "title" : "AccountCredentials"
    },
    "AddApiKeyPrivilegeRequest" : {
      "type" : "object",
      "required" : [ "privilege" ],
      "properties" : {
        "privilege" : {
          "type" : "string"
        }
      },
      "title" : "AddApiKeyPrivilegeRequest",
      "xml" : {
        "name" : "add-apikey-privilege",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "AddPartnerRequest" : {
      "type" : "object",
      "required" : [ "organizationId" ],
      "properties" : {
        "organizationId" : {
          "type" : "string",
          "example" : "org.acme",
          "description" : "The namespace of the partner organization to add"
        }
      },
      "title" : "AddPartnerRequest",
      "xml" : {
        "name" : "add-partner-request",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "ApiError" : {
      "type" : "object",
      "required" : [ "code", "errorId", "errorList", "message" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "enum" : [ "ERR_REGISTRATION_VERIFICATION_NO_TOKEN", "ERR_REGISTRATION_VERIFICATION_INVALID_TOKEN", "ERR_REGISTRATION_VERIFICATION_EXPIRED_TOKEN", "ERR_AUTHENTICATION_NO_TOKEN", "ERR_AUTHENTICATION_INVALID_TOKEN", "ERR_AUTHENTICATION_EXPIRED_TOKEN", "ERR_AUTHENTICATION_FAILED", "ERR_AUTHORIZATION_MISSING_PRIVILEGES", "ERR_AUTHORIZATION_FORBIDDEN", "ERR_AUTHORIZATION_REQUIRE_USER", "ERR_INPUT_VALIDATION_FAILED", "ERR_FIELD_INPUT_VALIDATION_FAILED", "ERR_VALIDATION_CONSTRAINT_FAILED", "ERR_INPUT_NOT_READABLE", "ERR_INVALID_INPUT_PARAMETER", "ERR_GUID_CREATION", "ERR_INVALID_ID4N_OBJECT_TYPE", "ERR_MISSING_BILLING_INFORMATION", "ERR_COLLECTION_UPDATE_DENIED", "ERR_ENTITY_NOT_FOUND", "ERR_ENTITY_TOO_BIG", "ERR_DUPLICATE", "ERR_INTERNAL", "ERR_UNKNOWN", "ERR_INVALID_ORGANIZATION_USERROLE", "ERR_ORGANIZATION_ROLE_INCONSISTENCY", "ERR_ORGANIZATION_NOT_DELETABLE", "ERR_USER_ALREADY_IN_ORGANIZATION", "ERR_USER_INVITATION_NEEDS_MINIMUM_ONE_ROLE", "ERR_USER_INVITATION_SPECIFY_EMAIL_OR_USERNAME", "ERR_USER_DEACTIVATED", "ERR_LANGUAGE_NOT_SUPPORTED", "ERR_EMAIL_MISSING_TEMPLATE_PARAM", "ERR_EMAIL_TEMPLATE_NOT_AVAILABLE", "ERR_EMAIL_PREPARATION_FAILED", "ERR_IMAGE_CONVERSION", "ERR_UPLOAD_TOO_LARGE", "ERR_INVALID_ALIAS_TYPE", "ERR_INVALID_URI_TEMPLATE", "ERR_INVALID_URI_TEMPLATE_VARIABLE", "ERR_INVALID_NAMESPACE", "ERR_NAMESPACE_ALREADY_EXISTS", "ERR_INSECURE_PASSWORD", "ERR_TRANSFER_DENIED", "ERR_INVALID_PHYSICAL_STATE", "ERR_INVALID_HISTORY_PROPERTY_NAMESPACE", "ERR_INVALID_HISTORY_PROPERTY_VALUE", "ERR_ORGA_CANNOT_BE_OWN_PARTNER" ]
        },
        "errorList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "message" : {
          "type" : "string"
        },
        "errorId" : {
          "type" : "string",
          "format" : "uuid"
        }
      },
      "title" : "ApiError"
    },
    "ApiKeyChangeRequest" : {
      "type" : "object",
      "required" : [ "newLabel" ],
      "properties" : {
        "active" : {
          "type" : "boolean"
        },
        "newLabel" : {
          "type" : "string",
          "minLength" : 5,
          "maxLength" : 50
        }
      },
      "title" : "ApiKeyChangeRequest"
    },
    "ApiKeyCreationRequest" : {
      "type" : "object",
      "required" : [ "label", "organizationId", "secret" ],
      "properties" : {
        "label" : {
          "type" : "string",
          "minLength" : 5,
          "maxLength" : 50
        },
        "organizationId" : {
          "type" : "string",
          "example" : "de.acme"
        },
        "secret" : {
          "type" : "string",
          "minLength" : 10,
          "maxLength" : 500
        }
      },
      "title" : "ApiKeyCreationRequest"
    },
    "ApiKeyPresentation" : {
      "type" : "object",
      "required" : [ "active", "createdAt", "createdBy", "key", "label", "organizationId" ],
      "properties" : {
        "active" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this API key is active"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1517232722,
          "description" : "The UTC unix timestamp of when this api key has been created"
        },
        "createdBy" : {
          "type" : "string",
          "example" : "user123"
        },
        "key" : {
          "type" : "string",
          "example" : "39978f49-6ff1-4147-bf0f-9910185084b7",
          "description" : "The api key identifier"
        },
        "label" : {
          "type" : "string",
          "example" : "My Api Key",
          "description" : "The label / name of the api key"
        },
        "organizationId" : {
          "type" : "string",
          "example" : "de.acme",
          "description" : "The organization namespace this api key belongs to"
        }
      },
      "title" : "ApiKeyPresentation"
    },
    "ApiKeyPrivilege" : {
      "type" : "object",
      "required" : [ "id4nAssociated", "privilege" ],
      "properties" : {
        "id4nAssociated" : {
          "type" : "boolean"
        },
        "privilege" : {
          "type" : "string"
        }
      },
      "title" : "ApiKeyPrivilege"
    },
    "ApiKeyPrivilegeInfo" : {
      "type" : "object",
      "required" : [ "id4nAssociated", "name" ],
      "properties" : {
        "allowsBillableOperations" : {
          "type" : "boolean"
        },
        "helpText" : {
          "type" : "string"
        },
        "id4nAssociated" : {
          "type" : "boolean"
        },
        "name" : {
          "type" : "string"
        }
      },
      "title" : "ApiKeyPrivilegeInfo"
    },
    "ApiKeyPrivilegeInfoResponse" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiKeyPrivilegeInfo"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "ApiKeyPrivilegeInfoResponse",
      "xml" : {
        "name" : "apikey-privilege-info-response",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "ApiKeyPrivilegePaginatedResponse" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiKeyPrivilege"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "ApiKeyPrivilegePaginatedResponse",
      "xml" : {
        "name" : "apikey-privilege-response",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "AppInfoPresentation" : {
      "type" : "object",
      "properties" : {
        "branch" : {
          "type" : "string"
        },
        "commitTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "productionMode" : {
          "type" : "boolean"
        },
        "revision" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        }
      },
      "title" : "AppInfoPresentation",
      "xml" : {
        "name" : "api-info",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "BillingPosition" : {
      "type" : "object",
      "required" : [ "amount", "count", "description", "service", "singlePrice", "sum", "unit" ],
      "properties" : {
        "amount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "count" : {
          "type" : "number"
        },
        "description" : {
          "type" : "string"
        },
        "service" : {
          "type" : "string"
        },
        "singlePrice" : {
          "type" : "number"
        },
        "sum" : {
          "type" : "number"
        },
        "unit" : {
          "type" : "string"
        }
      },
      "title" : "BillingPosition"
    },
    "ChangeLogEntry" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "e100123",
          "description" : "The unique id of the changelog entry",
          "readOnly" : true
        },
        "message" : {
          "type" : "string",
          "example" : "User {{&user}} has changed the title of {{&object}}",
          "description" : "The message as template or rendered as plain text",
          "readOnly" : true
        },
        "messageProperties" : {
          "type" : "object",
          "example" : {
            "user" : {
              "value" : "a.vratny",
              "type" : "user"
            },
            "object" : "nearly every object"
          },
          "description" : "The values of the properties in the message. May be nested as object with a value field ",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1517232722,
          "description" : "The UTC unix timestamp when this change occurred",
          "readOnly" : true
        }
      },
      "title" : "ChangeLogEntry",
      "description" : "A changelog entry"
    },
    "ChangeRoleRequest" : {
      "type" : "object",
      "properties" : {
        "roles" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "title" : "ChangeRoleRequest"
    },
    "CompleteUserRegistrationRequest" : {
      "type" : "object",
      "required" : [ "password", "username", "verificationToken" ],
      "properties" : {
        "verificationToken" : {
          "type" : "string"
        },
        "username" : {
          "type" : "string",
          "pattern" : "[a-zA-Z0-9_.-]{6,50}"
        },
        "password" : {
          "type" : "string",
          "minLength" : 8,
          "maxLength" : 99
        }
      },
      "title" : "CompleteUserRegistrationRequest"
    },
    "Country" : {
      "type" : "object",
      "required" : [ "code", "name" ],
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      },
      "title" : "Country"
    },
    "CreateCollectionRequest" : {
      "type" : "object",
      "required" : [ "length", "organizationId", "type" ],
      "properties" : {
        "label" : {
          "type" : "string",
          "minLength" : 5,
          "maxLength" : 128
        },
        "organizationId" : {
          "type" : "string",
          "example" : "de.acme"
        },
        "length" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 6.0,
          "maximum" : 255.0,
          "exclusiveMinimum" : false,
          "exclusiveMaximum" : false
        },
        "type" : {
          "type" : "string",
          "enum" : [ "ROUTING_COLLECTION", "LOGISTIC_COLLECTION", "LABELLED_COLLECTION" ]
        }
      },
      "title" : "CreateCollectionRequest"
    },
    "CreateGuidRequest" : {
      "type" : "object",
      "required" : [ "count", "length", "organizationId" ],
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "The total number of GUIDs to create",
          "minimum" : 1.0,
          "maximum" : 1000.0,
          "exclusiveMinimum" : false,
          "exclusiveMaximum" : false
        },
        "length" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 40,
          "description" : "The charactersequence length of the GUID",
          "minimum" : 7.0,
          "maximum" : 255.0,
          "exclusiveMinimum" : false,
          "exclusiveMaximum" : false
        },
        "organizationId" : {
          "type" : "string",
          "example" : "de.acme",
          "description" : "The namespace of the organization where the generated GUIDs should be assigned."
        }
      },
      "title" : "CreateGuidRequest",
      "xml" : {
        "name" : "create-guid-request",
        "attribute" : false,
        "wrapped" : false
      },
      "description" : "GUID creation information"
    },
    "Document" : {
      "type" : "object",
      "properties" : {
        "filename" : {
          "type" : "string",
          "example" : "publicInfo.pdf",
          "description" : "File Name"
        },
        "mimeType" : {
          "type" : "string",
          "example" : "text/plain",
          "description" : "Mime Type"
        },
        "ownerOrganizationId" : {
          "type" : "string",
          "example" : "de.bluerain",
          "description" : "The organization's namespace which owns the document",
          "readOnly" : true
        },
        "visibility" : {
          "description" : "Visibility configuration",
          "$ref" : "#/definitions/Visibility"
        }
      },
      "title" : "Document"
    },
    "DocumentUpdate" : {
      "type" : "object",
      "properties" : {
        "filename" : {
          "type" : "string",
          "example" : "publicInfo.pdf",
          "description" : "File Name"
        },
        "mimeType" : {
          "type" : "string",
          "example" : "text/plain",
          "description" : "Mime Type"
        },
        "visibility" : {
          "example" : true,
          "description" : "Visibility configuration",
          "$ref" : "#/definitions/VisibilityUpdate"
        }
      },
      "title" : "DocumentUpdate"
    },
    "Guid" : {
      "type" : "object",
      "properties" : {
        "createdTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1517232722,
          "description" : "The UTC unix timestamp of when this GUID has been created",
          "readOnly" : true
        },
        "holderOrganizationId" : {
          "type" : "string",
          "description" : "Organization namespace of the GUID holder",
          "readOnly" : true
        },
        "id4n" : {
          "type" : "string",
          "example" : "3THvgrWxqgTFC4",
          "description" : "The ID",
          "readOnly" : true
        },
        "ownerOrganizationId" : {
          "type" : "string",
          "description" : "Organization namespace of the GUID owner",
          "readOnly" : true
        },
        "physicalState" : {
          "type" : "string",
          "description" : "Physical attachment state of the GUID",
          "enum" : [ "UNATTACHED", "ATTACHED", "DETACHED" ]
        }
      },
      "title" : "Guid"
    },
    "GuidAlias" : {
      "type" : "object",
      "required" : [ "alias" ],
      "properties" : {
        "alias" : {
          "type" : "string",
          "example" : "alias",
          "description" : "An alias",
          "minLength" : 1,
          "maxLength" : 255
        }
      },
      "title" : "GuidAlias",
      "xml" : {
        "name" : "guid-alias",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "GuidCollection" : {
      "type" : "object",
      "properties" : {
        "createdTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The UTC unix timestamp of when this collection has been created",
          "readOnly" : true
        },
        "holderOrganizationId" : {
          "type" : "string",
          "description" : "Organization namespace of the holder of the collection"
        },
        "id4n" : {
          "type" : "string",
          "description" : "The ID",
          "readOnly" : true
        },
        "label" : {
          "type" : "string",
          "minLength" : 5,
          "maxLength" : 128
        },
        "ownerOrganizationId" : {
          "type" : "string",
          "description" : "Organization namespace of the collection owner",
          "readOnly" : true
        },
        "physicalState" : {
          "type" : "string",
          "description" : "Physical attachment state of the collection",
          "enum" : [ "UNATTACHED", "ATTACHED", "DETACHED" ]
        },
        "type" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "ROUTING_COLLECTION", "LOGISTIC_COLLECTION", "LABELLED_COLLECTION" ]
        }
      },
      "title" : "GuidCollection"
    },
    "HistoryItem" : {
      "type" : "object",
      "required" : [ "organizationId", "type" ],
      "properties" : {
        "additionalProperties" : {
          "type" : "object",
          "description" : "History items custom additional properties",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "organizationId" : {
          "type" : "string",
          "example" : "org.acme",
          "description" : "Originator of the history item"
        },
        "sequenceId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 9784,
          "description" : "Forms the primary key of the history item together with the GUID and the organizationId",
          "readOnly" : true
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1517232722,
          "description" : "History item timestamp",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "example" : "DISPATCHED",
          "description" : "Type of the history item",
          "enum" : [ "CREATED", "DESTROYED", "RECYCLED", "SHIPMENT_PREPARED", "STORED", "RETRIEVED_FROM_STORAGE", "PACKAGED", "DISPATCHED", "RECEIVED", "REPROCESSING_STARTED", "REPROCESSING_STEP_STARTED", "REPROCESSING_STEP_CANCELLED", "REPROCESSING_STEP_FINISHED", "REPROCESSING_CANCELLED", "REPROCESSING_FINISHED", "DISASSEMBLED", "MAINTENANCE_STARTED", "MAINTENANCE_STEP_STARTED", "MAINTENANCE_STEP_CANCELLED", "MAINTENANCE_STEP_FINISHED", "MAINTENANCE_CANCELLED", "MAINTENANCE_FINISHED", "PRODUCTION_STARTED", "PRODUCTION_CANCELLED", "PRODUCTION_FINISHED", "PRODUCTION_STEP_STARTED", "PRODUCTION_STEP_CANCELLED", "PRODUCTION_STEP_FINISHED", "QUALITY_CHECK_PERFORMED" ]
        },
        "visibility" : {
          "description" : "History item visibility restrictions",
          "$ref" : "#/definitions/Visibility"
        }
      },
      "title" : "HistoryItem",
      "description" : "GUID history item"
    },
    "HistoryItemUpdate" : {
      "type" : "object",
      "properties" : {
        "organizationId" : {
          "type" : "string",
          "example" : "de.acme",
          "description" : "New organization id displayed for this item. If given, must match the holder of GUID and the organization the history item is found under."
        },
        "visibility" : {
          "description" : "History item visibility restrictions",
          "$ref" : "#/definitions/Visibility"
        }
      },
      "title" : "HistoryItemUpdate",
      "xml" : {
        "name" : "history-item-update",
        "attribute" : false,
        "wrapped" : false
      },
      "description" : "GUID history item update (diff patch)"
    },
    "Id4n" : {
      "type" : "object",
      "properties" : {
        "id4n" : {
          "type" : "string",
          "example" : "3THvgrWxqgTFC4",
          "description" : "The ID"
        }
      },
      "title" : "Id4n",
      "xml" : {
        "name" : "id4n",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "Id4nPresentation" : {
      "type" : "object",
      "properties" : {
        "createdTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1517232722,
          "description" : "The UTC unix timestamp of when this ID has been created",
          "readOnly" : true
        },
        "holderOrganizationId" : {
          "type" : "string",
          "example" : "de.example",
          "description" : "Organization namespace of the holder of the ID",
          "readOnly" : true
        },
        "id4n" : {
          "type" : "string",
          "example" : "3THvgrWxqgTFC4",
          "description" : "The ID",
          "readOnly" : true
        },
        "label" : {
          "type" : "string",
          "readOnly" : true
        },
        "ownerOrganizationId" : {
          "type" : "string",
          "example" : "org.acme",
          "description" : "Organization namespace of the ID owner",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "description" : "The type of ID",
          "readOnly" : true,
          "enum" : [ "GUID", "ROUTING_COLLECTION", "LOGISTIC_COLLECTION", "LABELLED_COLLECTION" ]
        }
      },
      "title" : "Id4nPresentation",
      "xml" : {
        "name" : "id4n-presentation",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "Id4nPresentationPaginatedResponse" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Id4nPresentation"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "Id4nPresentationPaginatedResponse"
    },
    "ListOfId4ns" : {
      "type" : "object",
      "properties" : {
        "id4ns" : {
          "type" : "array",
          "description" : "A list of id4ns.",
          "items" : {
            "type" : "string"
          }
        }
      },
      "title" : "ListOfId4ns",
      "xml" : {
        "name" : "list-of-id4ns",
        "attribute" : false,
        "wrapped" : false
      },
      "description" : "A list of id4ns"
    },
    "Organization" : {
      "type" : "object",
      "required" : [ "name", "namespace" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 100,
          "description" : "The id of the organization ( Deprecated: Use namespace instead. )",
          "readOnly" : true
        },
        "logoURL" : {
          "type" : "string",
          "example" : "/api/v1/public/images/abcdef",
          "description" : "URL to a logo of the organization",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "example" : "ACME Inc.",
          "description" : "The name of the organization",
          "minLength" : 3,
          "maxLength" : 254
        },
        "namespace" : {
          "type" : "string",
          "example" : "de.acme",
          "description" : "The namespace of the organization",
          "minLength" : 3,
          "maxLength" : 255
        }
      },
      "title" : "Organization",
      "xml" : {
        "name" : "organization",
        "attribute" : false,
        "wrapped" : false
      },
      "description" : "An organization"
    },
    "OrganizationAddress" : {
      "type" : "object",
      "required" : [ "city", "countryCode", "firstname", "lastname", "postCode", "street" ],
      "properties" : {
        "companyName" : {
          "type" : "string",
          "example" : "ACME Inc.",
          "minLength" : 0,
          "maxLength" : 254
        },
        "firstname" : {
          "type" : "string",
          "example" : "Max",
          "minLength" : 0,
          "maxLength" : 255
        },
        "lastname" : {
          "type" : "string",
          "example" : "Muster",
          "minLength" : 0,
          "maxLength" : 255
        },
        "street" : {
          "type" : "string",
          "example" : "Examplestreet 1",
          "minLength" : 3,
          "maxLength" : 254
        },
        "postCode" : {
          "type" : "string",
          "example" : 12345,
          "minLength" : 2,
          "maxLength" : 40
        },
        "city" : {
          "type" : "string",
          "example" : "MyCity",
          "minLength" : 2,
          "maxLength" : 99
        },
        "countryCode" : {
          "type" : "string",
          "example" : "DE",
          "description" : "The ISO 3166 two-letter country code",
          "minLength" : 0,
          "maxLength" : 2
        },
        "countryName" : {
          "type" : "string",
          "example" : "Germany",
          "description" : "The country name",
          "readOnly" : true
        },
        "telephone" : {
          "type" : "string",
          "example" : "+49 8088 12345",
          "description" : "The telephone number e.g.",
          "minLength" : 0,
          "maxLength" : 99
        }
      },
      "title" : "OrganizationAddress",
      "xml" : {
        "name" : "organization-address",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "OrganizationUpdate" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "ACME Inc.",
          "description" : "The name of the organization",
          "minLength" : 3,
          "maxLength" : 254
        }
      },
      "title" : "OrganizationUpdate",
      "xml" : {
        "name" : "organization",
        "attribute" : false,
        "wrapped" : false
      },
      "description" : "An organization"
    },
    "OrganizationUserInvitation" : {
      "type" : "object",
      "required" : [ "roles" ],
      "properties" : {
        "email" : {
          "type" : "string"
        },
        "userName" : {
          "type" : "string"
        },
        "roles" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "title" : "OrganizationUserInvitation",
      "xml" : {
        "name" : "organization-user-invitation",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "OrganizationUserInvitationListRequest" : {
      "type" : "object",
      "required" : [ "invitations" ],
      "properties" : {
        "invitations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OrganizationUserInvitation"
          }
        }
      },
      "title" : "OrganizationUserInvitationListRequest",
      "xml" : {
        "name" : "organization-user-invitation-list-request",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "PaginatedApiKeyResponse" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiKeyPresentation"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedApiKeyResponse"
    },
    "PaginatedChangeLogEntryResponse" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ChangeLogEntry"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedChangeLogEntryResponse"
    },
    "PaginatedCountryResponse" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Country"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedCountryResponse",
      "xml" : {
        "name" : "paginated-country-response",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "PaginatedDocumentResponse" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Document"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedDocumentResponse",
      "xml" : {
        "name" : "paginated-document-response",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "PaginatedGuidCollection" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GuidCollection"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedGuidCollection",
      "xml" : {
        "name" : "paginated-guid-collection",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "PaginatedGuidCollectionResponse" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GuidCollection"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedGuidCollectionResponse",
      "xml" : {
        "name" : "paginated-guid-collection-response",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "PaginatedGuidResponse" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Guid"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedGuidResponse",
      "xml" : {
        "name" : "paginated-guid-response",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "PaginatedHistoryItemResponse" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/HistoryItem"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedHistoryItemResponse"
    },
    "PaginatedOrganizationResponse" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Organization"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedOrganizationResponse",
      "xml" : {
        "name" : "paginated-organization-response",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "PaginatedResponseOfApiKeyPresentation" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiKeyPresentation"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfApiKeyPresentation"
    },
    "PaginatedResponseOfApiKeyPrivilege" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiKeyPrivilege"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfApiKeyPrivilege"
    },
    "PaginatedResponseOfApiKeyPrivilegeInfo" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiKeyPrivilegeInfo"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfApiKeyPrivilegeInfo"
    },
    "PaginatedResponseOfChangeLogEntry" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ChangeLogEntry"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfChangeLogEntry"
    },
    "PaginatedResponseOfCountry" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Country"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfCountry"
    },
    "PaginatedResponseOfDocument" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Document"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfDocument"
    },
    "PaginatedResponseOfGuid" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Guid"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfGuid"
    },
    "PaginatedResponseOfGuidCollection" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GuidCollection"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfGuidCollection"
    },
    "PaginatedResponseOfHistoryItem" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/HistoryItem"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfHistoryItem"
    },
    "PaginatedResponseOfId4nPresentation" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Id4nPresentation"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfId4nPresentation"
    },
    "PaginatedResponseOfOrganization" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Organization"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfOrganization"
    },
    "PaginatedResponseOfPartnerOrganization" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PartnerOrganization"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfPartnerOrganization"
    },
    "PaginatedResponseOfRole" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Role"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfRole"
    },
    "PaginatedResponseOfUserPresentation" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserPresentation"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfUserPresentation"
    },
    "PaginatedResponseOfUserRoles" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserRoles"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfUserRoles"
    },
    "PaginatedResponseOfstring" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedResponseOfstring"
    },
    "PaginatedStringResponse" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedStringResponse",
      "xml" : {
        "name" : "paginated-string-response",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "PaginatedUserPresentationResponse" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserPresentation"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedUserPresentationResponse",
      "xml" : {
        "name" : "paginated-user-response",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "PaginatedUserRolesResponse" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserRoles"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "PaginatedUserRolesResponse"
    },
    "PartnerOrganization" : {
      "type" : "object",
      "properties" : {
        "logoURL" : {
          "type" : "string",
          "example" : "/api/v1/public/images/abcdef",
          "description" : "URL to a logo of the organization",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "example" : "ACME Inc.",
          "description" : "The name of the organization",
          "readOnly" : true,
          "minLength" : 3,
          "maxLength" : 254
        },
        "namespace" : {
          "type" : "string",
          "example" : "de.acme",
          "description" : "The namespace of the organization",
          "readOnly" : true,
          "minLength" : 3,
          "maxLength" : 255
        }
      },
      "title" : "PartnerOrganization",
      "xml" : {
        "name" : "partner-organization",
        "attribute" : false,
        "wrapped" : false
      },
      "description" : "A partner organization"
    },
    "PasswordResetRequest" : {
      "type" : "object",
      "required" : [ "username" ],
      "properties" : {
        "username" : {
          "type" : "string"
        }
      },
      "title" : "PasswordResetRequest"
    },
    "PasswordResetVerificationRequest" : {
      "type" : "object",
      "required" : [ "password", "token" ],
      "properties" : {
        "password" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        }
      },
      "title" : "PasswordResetVerificationRequest"
    },
    "PublicImagePresentation" : {
      "type" : "object",
      "properties" : {
        "uri" : {
          "type" : "string",
          "example" : "/api/v1/public/image/bc671c63-4a9b-46e7-8c59-9bbe1917e6cc",
          "description" : "The uri/url of the image",
          "readOnly" : true
        }
      },
      "title" : "PublicImagePresentation",
      "xml" : {
        "name" : "public-image",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "RegistrationVerificationTokenPresentation" : {
      "type" : "object",
      "required" : [ "token" ],
      "properties" : {
        "token" : {
          "type" : "string"
        }
      },
      "title" : "RegistrationVerificationTokenPresentation"
    },
    "RemoveApiKeyPrivilegeRequest" : {
      "type" : "object",
      "required" : [ "privilege" ],
      "properties" : {
        "privilege" : {
          "type" : "string"
        }
      },
      "title" : "RemoveApiKeyPrivilegeRequest",
      "xml" : {
        "name" : "remove-apikey-privilege",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "RemovePartnerRequest" : {
      "type" : "object",
      "required" : [ "organizationId" ],
      "properties" : {
        "organizationId" : {
          "type" : "string",
          "example" : "org.acme",
          "description" : "The namespace of the partner organization to remove"
        }
      },
      "title" : "RemovePartnerRequest",
      "xml" : {
        "name" : "remove-partner-request",
        "attribute" : false,
        "wrapped" : false
      }
    },
    "Role" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "privileges" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "title" : "Role"
    },
    "RoleResponse" : {
      "type" : "object",
      "required" : [ "elements", "limit", "offset" ],
      "properties" : {
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Role"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "The number of returned elements"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Starting with the n-th element"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 200,
          "description" : "The total number of elements"
        }
      },
      "title" : "RoleResponse"
    },
    "Route" : {
      "type" : "object",
      "required" : [ "params", "public", "type" ],
      "properties" : {
        "params" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "priority" : {
          "type" : "integer",
          "format" : "int32"
        },
        "public" : {
          "type" : "boolean"
        },
        "type" : {
          "type" : "string"
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "title" : "Route"
    },
    "RoutingFile" : {
      "type" : "object",
      "required" : [ "routes" ],
      "properties" : {
        "options" : {
          "$ref" : "#/definitions/RoutingOptions"
        },
        "routes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Route"
          }
        }
      },
      "title" : "RoutingFile"
    },
    "RoutingFileRequest" : {
      "type" : "object",
      "required" : [ "routing" ],
      "properties" : {
        "routing" : {
          "$ref" : "#/definitions/RoutingFile"
        },
        "organizationId" : {
          "type" : "string"
        }
      },
      "title" : "RoutingFileRequest"
    },
    "RoutingOptions" : {
      "type" : "object",
      "properties" : {
        "deleteOutdatedRoutes" : {
          "type" : "boolean"
        }
      },
      "title" : "RoutingOptions"
    },
    "ServiceCosts" : {
      "type" : "object",
      "required" : [ "listing" ],
      "properties" : {
        "listing" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number"
          }
        }
      },
      "title" : "ServiceCosts"
    },
    "SimpleMessageResponse" : {
      "type" : "object",
      "required" : [ "message" ],
      "properties" : {
        "message" : {
          "type" : "string"
        }
      },
      "title" : "SimpleMessageResponse"
    },
    "TransferReceiveInfo" : {
      "type" : "object",
      "required" : [ "organizationId" ],
      "properties" : {
        "organizationId" : {
          "type" : "string",
          "example" : "de.id4i",
          "description" : "Organization to take the ownership of the ID. If the sender chose to keep the ownership, this organization becomes the holder. Otherwise, it becomes the new owner."
        }
      },
      "title" : "TransferReceiveInfo"
    },
    "TransferSendInfo" : {
      "type" : "object",
      "required" : [ "keepOwnership", "openForClaims", "recipientOrganizationIds" ],
      "properties" : {
        "holderOrganizationId" : {
          "type" : "string",
          "example" : "de.id4i",
          "description" : "The current holder of the object",
          "readOnly" : true
        },
        "keepOwnership" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Keep the public ownership while transferring the object"
        },
        "openForClaims" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Allow anyone who knows (or can scan) the ID4N to claim ownership of this object"
        },
        "ownerOrganizationId" : {
          "type" : "string",
          "example" : "de.bluerain",
          "description" : "The current publicly visible owner of the object",
          "readOnly" : true
        },
        "recipientOrganizationIds" : {
          "type" : "array",
          "example" : [ "de.acme", "com.porsche", "de.bluerain" ],
          "description" : "Allow only these organizations to obtain this object",
          "items" : {
            "type" : "string"
          }
        }
      },
      "title" : "TransferSendInfo"
    },
    "UserPresentation" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "name" : "id",
            "attribute" : false,
            "wrapped" : false
          }
        },
        "name" : {
          "type" : "string"
        }
      },
      "title" : "UserPresentation"
    },
    "UserRegistrationRequest" : {
      "type" : "object",
      "required" : [ "email", "password", "username" ],
      "properties" : {
        "username" : {
          "type" : "string",
          "pattern" : "[a-zA-Z0-9_.-]{6,50}"
        },
        "password" : {
          "type" : "string",
          "minLength" : 8,
          "maxLength" : 99
        },
        "email" : {
          "type" : "string"
        }
      },
      "title" : "UserRegistrationRequest"
    },
    "UserRegistrationResponse" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "email" : {
          "type" : "string"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "message" : {
          "type" : "string"
        },
        "username" : {
          "type" : "string"
        }
      },
      "title" : "UserRegistrationResponse"
    },
    "UserRoles" : {
      "type" : "object",
      "properties" : {
        "roles" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "user" : {
          "$ref" : "#/definitions/UserPresentation"
        }
      },
      "title" : "UserRoles"
    },
    "Visibility" : {
      "type" : "object",
      "properties" : {
        "public" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Document is publicly readable (if ID4N is owned by the same organization)"
        },
        "sharedOrganizationIds" : {
          "type" : "array",
          "example" : [ "de.acme", "com.porsche", "de.bluerain" ],
          "description" : "Document is readable by these organizations (independend of ID4N ownership)",
          "items" : {
            "type" : "string"
          }
        }
      },
      "title" : "Visibility"
    },
    "VisibilityUpdate" : {
      "type" : "object",
      "properties" : {
        "public" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Document is publicly readable (if ID4N is owned by the same organization)"
        },
        "sharedWithOrganizationIds" : {
          "type" : "array",
          "example" : [ "de.acme", "com.porsche", "de.bluerain" ],
          "description" : "Document is readable by these organizations (independend of ID4N ownership)",
          "items" : {
            "type" : "string"
          }
        }
      },
      "title" : "VisibilityUpdate"
    },
    "WhoIsResponse" : {
      "type" : "object",
      "properties" : {
        "aliases" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "organization" : {
          "$ref" : "#/definitions/Organization"
        },
        "organizationAddress" : {
          "$ref" : "#/definitions/OrganizationAddress"
        }
      },
      "title" : "WhoIsResponse",
      "xml" : {
        "name" : "who-is-response",
        "attribute" : false,
        "wrapped" : false
      }
    }
  }
}