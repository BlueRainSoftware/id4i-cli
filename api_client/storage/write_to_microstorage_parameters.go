// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewWriteToMicrostorageParams creates a new WriteToMicrostorageParams object
// with the default values initialized.
func NewWriteToMicrostorageParams() *WriteToMicrostorageParams {
	var ()
	return &WriteToMicrostorageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewWriteToMicrostorageParamsWithTimeout creates a new WriteToMicrostorageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewWriteToMicrostorageParamsWithTimeout(timeout time.Duration) *WriteToMicrostorageParams {
	var ()
	return &WriteToMicrostorageParams{

		timeout: timeout,
	}
}

// NewWriteToMicrostorageParamsWithContext creates a new WriteToMicrostorageParams object
// with the default values initialized, and the ability to set a context for a request
func NewWriteToMicrostorageParamsWithContext(ctx context.Context) *WriteToMicrostorageParams {
	var ()
	return &WriteToMicrostorageParams{

		Context: ctx,
	}
}

// NewWriteToMicrostorageParamsWithHTTPClient creates a new WriteToMicrostorageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewWriteToMicrostorageParamsWithHTTPClient(client *http.Client) *WriteToMicrostorageParams {
	var ()
	return &WriteToMicrostorageParams{
		HTTPClient: client,
	}
}

/*WriteToMicrostorageParams contains all the parameters to send to the API endpoint
for the write to microstorage operation typically these are written to a http.Request
*/
type WriteToMicrostorageParams struct {

	/*ContentLength
	  Content-Length

	*/
	ContentLength *int64
	/*ContentType
	  Content-Type

	*/
	ContentType *string
	/*Body
	  body

	*/
	Body strfmt.Base64
	/*ID4N
	  id4n

	*/
	ID4N string
	/*Organization
	  organization

	*/
	Organization string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the write to microstorage params
func (o *WriteToMicrostorageParams) WithTimeout(timeout time.Duration) *WriteToMicrostorageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the write to microstorage params
func (o *WriteToMicrostorageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the write to microstorage params
func (o *WriteToMicrostorageParams) WithContext(ctx context.Context) *WriteToMicrostorageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the write to microstorage params
func (o *WriteToMicrostorageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the write to microstorage params
func (o *WriteToMicrostorageParams) WithHTTPClient(client *http.Client) *WriteToMicrostorageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the write to microstorage params
func (o *WriteToMicrostorageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentLength adds the contentLength to the write to microstorage params
func (o *WriteToMicrostorageParams) WithContentLength(contentLength *int64) *WriteToMicrostorageParams {
	o.SetContentLength(contentLength)
	return o
}

// SetContentLength adds the contentLength to the write to microstorage params
func (o *WriteToMicrostorageParams) SetContentLength(contentLength *int64) {
	o.ContentLength = contentLength
}

// WithContentType adds the contentType to the write to microstorage params
func (o *WriteToMicrostorageParams) WithContentType(contentType *string) *WriteToMicrostorageParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the write to microstorage params
func (o *WriteToMicrostorageParams) SetContentType(contentType *string) {
	o.ContentType = contentType
}

// WithBody adds the body to the write to microstorage params
func (o *WriteToMicrostorageParams) WithBody(body strfmt.Base64) *WriteToMicrostorageParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the write to microstorage params
func (o *WriteToMicrostorageParams) SetBody(body strfmt.Base64) {
	o.Body = body
}

// WithID4N adds the id4n to the write to microstorage params
func (o *WriteToMicrostorageParams) WithID4N(id4n string) *WriteToMicrostorageParams {
	o.SetID4N(id4n)
	return o
}

// SetID4N adds the id4n to the write to microstorage params
func (o *WriteToMicrostorageParams) SetID4N(id4n string) {
	o.ID4N = id4n
}

// WithOrganization adds the organization to the write to microstorage params
func (o *WriteToMicrostorageParams) WithOrganization(organization string) *WriteToMicrostorageParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the write to microstorage params
func (o *WriteToMicrostorageParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WriteToRequest writes these params to a swagger request
func (o *WriteToMicrostorageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContentLength != nil {

		// header param Content-Length
		if err := r.SetHeaderParam("Content-Length", swag.FormatInt64(*o.ContentLength)); err != nil {
			return err
		}

	}

	if o.ContentType != nil {

		// header param Content-Type
		if err := r.SetHeaderParam("Content-Type", *o.ContentType); err != nil {
			return err
		}

	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param id4n
	if err := r.SetPathParam("id4n", o.ID4N); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
