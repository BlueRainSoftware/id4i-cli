// Code generated by go-swagger; DO NOT EDIT.

package transfer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api/models"
)

// ReceiveReader is a Reader for the Receive structure.
type ReceiveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReceiveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReceiveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewReceiveAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReceiveBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewReceiveUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReceiveForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReceiveNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewReceiveMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewReceiveNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewReceiveConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewReceiveUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReceiveInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReceiveOK creates a ReceiveOK with default headers values
func NewReceiveOK() *ReceiveOK {
	return &ReceiveOK{}
}

/*ReceiveOK handles this case with default header values.

OK
*/
type ReceiveOK struct {
}

func (o *ReceiveOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/transfers/{id4n}/receiveInfo][%d] receiveOK ", 200)
}

func (o *ReceiveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReceiveAccepted creates a ReceiveAccepted with default headers values
func NewReceiveAccepted() *ReceiveAccepted {
	return &ReceiveAccepted{}
}

/*ReceiveAccepted handles this case with default header values.

Accepted
*/
type ReceiveAccepted struct {
}

func (o *ReceiveAccepted) Error() string {
	return fmt.Sprintf("[PUT /api/v1/transfers/{id4n}/receiveInfo][%d] receiveAccepted ", 202)
}

func (o *ReceiveAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReceiveBadRequest creates a ReceiveBadRequest with default headers values
func NewReceiveBadRequest() *ReceiveBadRequest {
	return &ReceiveBadRequest{}
}

/*ReceiveBadRequest handles this case with default header values.

Bad Request
*/
type ReceiveBadRequest struct {
	Payload *api_models.APIError
}

func (o *ReceiveBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/transfers/{id4n}/receiveInfo][%d] receiveBadRequest  %+v", 400, o.Payload)
}

func (o *ReceiveBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReceiveUnauthorized creates a ReceiveUnauthorized with default headers values
func NewReceiveUnauthorized() *ReceiveUnauthorized {
	return &ReceiveUnauthorized{}
}

/*ReceiveUnauthorized handles this case with default header values.

Unauthorized
*/
type ReceiveUnauthorized struct {
	Payload *api_models.APIError
}

func (o *ReceiveUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v1/transfers/{id4n}/receiveInfo][%d] receiveUnauthorized  %+v", 401, o.Payload)
}

func (o *ReceiveUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReceiveForbidden creates a ReceiveForbidden with default headers values
func NewReceiveForbidden() *ReceiveForbidden {
	return &ReceiveForbidden{}
}

/*ReceiveForbidden handles this case with default header values.

Forbidden
*/
type ReceiveForbidden struct {
	Payload *api_models.APIError
}

func (o *ReceiveForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/transfers/{id4n}/receiveInfo][%d] receiveForbidden  %+v", 403, o.Payload)
}

func (o *ReceiveForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReceiveNotFound creates a ReceiveNotFound with default headers values
func NewReceiveNotFound() *ReceiveNotFound {
	return &ReceiveNotFound{}
}

/*ReceiveNotFound handles this case with default header values.

Not Found
*/
type ReceiveNotFound struct {
	Payload *api_models.APIError
}

func (o *ReceiveNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/transfers/{id4n}/receiveInfo][%d] receiveNotFound  %+v", 404, o.Payload)
}

func (o *ReceiveNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReceiveMethodNotAllowed creates a ReceiveMethodNotAllowed with default headers values
func NewReceiveMethodNotAllowed() *ReceiveMethodNotAllowed {
	return &ReceiveMethodNotAllowed{}
}

/*ReceiveMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type ReceiveMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *ReceiveMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /api/v1/transfers/{id4n}/receiveInfo][%d] receiveMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ReceiveMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReceiveNotAcceptable creates a ReceiveNotAcceptable with default headers values
func NewReceiveNotAcceptable() *ReceiveNotAcceptable {
	return &ReceiveNotAcceptable{}
}

/*ReceiveNotAcceptable handles this case with default header values.

Not Acceptable
*/
type ReceiveNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *ReceiveNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /api/v1/transfers/{id4n}/receiveInfo][%d] receiveNotAcceptable  %+v", 406, o.Payload)
}

func (o *ReceiveNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReceiveConflict creates a ReceiveConflict with default headers values
func NewReceiveConflict() *ReceiveConflict {
	return &ReceiveConflict{}
}

/*ReceiveConflict handles this case with default header values.

Conflict
*/
type ReceiveConflict struct {
	Payload *api_models.APIError
}

func (o *ReceiveConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v1/transfers/{id4n}/receiveInfo][%d] receiveConflict  %+v", 409, o.Payload)
}

func (o *ReceiveConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReceiveUnsupportedMediaType creates a ReceiveUnsupportedMediaType with default headers values
func NewReceiveUnsupportedMediaType() *ReceiveUnsupportedMediaType {
	return &ReceiveUnsupportedMediaType{}
}

/*ReceiveUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type ReceiveUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *ReceiveUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v1/transfers/{id4n}/receiveInfo][%d] receiveUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ReceiveUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReceiveInternalServerError creates a ReceiveInternalServerError with default headers values
func NewReceiveInternalServerError() *ReceiveInternalServerError {
	return &ReceiveInternalServerError{}
}

/*ReceiveInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReceiveInternalServerError struct {
	Payload *api_models.APIError
}

func (o *ReceiveInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/transfers/{id4n}/receiveInfo][%d] receiveInternalServerError  %+v", 500, o.Payload)
}

func (o *ReceiveInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
