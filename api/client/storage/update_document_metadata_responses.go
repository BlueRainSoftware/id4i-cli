// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api/models"
)

// UpdateDocumentMetadataReader is a Reader for the UpdateDocumentMetadata structure.
type UpdateDocumentMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDocumentMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateDocumentMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewUpdateDocumentMetadataNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewUpdateDocumentMetadataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateDocumentMetadataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateDocumentMetadataOK creates a UpdateDocumentMetadataOK with default headers values
func NewUpdateDocumentMetadataOK() *UpdateDocumentMetadataOK {
	return &UpdateDocumentMetadataOK{}
}

/*UpdateDocumentMetadataOK handles this case with default header values.

OK
*/
type UpdateDocumentMetadataOK struct {
	Payload *api_models.Document
}

func (o *UpdateDocumentMetadataOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/documents/{id4n}/{organizationId}/{fileName}/metadata][%d] updateDocumentMetadataOK  %+v", 200, o.Payload)
}

func (o *UpdateDocumentMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.Document)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDocumentMetadataNoContent creates a UpdateDocumentMetadataNoContent with default headers values
func NewUpdateDocumentMetadataNoContent() *UpdateDocumentMetadataNoContent {
	return &UpdateDocumentMetadataNoContent{}
}

/*UpdateDocumentMetadataNoContent handles this case with default header values.

No Content
*/
type UpdateDocumentMetadataNoContent struct {
}

func (o *UpdateDocumentMetadataNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/documents/{id4n}/{organizationId}/{fileName}/metadata][%d] updateDocumentMetadataNoContent ", 204)
}

func (o *UpdateDocumentMetadataNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDocumentMetadataUnauthorized creates a UpdateDocumentMetadataUnauthorized with default headers values
func NewUpdateDocumentMetadataUnauthorized() *UpdateDocumentMetadataUnauthorized {
	return &UpdateDocumentMetadataUnauthorized{}
}

/*UpdateDocumentMetadataUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateDocumentMetadataUnauthorized struct {
}

func (o *UpdateDocumentMetadataUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/documents/{id4n}/{organizationId}/{fileName}/metadata][%d] updateDocumentMetadataUnauthorized ", 401)
}

func (o *UpdateDocumentMetadataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDocumentMetadataForbidden creates a UpdateDocumentMetadataForbidden with default headers values
func NewUpdateDocumentMetadataForbidden() *UpdateDocumentMetadataForbidden {
	return &UpdateDocumentMetadataForbidden{}
}

/*UpdateDocumentMetadataForbidden handles this case with default header values.

Forbidden
*/
type UpdateDocumentMetadataForbidden struct {
}

func (o *UpdateDocumentMetadataForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/documents/{id4n}/{organizationId}/{fileName}/metadata][%d] updateDocumentMetadataForbidden ", 403)
}

func (o *UpdateDocumentMetadataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
