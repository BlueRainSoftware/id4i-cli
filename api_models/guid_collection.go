// Code generated by go-swagger; DO NOT EDIT.

package api_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GUIDCollection GuidCollection
// swagger:model GuidCollection
type GUIDCollection struct {

	// The UTC unix timestamp of when this collection has been created
	// Read Only: true
	CreatedTimestamp int64 `json:"createdTimestamp,omitempty"`

	// Organization namespace of the holder of the collection
	HolderOrganizationID string `json:"holderOrganizationId,omitempty"`

	// The ID
	// Read Only: true
	ID4N string `json:"id4n,omitempty"`

	// label
	// Max Length: 128
	// Min Length: 5
	Label string `json:"label,omitempty"`

	// Organization namespace of the collection owner
	// Read Only: true
	OwnerOrganizationID string `json:"ownerOrganizationId,omitempty"`

	// Physical attachment state of the collection
	// Enum: [UNATTACHED ATTACHED DETACHED]
	PhysicalState string `json:"physicalState,omitempty"`

	// type
	// Read Only: true
	// Enum: [ROUTING_COLLECTION LOGISTIC_COLLECTION LABELLED_COLLECTION]
	Type string `json:"type,omitempty"`
}

// Validate validates this Guid collection
func (m *GUIDCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GUIDCollection) validateLabel(formats strfmt.Registry) error {

	if swag.IsZero(m.Label) { // not required
		return nil
	}

	if err := validate.MinLength("label", "body", string(m.Label), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("label", "body", string(m.Label), 128); err != nil {
		return err
	}

	return nil
}

var guidCollectionTypePhysicalStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNATTACHED","ATTACHED","DETACHED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		guidCollectionTypePhysicalStatePropEnum = append(guidCollectionTypePhysicalStatePropEnum, v)
	}
}

const (

	// GUIDCollectionPhysicalStateUNATTACHED captures enum value "UNATTACHED"
	GUIDCollectionPhysicalStateUNATTACHED string = "UNATTACHED"

	// GUIDCollectionPhysicalStateATTACHED captures enum value "ATTACHED"
	GUIDCollectionPhysicalStateATTACHED string = "ATTACHED"

	// GUIDCollectionPhysicalStateDETACHED captures enum value "DETACHED"
	GUIDCollectionPhysicalStateDETACHED string = "DETACHED"
)

// prop value enum
func (m *GUIDCollection) validatePhysicalStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, guidCollectionTypePhysicalStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GUIDCollection) validatePhysicalState(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalState) { // not required
		return nil
	}

	// value enum
	if err := m.validatePhysicalStateEnum("physicalState", "body", m.PhysicalState); err != nil {
		return err
	}

	return nil
}

var guidCollectionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ROUTING_COLLECTION","LOGISTIC_COLLECTION","LABELLED_COLLECTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		guidCollectionTypeTypePropEnum = append(guidCollectionTypeTypePropEnum, v)
	}
}

const (

	// GUIDCollectionTypeROUTINGCOLLECTION captures enum value "ROUTING_COLLECTION"
	GUIDCollectionTypeROUTINGCOLLECTION string = "ROUTING_COLLECTION"

	// GUIDCollectionTypeLOGISTICCOLLECTION captures enum value "LOGISTIC_COLLECTION"
	GUIDCollectionTypeLOGISTICCOLLECTION string = "LOGISTIC_COLLECTION"

	// GUIDCollectionTypeLABELLEDCOLLECTION captures enum value "LABELLED_COLLECTION"
	GUIDCollectionTypeLABELLEDCOLLECTION string = "LABELLED_COLLECTION"
)

// prop value enum
func (m *GUIDCollection) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, guidCollectionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GUIDCollection) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GUIDCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GUIDCollection) UnmarshalBinary(b []byte) error {
	var res GUIDCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
