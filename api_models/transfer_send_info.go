// Code generated by go-swagger; DO NOT EDIT.

package api_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransferSendInfo TransferSendInfo
// swagger:model TransferSendInfo
type TransferSendInfo struct {

	// The current holder of the object
	// Read Only: true
	HolderOrganizationID string `json:"holderOrganizationId,omitempty"`

	// Keep the public ownership while transferring the object
	// Required: true
	KeepOwnership *bool `json:"keepOwnership"`

	// Allow anyone who knows (or can scan) the ID4N to claim ownership of this object
	// Required: true
	OpenForClaims *bool `json:"openForClaims"`

	// The current publicly visible owner of the object
	// Read Only: true
	OwnerOrganizationID string `json:"ownerOrganizationId,omitempty"`

	// Allow only these organizations to obtain this object
	// Required: true
	RecipientOrganizationIds []string `json:"recipientOrganizationIds"`
}

// Validate validates this transfer send info
func (m *TransferSendInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeepOwnership(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenForClaims(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipientOrganizationIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferSendInfo) validateKeepOwnership(formats strfmt.Registry) error {

	if err := validate.Required("keepOwnership", "body", m.KeepOwnership); err != nil {
		return err
	}

	return nil
}

func (m *TransferSendInfo) validateOpenForClaims(formats strfmt.Registry) error {

	if err := validate.Required("openForClaims", "body", m.OpenForClaims); err != nil {
		return err
	}

	return nil
}

func (m *TransferSendInfo) validateRecipientOrganizationIds(formats strfmt.Registry) error {

	if err := validate.Required("recipientOrganizationIds", "body", m.RecipientOrganizationIds); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransferSendInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransferSendInfo) UnmarshalBinary(b []byte) error {
	var res TransferSendInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
