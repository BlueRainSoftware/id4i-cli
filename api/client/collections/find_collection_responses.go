// Code generated by go-swagger; DO NOT EDIT.

package collections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api/models"
)

// FindCollectionReader is a Reader for the FindCollection structure.
type FindCollectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindCollectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewFindCollectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewFindCollectionAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewFindCollectionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewFindCollectionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewFindCollectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewFindCollectionMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewFindCollectionNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewFindCollectionUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewFindCollectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewFindCollectionOK creates a FindCollectionOK with default headers values
func NewFindCollectionOK() *FindCollectionOK {
	return &FindCollectionOK{}
}

/*FindCollectionOK handles this case with default header values.

OK
*/
type FindCollectionOK struct {
	Payload *api_models.GUIDCollection
}

func (o *FindCollectionOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/collections/{id4n}][%d] findCollectionOK  %+v", 200, o.Payload)
}

func (o *FindCollectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.GUIDCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindCollectionAccepted creates a FindCollectionAccepted with default headers values
func NewFindCollectionAccepted() *FindCollectionAccepted {
	return &FindCollectionAccepted{}
}

/*FindCollectionAccepted handles this case with default header values.

Accepted
*/
type FindCollectionAccepted struct {
}

func (o *FindCollectionAccepted) Error() string {
	return fmt.Sprintf("[GET /api/v1/collections/{id4n}][%d] findCollectionAccepted ", 202)
}

func (o *FindCollectionAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindCollectionUnauthorized creates a FindCollectionUnauthorized with default headers values
func NewFindCollectionUnauthorized() *FindCollectionUnauthorized {
	return &FindCollectionUnauthorized{}
}

/*FindCollectionUnauthorized handles this case with default header values.

Unauthorized
*/
type FindCollectionUnauthorized struct {
	Payload *api_models.APIError
}

func (o *FindCollectionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/collections/{id4n}][%d] findCollectionUnauthorized  %+v", 401, o.Payload)
}

func (o *FindCollectionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindCollectionForbidden creates a FindCollectionForbidden with default headers values
func NewFindCollectionForbidden() *FindCollectionForbidden {
	return &FindCollectionForbidden{}
}

/*FindCollectionForbidden handles this case with default header values.

Forbidden
*/
type FindCollectionForbidden struct {
	Payload *api_models.APIError
}

func (o *FindCollectionForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/collections/{id4n}][%d] findCollectionForbidden  %+v", 403, o.Payload)
}

func (o *FindCollectionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindCollectionNotFound creates a FindCollectionNotFound with default headers values
func NewFindCollectionNotFound() *FindCollectionNotFound {
	return &FindCollectionNotFound{}
}

/*FindCollectionNotFound handles this case with default header values.

Not Found
*/
type FindCollectionNotFound struct {
	Payload *api_models.APIError
}

func (o *FindCollectionNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/collections/{id4n}][%d] findCollectionNotFound  %+v", 404, o.Payload)
}

func (o *FindCollectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindCollectionMethodNotAllowed creates a FindCollectionMethodNotAllowed with default headers values
func NewFindCollectionMethodNotAllowed() *FindCollectionMethodNotAllowed {
	return &FindCollectionMethodNotAllowed{}
}

/*FindCollectionMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type FindCollectionMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *FindCollectionMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/v1/collections/{id4n}][%d] findCollectionMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *FindCollectionMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindCollectionNotAcceptable creates a FindCollectionNotAcceptable with default headers values
func NewFindCollectionNotAcceptable() *FindCollectionNotAcceptable {
	return &FindCollectionNotAcceptable{}
}

/*FindCollectionNotAcceptable handles this case with default header values.

Not Acceptable
*/
type FindCollectionNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *FindCollectionNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/v1/collections/{id4n}][%d] findCollectionNotAcceptable  %+v", 406, o.Payload)
}

func (o *FindCollectionNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindCollectionUnsupportedMediaType creates a FindCollectionUnsupportedMediaType with default headers values
func NewFindCollectionUnsupportedMediaType() *FindCollectionUnsupportedMediaType {
	return &FindCollectionUnsupportedMediaType{}
}

/*FindCollectionUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type FindCollectionUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *FindCollectionUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v1/collections/{id4n}][%d] findCollectionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *FindCollectionUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindCollectionInternalServerError creates a FindCollectionInternalServerError with default headers values
func NewFindCollectionInternalServerError() *FindCollectionInternalServerError {
	return &FindCollectionInternalServerError{}
}

/*FindCollectionInternalServerError handles this case with default header values.

Internal Server Error
*/
type FindCollectionInternalServerError struct {
	Payload *api_models.APIError
}

func (o *FindCollectionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/collections/{id4n}][%d] findCollectionInternalServerError  %+v", 500, o.Payload)
}

func (o *FindCollectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
