// Code generated by go-swagger; DO NOT EDIT.

package history

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFilteredListParams creates a new FilteredListParams object
// with the default values initialized.
func NewFilteredListParams() *FilteredListParams {
	var (
		includePrivateDefault = bool(true)
	)
	return &FilteredListParams{
		IncludePrivate: &includePrivateDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewFilteredListParamsWithTimeout creates a new FilteredListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFilteredListParamsWithTimeout(timeout time.Duration) *FilteredListParams {
	var (
		includePrivateDefault = bool(true)
	)
	return &FilteredListParams{
		IncludePrivate: &includePrivateDefault,

		timeout: timeout,
	}
}

// NewFilteredListParamsWithContext creates a new FilteredListParams object
// with the default values initialized, and the ability to set a context for a request
func NewFilteredListParamsWithContext(ctx context.Context) *FilteredListParams {
	var (
		includePrivateDefault = bool(true)
	)
	return &FilteredListParams{
		IncludePrivate: &includePrivateDefault,

		Context: ctx,
	}
}

// NewFilteredListParamsWithHTTPClient creates a new FilteredListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFilteredListParamsWithHTTPClient(client *http.Client) *FilteredListParams {
	var (
		includePrivateDefault = bool(true)
	)
	return &FilteredListParams{
		IncludePrivate: &includePrivateDefault,
		HTTPClient:     client,
	}
}

/*FilteredListParams contains all the parameters to send to the API endpoint
for the filtered list operation typically these are written to a http.Request
*/
type FilteredListParams struct {

	/*FromDate
	  From date time as UTC Date-Time format

	*/
	FromDate *strfmt.DateTime
	/*ID4N
	  GUID to retrieve the history for

	*/
	ID4N string
	/*IncludePrivate
	  Also return private history entries

	*/
	IncludePrivate *bool
	/*Limit
	  The maximum count of returned elements

	*/
	Limit *int32
	/*Offset
	  Start with the n-th element

	*/
	Offset *int32
	/*Organization
	  Show only entries created by one of the given organizations. This parameter can be used multiple times.

	*/
	Organization *string
	/*Qualifier
	  Show only entries matching one of the given history item qualifiers (additional property de.id4i.history.item.qualifier). This parameter can be used multiple times.

	*/
	Qualifier []string
	/*ToDate
	  To date time as UTC Date-Time format

	*/
	ToDate *strfmt.DateTime
	/*Type
	  Show only entries matching one of the given history item types. This parameter can be used multiple times.

	*/
	Type []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the filtered list params
func (o *FilteredListParams) WithTimeout(timeout time.Duration) *FilteredListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the filtered list params
func (o *FilteredListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the filtered list params
func (o *FilteredListParams) WithContext(ctx context.Context) *FilteredListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the filtered list params
func (o *FilteredListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the filtered list params
func (o *FilteredListParams) WithHTTPClient(client *http.Client) *FilteredListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the filtered list params
func (o *FilteredListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFromDate adds the fromDate to the filtered list params
func (o *FilteredListParams) WithFromDate(fromDate *strfmt.DateTime) *FilteredListParams {
	o.SetFromDate(fromDate)
	return o
}

// SetFromDate adds the fromDate to the filtered list params
func (o *FilteredListParams) SetFromDate(fromDate *strfmt.DateTime) {
	o.FromDate = fromDate
}

// WithID4N adds the id4n to the filtered list params
func (o *FilteredListParams) WithID4N(id4n string) *FilteredListParams {
	o.SetID4N(id4n)
	return o
}

// SetID4N adds the id4n to the filtered list params
func (o *FilteredListParams) SetID4N(id4n string) {
	o.ID4N = id4n
}

// WithIncludePrivate adds the includePrivate to the filtered list params
func (o *FilteredListParams) WithIncludePrivate(includePrivate *bool) *FilteredListParams {
	o.SetIncludePrivate(includePrivate)
	return o
}

// SetIncludePrivate adds the includePrivate to the filtered list params
func (o *FilteredListParams) SetIncludePrivate(includePrivate *bool) {
	o.IncludePrivate = includePrivate
}

// WithLimit adds the limit to the filtered list params
func (o *FilteredListParams) WithLimit(limit *int32) *FilteredListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the filtered list params
func (o *FilteredListParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the filtered list params
func (o *FilteredListParams) WithOffset(offset *int32) *FilteredListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the filtered list params
func (o *FilteredListParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOrganization adds the organization to the filtered list params
func (o *FilteredListParams) WithOrganization(organization *string) *FilteredListParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the filtered list params
func (o *FilteredListParams) SetOrganization(organization *string) {
	o.Organization = organization
}

// WithQualifier adds the qualifier to the filtered list params
func (o *FilteredListParams) WithQualifier(qualifier []string) *FilteredListParams {
	o.SetQualifier(qualifier)
	return o
}

// SetQualifier adds the qualifier to the filtered list params
func (o *FilteredListParams) SetQualifier(qualifier []string) {
	o.Qualifier = qualifier
}

// WithToDate adds the toDate to the filtered list params
func (o *FilteredListParams) WithToDate(toDate *strfmt.DateTime) *FilteredListParams {
	o.SetToDate(toDate)
	return o
}

// SetToDate adds the toDate to the filtered list params
func (o *FilteredListParams) SetToDate(toDate *strfmt.DateTime) {
	o.ToDate = toDate
}

// WithType adds the typeVar to the filtered list params
func (o *FilteredListParams) WithType(typeVar []string) *FilteredListParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the filtered list params
func (o *FilteredListParams) SetType(typeVar []string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *FilteredListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FromDate != nil {

		// query param fromDate
		var qrFromDate strfmt.DateTime
		if o.FromDate != nil {
			qrFromDate = *o.FromDate
		}
		qFromDate := qrFromDate.String()
		if qFromDate != "" {
			if err := r.SetQueryParam("fromDate", qFromDate); err != nil {
				return err
			}
		}

	}

	// path param id4n
	if err := r.SetPathParam("id4n", o.ID4N); err != nil {
		return err
	}

	if o.IncludePrivate != nil {

		// query param includePrivate
		var qrIncludePrivate bool
		if o.IncludePrivate != nil {
			qrIncludePrivate = *o.IncludePrivate
		}
		qIncludePrivate := swag.FormatBool(qrIncludePrivate)
		if qIncludePrivate != "" {
			if err := r.SetQueryParam("includePrivate", qIncludePrivate); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Organization != nil {

		// query param organization
		var qrOrganization string
		if o.Organization != nil {
			qrOrganization = *o.Organization
		}
		qOrganization := qrOrganization
		if qOrganization != "" {
			if err := r.SetQueryParam("organization", qOrganization); err != nil {
				return err
			}
		}

	}

	valuesQualifier := o.Qualifier

	joinedQualifier := swag.JoinByFormat(valuesQualifier, "multi")
	// query array param qualifier
	if err := r.SetQueryParam("qualifier", joinedQualifier...); err != nil {
		return err
	}

	if o.ToDate != nil {

		// query param toDate
		var qrToDate strfmt.DateTime
		if o.ToDate != nil {
			qrToDate = *o.ToDate
		}
		qToDate := qrToDate.String()
		if qToDate != "" {
			if err := r.SetQueryParam("toDate", qToDate); err != nil {
				return err
			}
		}

	}

	valuesType := o.Type

	joinedType := swag.JoinByFormat(valuesType, "multi")
	// query array param type
	if err := r.SetQueryParam("type", joinedType...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
