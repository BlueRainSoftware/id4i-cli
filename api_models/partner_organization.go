// Code generated by go-swagger; DO NOT EDIT.

package api_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PartnerOrganization PartnerOrganization
//
// A partner organization
// swagger:model PartnerOrganization
type PartnerOrganization struct {

	// URL to a logo of the organization
	// Read Only: true
	LogoURL string `json:"logoURL,omitempty"`

	// The name of the organization
	// Read Only: true
	// Max Length: 254
	// Min Length: 3
	Name string `json:"name,omitempty"`

	// The namespace of the organization
	// Read Only: true
	// Max Length: 255
	// Min Length: 3
	Namespace string `json:"namespace,omitempty"`
}

// Validate validates this partner organization
func (m *PartnerOrganization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartnerOrganization) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(m.Name), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 254); err != nil {
		return err
	}

	return nil
}

func (m *PartnerOrganization) validateNamespace(formats strfmt.Registry) error {

	if swag.IsZero(m.Namespace) { // not required
		return nil
	}

	if err := validate.MinLength("namespace", "body", string(m.Namespace), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("namespace", "body", string(m.Namespace), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartnerOrganization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartnerOrganization) UnmarshalBinary(b []byte) error {
	var res PartnerOrganization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
