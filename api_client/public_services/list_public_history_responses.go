// Code generated by go-swagger; DO NOT EDIT.

package public_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	api_models "github.com/BlueRainSoftware/id4i-cli/api_models"
)

// ListPublicHistoryReader is a Reader for the ListPublicHistory structure.
type ListPublicHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPublicHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListPublicHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewListPublicHistoryAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListPublicHistoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListPublicHistoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListPublicHistoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewListPublicHistoryMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewListPublicHistoryNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewListPublicHistoryUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListPublicHistoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListPublicHistoryOK creates a ListPublicHistoryOK with default headers values
func NewListPublicHistoryOK() *ListPublicHistoryOK {
	return &ListPublicHistoryOK{}
}

/*ListPublicHistoryOK handles this case with default header values.

OK
*/
type ListPublicHistoryOK struct {
	Payload *api_models.PaginatedHistoryItemResponse
}

func (o *ListPublicHistoryOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/history/{id4n}][%d] listPublicHistoryOK  %+v", 200, o.Payload)
}

func (o *ListPublicHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.PaginatedHistoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPublicHistoryAccepted creates a ListPublicHistoryAccepted with default headers values
func NewListPublicHistoryAccepted() *ListPublicHistoryAccepted {
	return &ListPublicHistoryAccepted{}
}

/*ListPublicHistoryAccepted handles this case with default header values.

Accepted
*/
type ListPublicHistoryAccepted struct {
}

func (o *ListPublicHistoryAccepted) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/history/{id4n}][%d] listPublicHistoryAccepted ", 202)
}

func (o *ListPublicHistoryAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListPublicHistoryUnauthorized creates a ListPublicHistoryUnauthorized with default headers values
func NewListPublicHistoryUnauthorized() *ListPublicHistoryUnauthorized {
	return &ListPublicHistoryUnauthorized{}
}

/*ListPublicHistoryUnauthorized handles this case with default header values.

Unauthorized
*/
type ListPublicHistoryUnauthorized struct {
	Payload *api_models.APIError
}

func (o *ListPublicHistoryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/history/{id4n}][%d] listPublicHistoryUnauthorized  %+v", 401, o.Payload)
}

func (o *ListPublicHistoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPublicHistoryForbidden creates a ListPublicHistoryForbidden with default headers values
func NewListPublicHistoryForbidden() *ListPublicHistoryForbidden {
	return &ListPublicHistoryForbidden{}
}

/*ListPublicHistoryForbidden handles this case with default header values.

Forbidden
*/
type ListPublicHistoryForbidden struct {
	Payload *api_models.APIError
}

func (o *ListPublicHistoryForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/history/{id4n}][%d] listPublicHistoryForbidden  %+v", 403, o.Payload)
}

func (o *ListPublicHistoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPublicHistoryNotFound creates a ListPublicHistoryNotFound with default headers values
func NewListPublicHistoryNotFound() *ListPublicHistoryNotFound {
	return &ListPublicHistoryNotFound{}
}

/*ListPublicHistoryNotFound handles this case with default header values.

Not Found
*/
type ListPublicHistoryNotFound struct {
	Payload *api_models.APIError
}

func (o *ListPublicHistoryNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/history/{id4n}][%d] listPublicHistoryNotFound  %+v", 404, o.Payload)
}

func (o *ListPublicHistoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPublicHistoryMethodNotAllowed creates a ListPublicHistoryMethodNotAllowed with default headers values
func NewListPublicHistoryMethodNotAllowed() *ListPublicHistoryMethodNotAllowed {
	return &ListPublicHistoryMethodNotAllowed{}
}

/*ListPublicHistoryMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type ListPublicHistoryMethodNotAllowed struct {
	Payload *api_models.APIError
}

func (o *ListPublicHistoryMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/history/{id4n}][%d] listPublicHistoryMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ListPublicHistoryMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPublicHistoryNotAcceptable creates a ListPublicHistoryNotAcceptable with default headers values
func NewListPublicHistoryNotAcceptable() *ListPublicHistoryNotAcceptable {
	return &ListPublicHistoryNotAcceptable{}
}

/*ListPublicHistoryNotAcceptable handles this case with default header values.

Not Acceptable
*/
type ListPublicHistoryNotAcceptable struct {
	Payload *api_models.APIError
}

func (o *ListPublicHistoryNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/history/{id4n}][%d] listPublicHistoryNotAcceptable  %+v", 406, o.Payload)
}

func (o *ListPublicHistoryNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPublicHistoryUnsupportedMediaType creates a ListPublicHistoryUnsupportedMediaType with default headers values
func NewListPublicHistoryUnsupportedMediaType() *ListPublicHistoryUnsupportedMediaType {
	return &ListPublicHistoryUnsupportedMediaType{}
}

/*ListPublicHistoryUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type ListPublicHistoryUnsupportedMediaType struct {
	Payload *api_models.APIError
}

func (o *ListPublicHistoryUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/history/{id4n}][%d] listPublicHistoryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListPublicHistoryUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPublicHistoryInternalServerError creates a ListPublicHistoryInternalServerError with default headers values
func NewListPublicHistoryInternalServerError() *ListPublicHistoryInternalServerError {
	return &ListPublicHistoryInternalServerError{}
}

/*ListPublicHistoryInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListPublicHistoryInternalServerError struct {
	Payload *api_models.APIError
}

func (o *ListPublicHistoryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/public/history/{id4n}][%d] listPublicHistoryInternalServerError  %+v", 500, o.Payload)
}

func (o *ListPublicHistoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(api_models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
