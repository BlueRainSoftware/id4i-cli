// Code generated by go-swagger; DO NOT EDIT.

package api_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCollectionRequest CreateCollectionRequest
// swagger:model CreateCollectionRequest
type CreateCollectionRequest struct {

	// label
	// Max Length: 128
	// Min Length: 5
	Label string `json:"label,omitempty"`

	// length
	// Required: true
	// Maximum: 255
	// Minimum: 6
	Length *int32 `json:"length"`

	// organization Id
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// type
	// Required: true
	// Enum: [ROUTING_COLLECTION LOGISTIC_COLLECTION LABELLED_COLLECTION]
	Type *string `json:"type"`
}

// Validate validates this create collection request
func (m *CreateCollectionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCollectionRequest) validateLabel(formats strfmt.Registry) error {

	if swag.IsZero(m.Label) { // not required
		return nil
	}

	if err := validate.MinLength("label", "body", string(m.Label), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("label", "body", string(m.Label), 128); err != nil {
		return err
	}

	return nil
}

func (m *CreateCollectionRequest) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("length", "body", m.Length); err != nil {
		return err
	}

	if err := validate.MinimumInt("length", "body", int64(*m.Length), 6, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("length", "body", int64(*m.Length), 255, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateCollectionRequest) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

var createCollectionRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ROUTING_COLLECTION","LOGISTIC_COLLECTION","LABELLED_COLLECTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCollectionRequestTypeTypePropEnum = append(createCollectionRequestTypeTypePropEnum, v)
	}
}

const (

	// CreateCollectionRequestTypeROUTINGCOLLECTION captures enum value "ROUTING_COLLECTION"
	CreateCollectionRequestTypeROUTINGCOLLECTION string = "ROUTING_COLLECTION"

	// CreateCollectionRequestTypeLOGISTICCOLLECTION captures enum value "LOGISTIC_COLLECTION"
	CreateCollectionRequestTypeLOGISTICCOLLECTION string = "LOGISTIC_COLLECTION"

	// CreateCollectionRequestTypeLABELLEDCOLLECTION captures enum value "LABELLED_COLLECTION"
	CreateCollectionRequestTypeLABELLEDCOLLECTION string = "LABELLED_COLLECTION"
)

// prop value enum
func (m *CreateCollectionRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createCollectionRequestTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateCollectionRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateCollectionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCollectionRequest) UnmarshalBinary(b []byte) error {
	var res CreateCollectionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
