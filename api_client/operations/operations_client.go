// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddGUIDAlias adds alias for GUID or collection

Adds or replaces aliases for single ID4ns (alias type item and mapp) or groups of ID4ns (alias types gtin, ean and article)
*/
func (a *Client) AddGUIDAlias(params *AddGUIDAliasParams, authInfo runtime.ClientAuthInfoWriter) (*AddGUIDAliasOK, *AddGUIDAliasCreated, *AddGUIDAliasAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddGUIDAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addGuidAlias",
		Method:             "POST",
		PathPattern:        "/api/v1/id4ns/{id4n}/alias/{aliasType}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddGUIDAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *AddGUIDAliasOK:
		return value, nil, nil, nil
	case *AddGUIDAliasCreated:
		return nil, value, nil, nil
	case *AddGUIDAliasAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
AddUserRoles adds role s to user
*/
func (a *Client) AddUserRoles(params *AddUserRolesParams, authInfo runtime.ClientAuthInfoWriter) (*AddUserRolesOK, *AddUserRolesCreated, *AddUserRolesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addUserRoles",
		Method:             "POST",
		PathPattern:        "/api/v1/organizations/{organizationId}/users/{username}/roles",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddUserRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *AddUserRolesOK:
		return value, nil, nil, nil
	case *AddUserRolesCreated:
		return nil, value, nil, nil
	case *AddUserRolesAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GETAllCollectionsOfOrganization Gets collections of organization

Retrieving all collections of an organization in a paginated manner.
*/
func (a *Client) GETAllCollectionsOfOrganization(params *GETAllCollectionsOfOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*GETAllCollectionsOfOrganizationOK, *GETAllCollectionsOfOrganizationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETAllCollectionsOfOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllCollectionsOfOrganization",
		Method:             "GET",
		PathPattern:        "/api/v1/organizations/{organizationId}/collections",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GETAllCollectionsOfOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GETAllCollectionsOfOrganizationOK:
		return value, nil, nil
	case *GETAllCollectionsOfOrganizationAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GETAllOrganizationRoles lists users and their roles

Listing users and their roles in a paginated manner.
*/
func (a *Client) GETAllOrganizationRoles(params *GETAllOrganizationRolesParams, authInfo runtime.ClientAuthInfoWriter) (*GETAllOrganizationRolesOK, *GETAllOrganizationRolesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETAllOrganizationRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllOrganizationRoles",
		Method:             "GET",
		PathPattern:        "/api/v1/organizations/{organizationId}/roles",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GETAllOrganizationRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GETAllOrganizationRolesOK:
		return value, nil, nil
	case *GETAllOrganizationRolesAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GETGUIDAliases Gets all aliases for the given GUID or collection

Looks up the alias for each alias type (group and single) and returns a map of all aliases found.
*/
func (a *Client) GETGUIDAliases(params *GETGUIDAliasesParams, authInfo runtime.ClientAuthInfoWriter) (*GETGUIDAliasesOK, *GETGUIDAliasesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETGUIDAliasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGuidAliases",
		Method:             "GET",
		PathPattern:        "/api/v1/id4ns/{id4n}/alias",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GETGUIDAliasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GETGUIDAliasesOK:
		return value, nil, nil
	case *GETGUIDAliasesAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GETOrganizationsOfUser retrieves organizations of user
*/
func (a *Client) GETOrganizationsOfUser(params *GETOrganizationsOfUserParams, authInfo runtime.ClientAuthInfoWriter) (*GETOrganizationsOfUserOK, *GETOrganizationsOfUserAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETOrganizationsOfUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationsOfUser",
		Method:             "GET",
		PathPattern:        "/api/v1/user/organizations",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GETOrganizationsOfUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GETOrganizationsOfUserOK:
		return value, nil, nil
	case *GETOrganizationsOfUserAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GETPublicDocument retrieves a public document meta data only no content
*/
func (a *Client) GETPublicDocument(params *GETPublicDocumentParams, authInfo runtime.ClientAuthInfoWriter) (*GETPublicDocumentOK, *GETPublicDocumentAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETPublicDocumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicDocument",
		Method:             "GET",
		PathPattern:        "/api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GETPublicDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GETPublicDocumentOK:
		return value, nil, nil
	case *GETPublicDocumentAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GETUserRoles Gets user roles by username
*/
func (a *Client) GETUserRoles(params *GETUserRolesParams, authInfo runtime.ClientAuthInfoWriter) (*GETUserRolesOK, *GETUserRolesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETUserRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserRoles",
		Method:             "GET",
		PathPattern:        "/api/v1/organizations/{organizationId}/users/{username}/roles",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GETUserRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GETUserRolesOK:
		return value, nil, nil
	case *GETUserRolesAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GETUsersOfOrganization finds users in organization

Finding users in the specified organization in a paginated manner.
*/
func (a *Client) GETUsersOfOrganization(params *GETUsersOfOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*GETUsersOfOrganizationOK, *GETUsersOfOrganizationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETUsersOfOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersOfOrganization",
		Method:             "GET",
		PathPattern:        "/api/v1/organizations/{organizationId}/users",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GETUsersOfOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GETUsersOfOrganizationOK:
		return value, nil, nil
	case *GETUsersOfOrganizationAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
InviteUsers invites users
*/
func (a *Client) InviteUsers(params *InviteUsersParams, authInfo runtime.ClientAuthInfoWriter) (*InviteUsersOK, *InviteUsersCreated, *InviteUsersAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInviteUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "inviteUsers",
		Method:             "POST",
		PathPattern:        "/api/v1/organizations/{organizationId}/users/invite",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InviteUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *InviteUsersOK:
		return value, nil, nil, nil
	case *InviteUsersCreated:
		return nil, value, nil, nil
	case *InviteUsersAccepted:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
ListAllPublicDocuments lists public documents

Listing all public documents of an id4n
*/
func (a *Client) ListAllPublicDocuments(params *ListAllPublicDocumentsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllPublicDocumentsOK, *ListAllPublicDocumentsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllPublicDocumentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllPublicDocuments",
		Method:             "GET",
		PathPattern:        "/api/v1/public/documents/{id4n}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllPublicDocumentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListAllPublicDocumentsOK:
		return value, nil, nil
	case *ListAllPublicDocumentsAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ReadPublicDocument reads public document contents
*/
func (a *Client) ReadPublicDocument(params *ReadPublicDocumentParams, authInfo runtime.ClientAuthInfoWriter) (*ReadPublicDocumentOK, *ReadPublicDocumentAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadPublicDocumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readPublicDocument",
		Method:             "GET",
		PathPattern:        "/api/v1/public/documents/{id4n}/{organizationId}/{fileName}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadPublicDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReadPublicDocumentOK:
		return value, nil, nil
	case *ReadPublicDocumentAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
RemoveGUIDAlias removes aliases from GUID or collection

Remove the alias of the given type
*/
func (a *Client) RemoveGUIDAlias(params *RemoveGUIDAliasParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveGUIDAliasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveGUIDAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeGuidAlias",
		Method:             "DELETE",
		PathPattern:        "/api/v1/id4ns/{id4n}/alias/{aliasType}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveGUIDAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveGUIDAliasOK), nil

}

/*
RemoveUserRoles removes role s from user
*/
func (a *Client) RemoveUserRoles(params *RemoveUserRolesParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveUserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveUserRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeUserRoles",
		Method:             "DELETE",
		PathPattern:        "/api/v1/organizations/{organizationId}/users/{username}/roles",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveUserRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveUserRolesOK), nil

}

/*
ResolveImageUsingGET resolves image
*/
func (a *Client) ResolveImageUsingGET(params *ResolveImageUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*ResolveImageUsingGETOK, *ResolveImageUsingGETAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResolveImageUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resolveImageUsingGET",
		Method:             "GET",
		PathPattern:        "/api/v1/public/image/{imageID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResolveImageUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ResolveImageUsingGETOK:
		return value, nil, nil
	case *ResolveImageUsingGETAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ResolveWhoIsEntry resolves owner of id4n
*/
func (a *Client) ResolveWhoIsEntry(params *ResolveWhoIsEntryParams) (*ResolveWhoIsEntryOK, *ResolveWhoIsEntryAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResolveWhoIsEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resolveWhoIsEntry",
		Method:             "GET",
		PathPattern:        "/whois/{id4n}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResolveWhoIsEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ResolveWhoIsEntryOK:
		return value, nil, nil
	case *ResolveWhoIsEntryAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
