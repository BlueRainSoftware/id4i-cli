// Code generated by go-swagger; DO NOT EDIT.

package collections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// UpdateCollectionReader is a Reader for the UpdateCollection structure.
type UpdateCollectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCollectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateCollectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewUpdateCollectionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewUpdateCollectionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateCollectionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateCollectionOK creates a UpdateCollectionOK with default headers values
func NewUpdateCollectionOK() *UpdateCollectionOK {
	return &UpdateCollectionOK{}
}

/*UpdateCollectionOK handles this case with default header values.

OK
*/
type UpdateCollectionOK struct {
	Payload interface{}
}

func (o *UpdateCollectionOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/collections/{id4n}][%d] updateCollectionOK  %+v", 200, o.Payload)
}

func (o *UpdateCollectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCollectionNoContent creates a UpdateCollectionNoContent with default headers values
func NewUpdateCollectionNoContent() *UpdateCollectionNoContent {
	return &UpdateCollectionNoContent{}
}

/*UpdateCollectionNoContent handles this case with default header values.

No Content
*/
type UpdateCollectionNoContent struct {
}

func (o *UpdateCollectionNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/collections/{id4n}][%d] updateCollectionNoContent ", 204)
}

func (o *UpdateCollectionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCollectionUnauthorized creates a UpdateCollectionUnauthorized with default headers values
func NewUpdateCollectionUnauthorized() *UpdateCollectionUnauthorized {
	return &UpdateCollectionUnauthorized{}
}

/*UpdateCollectionUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateCollectionUnauthorized struct {
}

func (o *UpdateCollectionUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/collections/{id4n}][%d] updateCollectionUnauthorized ", 401)
}

func (o *UpdateCollectionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCollectionForbidden creates a UpdateCollectionForbidden with default headers values
func NewUpdateCollectionForbidden() *UpdateCollectionForbidden {
	return &UpdateCollectionForbidden{}
}

/*UpdateCollectionForbidden handles this case with default header values.

Forbidden
*/
type UpdateCollectionForbidden struct {
}

func (o *UpdateCollectionForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/collections/{id4n}][%d] updateCollectionForbidden ", 403)
}

func (o *UpdateCollectionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
